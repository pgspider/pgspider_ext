\set ECHO none
-- Before running this file User must create database mysql_fdw_post on
-- mysql with all permission for MYSQL_USER_NAME user with MYSQL_PWD password
--Testcase 717:
CREATE EXTENSION pgspider_ext;
--Testcase 718:
CREATE SERVER spdsrv FOREIGN DATA WRAPPER pgspider_ext;
--Testcase 719:
CREATE USER MAPPING FOR CURRENT_USER SERVER spdsrv;
--Testcase 1:
CREATE EXTENSION mysql_fdw;
--Testcase 2:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 3:
CREATE SERVER mysql_svr2 FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 720:
CREATE SERVER mysql_svr3 FOREIGN DATA WRAPPER mysql_fdw
  OPTIONS (host :MYSQL_HOST, port :MYSQL_PORT);
--Testcase 4:
CREATE USER MAPPING FOR PUBLIC SERVER mysql_svr
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 5:
CREATE USER MAPPING FOR PUBLIC SERVER mysql_svr2
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 721:
CREATE USER MAPPING FOR PUBLIC SERVER mysql_svr3
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
-- ===================================================================
-- create objects used through FDW mysql_svr server
-- ===================================================================
--Testcase 6:
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
--Testcase 7:
CREATE SCHEMA "S 1";
IMPORT FOREIGN SCHEMA mysql_fdw_post FROM SERVER mysql_svr INTO "S 1";
--Testcase 8:
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'::user_enum
	FROM generate_series(1, 1000) id;
--Testcase 9:
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 10:
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 11:
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
--Testcase 12:
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 13:
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
-- ANALYZE "S 1"."T 1";
-- ANALYZE "S 1"."T 2";
-- ANALYZE "S 1"."T 3";
-- ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
--Testcase 14:
CREATE FOREIGN TABLE ft1_a_child (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post');
--Testcase 15:
ALTER FOREIGN TABLE ft1_a_child DROP COLUMN c0;
--Testcase 722:
CREATE TABLE ft1 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum,
    spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 723:
CREATE FOREIGN TABLE ft1_a PARTITION OF ft1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 724:
CREATE FOREIGN TABLE ft2_a_child (
	c1 int NOT NULL,
	c2 int NOT NULL,
    cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post');
--Testcase 725:
ALTER FOREIGN TABLE ft2_a_child DROP COLUMN cx;
--Testcase 16:
CREATE TABLE ft2 (
    c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum,
    spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 726:
CREATE FOREIGN TABLE ft2_a PARTITION OF ft2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 727:
CREATE FOREIGN TABLE ft4_a_child (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'T 3');
--Testcase 18:
CREATE TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 728:
CREATE FOREIGN TABLE ft4_a PARTITION OF ft4 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 729:
CREATE FOREIGN TABLE ft5_a_child (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'T 4');
--Testcase 19:
CREATE TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 730:
CREATE FOREIGN TABLE ft5_a PARTITION OF ft5 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 731:
CREATE FOREIGN TABLE ft6_a_child (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER mysql_svr2 OPTIONS (dbname 'mysql_fdw_post', table_name 'T 4');
--Testcase 20:
CREATE TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 732:
CREATE FOREIGN TABLE ft6_a PARTITION OF ft6 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 733:
CREATE FOREIGN TABLE ft7_a_child (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER mysql_svr3 OPTIONS (dbname 'mysql_fdw_post', table_name 'T 4');
--Testcase 734:
CREATE TABLE ft7 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 735:
CREATE FOREIGN TABLE ft7_a PARTITION OF ft7 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- Enable to pushdown aggregate
--Testcase 736:
SET enable_partitionwise_aggregate TO on;
-- Turn off leader node participation to avoid duplicate data error when executing
-- parallel query
--Testcase 737:
SET parallel_leader_participation TO off;
-- -- ===================================================================
-- -- tests for validator
-- -- ===================================================================
-- -- requiressl and some other parameters are omitted because
-- -- valid values for them depend on configure options
-- ALTER SERVER testserver1 OPTIONS (
-- 	use_remote_estimate 'false',
-- 	updatable 'true',
-- 	fdw_startup_cost '123.456',
-- 	fdw_tuple_cost '0.123',
-- 	service 'value',
-- 	connect_timeout 'value',
-- 	dbname 'value',
-- 	host 'value',
-- 	hostaddr 'value',
-- 	port 'value',
-- 	--client_encoding 'value',
-- 	application_name 'value',
-- 	--fallback_application_name 'value',
-- 	keepalives 'value',
-- 	keepalives_idle 'value',
-- 	keepalives_interval 'value',
-- 	tcp_user_timeout 'value',
-- 	-- requiressl 'value',
-- 	sslcompression 'value',
-- 	sslmode 'value',
-- 	sslcert 'value',
-- 	sslkey 'value',
-- 	sslrootcert 'value',
-- 	sslcrl 'value',
-- 	--requirepeer 'value',
-- 	krbsrvname 'value',
-- 	gsslib 'value'
-- 	--replication 'value'
-- );
-- -- Error, invalid list syntax
-- ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo; bar');
-- -- OK but gets a warning
-- ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo, bar');
-- ALTER SERVER testserver1 OPTIONS (DROP extensions);
-- ALTER USER MAPPING FOR public SERVER testserver1
-- 	OPTIONS (DROP user, DROP password);
-- -- Attempt to add a valid option that's not allowed in a user mapping
-- ALTER USER MAPPING FOR public SERVER testserver1
-- 	OPTIONS (ADD sslmode 'require');
-- -- But we can add valid ones fine
-- ALTER USER MAPPING FOR public SERVER testserver1
-- 	OPTIONS (ADD sslpassword 'dummy');
-- -- Ensure valid options we haven't used in a user mapping yet are
-- -- permitted to check validation.
-- ALTER USER MAPPING FOR public SERVER testserver1
-- 	OPTIONS (ADD sslkey 'value', ADD sslcert 'value');
--Testcase 21:
ALTER FOREIGN TABLE ft1_a_child OPTIONS (table_name 'T 1');
--Testcase 22:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (table_name 'T 1');
--Testcase 23:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 24:
ALTER FOREIGN TABLE ft2_a_child ALTER COLUMN c1 OPTIONS (column_name 'C 1');
--Testcase 25:
\det+
                                    List of foreign tables
 Schema |    Table    |   Server   |                 FDW options                 | Description 
--------+-------------+------------+---------------------------------------------+-------------
 public | ft1_a       | spdsrv     |                                             | 
 public | ft1_a_child | mysql_svr  | (dbname 'mysql_fdw_post', table_name 'T 1') | 
 public | ft2_a       | spdsrv     |                                             | 
 public | ft2_a_child | mysql_svr  | (dbname 'mysql_fdw_post', table_name 'T 1') | 
 public | ft4_a       | spdsrv     |                                             | 
 public | ft4_a_child | mysql_svr  | (dbname 'mysql_fdw_post', table_name 'T 3') | 
 public | ft5_a       | spdsrv     |                                             | 
 public | ft5_a_child | mysql_svr  | (dbname 'mysql_fdw_post', table_name 'T 4') | 
 public | ft6_a       | spdsrv     |                                             | 
 public | ft6_a_child | mysql_svr2 | (dbname 'mysql_fdw_post', table_name 'T 4') | 
 public | ft7_a       | spdsrv     |                                             | 
 public | ft7_a_child | mysql_svr3 | (dbname 'mysql_fdw_post', table_name 'T 4') | 
(12 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
--Testcase 26:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

--Testcase 27:
ALTER FOREIGN TABLE ft1_a_child OPTIONS (SET dbname 'no such database');
--Testcase 28:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  mysql_fdw: failed to prepare the MySQL query: 
SELECT command denied to user 'edb'@'localhost' for table 'T 1'
--Testcase 29:
ALTER FOREIGN TABLE ft1_a_child OPTIONS (SET dbname 'mysql_fdw_post');
--Testcase 30:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

-- Test that alteration of user mapping options causes reconnection
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr
--   OPTIONS (ADD user 'no such user');
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr
--   OPTIONS (DROP user);
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
-- \set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
-- ANALYZE ft1;
--Testcase 31:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (use_remote_estimate 'true');
-- ===================================================================
-- test error case for create publication on foreign table
-- ===================================================================
--Testcase 908:
CREATE PUBLICATION testpub_ftbl FOR TABLE ft1_a_child;  -- should fail
ERROR:  cannot add relation "ft1_a_child" to publication
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
--Testcase 32:
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Foreign Scan on ft1_a ft1
(2 rows)

--Testcase 33:
SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
--Testcase 738:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
   ->  Sort
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(8 rows)

--Testcase 739:
SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- whole-row reference
--Testcase 34:
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: ((t1.*)::ft1), t1.c3, t1.c1
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.*, t1.c3, t1.c1
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(5 rows)

--Testcase 35:
SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                 t1                                                 
----------------------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ",foo,/node1/)
 (102,2,00102,"Sat Jan 03 00:00:00 1970 PST","Sat Jan 03 00:00:00 1970",2,"2         ",foo,/node1/)
 (103,3,00103,"Sun Jan 04 00:00:00 1970 PST","Sun Jan 04 00:00:00 1970",3,"3         ",foo,/node1/)
 (104,4,00104,"Mon Jan 05 00:00:00 1970 PST","Mon Jan 05 00:00:00 1970",4,"4         ",foo,/node1/)
 (105,5,00105,"Tue Jan 06 00:00:00 1970 PST","Tue Jan 06 00:00:00 1970",5,"5         ",foo,/node1/)
 (106,6,00106,"Wed Jan 07 00:00:00 1970 PST","Wed Jan 07 00:00:00 1970",6,"6         ",foo,/node1/)
 (107,7,00107,"Thu Jan 08 00:00:00 1970 PST","Thu Jan 08 00:00:00 1970",7,"7         ",foo,/node1/)
 (108,8,00108,"Fri Jan 09 00:00:00 1970 PST","Fri Jan 09 00:00:00 1970",8,"8         ",foo,/node1/)
 (109,9,00109,"Sat Jan 10 00:00:00 1970 PST","Sat Jan 10 00:00:00 1970",9,"9         ",foo,/node1/)
 (110,0,00110,"Sun Jan 11 00:00:00 1970 PST","Sun Jan 11 00:00:00 1970",0,"0         ",foo,/node1/)
(10 rows)

-- empty result
--Testcase 36:
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

-- with WHERE clause
--Testcase 37:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`c7` >= '1')) AND ((`C 1` = 101)) AND ((`c6` = '1'))
(3 rows)

--Testcase 38:
SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- with FOR UPDATE/SHARE
--Testcase 39:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, ((t1.*)::ft1), t1.tableoid
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, t1.*, t1.tableoid
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 101)) FOR UPDATE
(5 rows)

--Testcase 40:
SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 41:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, ((t1.*)::ft1), t1.tableoid
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, t1.*, t1.tableoid
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 102)) FOR SHARE
(5 rows)

--Testcase 42:
SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
(1 row)

-- aggregate
--Testcase 43:
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
--Testcase 44:
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- subquery+MAX
--Testcase 45:
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
------+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 1000 |  0 | 01000 | Thu Jan 01 00:00:00 1970 PST | Thu Jan 01 00:00:00 1970 | 0  | 0          | foo | /node1/
(1 row)

-- used in CTE
--Testcase 46:
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |              c4              
----+----+-------+------------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST
(10 rows)

-- fixed values
--Testcase 47:
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
--Testcase 48:
SET enable_hashjoin TO false;
--Testcase 49:
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 50:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t1.c1 = t2."C 1")
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(17 rows)

--Testcase 51:
SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 52:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Left Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t1.c1 = t2."C 1")
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(17 rows)

--Testcase 53:
SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
--Testcase 54:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Merge Right Join
         Output: t1."C 1"
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Merge Join
               Output: t3.c1
               Merge Cond: (t3.c1 = t2.c1)
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft2_a t3
                           Output: t3.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft1_a t2
                           Output: t2.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(26 rows)

--Testcase 55:
SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
--Testcase 56:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Right Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Merge Left Join
               Output: t3.c1, t2.c1
               Merge Cond: (t3.c1 = t2.c1)
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft2_a t3
                           Output: t3.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft1_a t2
                           Output: t2.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(26 rows)

--Testcase 57:
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
--Testcase 58:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2_a t3
                                 Output: t3.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(29 rows)

--Testcase 59:
SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

--Testcase 60:
RESET enable_hashjoin;
--Testcase 61:
RESET enable_nestloop;
-- Test executing assertion in estimate_path_cost_size() that makes sure that
-- retrieved_rows for foreign rel re-used to cost pre-sorted foreign paths is
-- a sensible value even when the rel has tuples=0
--Testcase 740:
CREATE FOREIGN TABLE ft_empty_a_child (c1 int NOT NULL, c2 text)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'loct_empty');
--Testcase 741:
CREATE TABLE ft_empty (c1 int NOT NULL, c2 text, spdurl text)
   PARTITION BY LIST (spdurl);
--Testcase 742:
CREATE FOREIGN TABLE ft_empty_a PARTITION OF ft_empty FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 743:
INSERT INTO ft_empty_a_child
  SELECT id, 'AAA' || to_char(id, 'FM000') FROM generate_series(1, 100) id;
--Testcase 744:
DELETE FROM ft_empty_a_child;
-- ANALYZE ft_empty;
--Testcase 745:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft_empty ORDER BY c1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft_empty_a ft_empty
   Output: ft_empty.c1, ft_empty.c2, ft_empty.spdurl
     Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`loct_empty` ORDER BY `c1` IS NULL ASC, `c1` ASC
(3 rows)

-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
--Testcase 62:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

--Testcase 63:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 100)) AND ((`c2` = 0))
(3 rows)

--Testcase 64:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Result
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   One-Time Filter: false
(3 rows)

--Testcase 65:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` IS NOT NULL))
(3 rows)

--Testcase 66:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((round(abs(`C 1`), 0) = 1))
(3 rows)

--Testcase 67:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = (- `C 1`)))
(3 rows)

--Testcase 69:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((NOT ((`C 1` IS NOT NULL) <=> (`C 1` IS NOT NULL))))
(3 rows)

--Testcase 70:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE (`C 1`  IN (`c2`, 1, (`C 1` + 0)))
(3 rows)

--Testcase 71:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = ELT(1, `C 1`, `c2`, 3)))
(3 rows)

--Testcase 72:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`c6` = 'foo''s\\bar'))
(3 rows)

--Testcase 73:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

-- parameterized remote path for foreign table
--Testcase 74:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2_a b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
   ->  Hash
         Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         ->  Foreign Scan on "S 1"."T 1" a
               Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
               Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 47))
(11 rows)

--Testcase 75:
SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
 C 1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
(1 row)

-- check both safe and unsafe join conditions
--Testcase 76:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
   Join Filter: ((a.c1 = b.c1) AND (upper((a.c7)::text) = (b.c7)::text))
   ->  Gather
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
         Workers Planned: 1
         ->  Parallel Append
               ->  Foreign Scan on public.ft2_a b_1
                     Output: b_1.c1, b_1.c2, b_1.c3, b_1.c4, b_1.c5, b_1.c6, b_1.c7, b_1.c8, b_1.spdurl
                       Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
   ->  Foreign Scan on public.ft2_a a
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl
         Filter: (a.c8 = 'foo'::user_enum)
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` = 6))
(14 rows)

--Testcase 77:
SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  | c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------+-----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ |  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ |  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ |  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ |  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ |  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ |  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ |  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ |  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
--Testcase 78:
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
(2 rows)

--Testcase 79:
SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
(2 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
--Testcase 80:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, random()
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 81:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ((ft2.c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.c3
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(6 rows)

-- user-defined operator/function
--Testcase 82:
CREATE FUNCTION mysql_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
--Testcase 83:
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
--Testcase 84:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan
         Output: (PARTIAL count(t1.c3))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT count(`c3`) FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = abs(`c2`)))
(6 rows)

--Testcase 85:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 86:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan
         Output: (PARTIAL count(t1.c3))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT count(`c3`) FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = `c2`))
(6 rows)

--Testcase 87:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
--Testcase 88:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = mysql_fdw_abs(t1.c2);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 = mysql_fdw_abs(t1.c2))
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 89:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = mysql_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 90:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 91:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
--Testcase 92:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

--Testcase 93:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- but let's put them in an extension ...
--Testcase 94:
ALTER EXTENSION mysql_fdw ADD FUNCTION mysql_fdw_abs(int);
--Testcase 95:
ALTER EXTENSION mysql_fdw ADD OPERATOR === (int, int);
--Testcase 96:
ALTER SERVER mysql_svr OPTIONS (ADD extensions 'mysql_fdw');
-- ... now they can be shipped
--Testcase 97:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = mysql_fdw_abs(t1.c2);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 = mysql_fdw_abs(t1.c2))
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 98:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = mysql_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 99:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 100:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
--Testcase 101:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

--Testcase 102:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- Test CASE pushdown
-- Mysql_fdw does not support CASE expression pushdown.
--Testcase 870:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft2_a ft2
   Output: ft2.c1, ft2.c2, ft2.c3
   Filter: (CASE WHEN (ft2.c1 > 990) THEN ft2.c1 ELSE NULL::integer END < 1000)
     Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(4 rows)

--Testcase 871:
SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
 c1  | c2 |  c3   
-----+----+-------
 991 |  1 | 00991
 992 |  2 | 00992
 993 |  3 | 00993
 994 |  4 | 00994
 995 |  5 | 00995
 996 |  6 | 00996
 997 |  7 | 00997
 998 |  8 | 00998
 999 |  9 | 00999
(9 rows)

-- Nested CASE
--Testcase 872:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft2_a ft2
   Output: ft2.c1, ft2.c2, ft2.c3
   Filter: (CASE CASE WHEN (ft2.c2 > 0) THEN ft2.c2 ELSE NULL::integer END WHEN 100 THEN 601 WHEN ft2.c2 THEN ft2.c2 ELSE 0 END > 600)
     Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(4 rows)

--Testcase 873:
SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
 c1 | c2 | c3 
----+----+----
(0 rows)

-- CASE arg WHEN
--Testcase 874:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   Filter: (ft1.c1 > CASE mod(ft1.c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

-- CASE cannot be pushed down because of unshippable arg clause
--Testcase 875:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE random()::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   Filter: (ft1.c1 > CASE (random())::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

-- these are shippable
--Testcase 876:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   Filter: CASE ft1.c6 WHEN 'foo'::text THEN true ELSE (ft1.c3 < 'bar'::text) END
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

--Testcase 877:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   Filter: CASE ft1.c3 WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::text) END
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

-- but this is not because of collation
--Testcase 878:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 COLLATE "C" WHEN c6 THEN true ELSE c3 < 'bar' END;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   Filter: CASE (ft1.c3)::text WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::text) END
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

-- a regconfig constant referring to this text search configuration
-- is initially unshippable
--Testcase 909:
CREATE TEXT SEARCH CONFIGURATION public.custom_search
  (COPY = pg_catalog.english);
--Testcase 910:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, to_tsvector('custom_search'::regconfig, ft1.c3)
   Filter: (length(to_tsvector('custom_search'::regconfig, ft1.c3)) > 0)
     Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 642))
(4 rows)

--Testcase 911:
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

-- but if it's in a shippable extension, it can be shipped
ALTER EXTENSION mysql_fdw ADD TEXT SEARCH CONFIGURATION public.custom_search;
-- however, that doesn't flush the shippability cache, so do a quick reconnect
\c -
-- Enable to pushdown aggregate
SET enable_partitionwise_aggregate TO on;
SET parallel_leader_participation = 'off';
--Testcase 933:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a ft1
   Output: ft1.c1, to_tsvector('custom_search'::regconfig, ft1.c3)
   Filter: (length(to_tsvector('custom_search'::regconfig, ft1.c3)) > 0)
     Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 642))
(4 rows)

--Testcase 934:
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

ALTER EXTENSION mysql_fdw DROP TEXT SEARCH CONFIGURATION public.custom_search;
--Testcase 935:
DROP TEXT SEARCH CONFIGURATION public.custom_search;
-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
-- ANALYZE ft4;
-- ANALYZE ft5;
-- join two tables
--Testcase 103:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3
                             Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(16 rows)

--Testcase 104:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
--Testcase 105:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Nested Loop
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Join Filter: (t1.c1 = t3.c1)
               ->  Hash Join
                     Output: t1.c1, t1.c3, t2.c2, t2.c1
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t1.c1, t1.c3
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3
                                   Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
(22 rows)

--Testcase 106:
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
--Testcase 107:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Gather
                     Output: t1.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a t1_1
                                 Output: t1_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a t2
                     Output: t2.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 108:
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
--Testcase 109:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Gather
                     Output: t1.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft2_a t1_1
                                 Output: t1_1.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
         ->  Foreign Scan on public.ft4_a t3
               Output: t3.c3, t3.c1
                 Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
(21 rows)

--Testcase 110:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
--Testcase 111:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Join Filter: (t1.c1 = ft5.c1)
   ->  Gather
         Output: t1.c1, t1.c2
         Workers Planned: 1
         ->  Parallel Append
               ->  Foreign Scan on public.ft4_a t1_1
                     Output: t1_1.c1, t1_1.c2
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` < 10))
   ->  Foreign Scan on public.ft5_a ft5
         Output: ft5.c1, ft5.c2
           Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` < 10))
(13 rows)

--Testcase 112:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 113:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Join Filter: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Gather
         Output: t1.c1, t1.c2
         Workers Planned: 1
         ->  Parallel Append
               ->  Foreign Scan on public.ft4_a t1_1
                     Output: t1_1.c1, t1_1.c2
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` < 10))
   ->  Foreign Scan on public.ft5_a ft5
         Output: ft5.c1, ft5.c2
           Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` < 10))
(14 rows)

--Testcase 114:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
--Testcase 115:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Gather
                     Output: t2.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a t2_1
                                 Output: t2_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a t1
                     Output: t1.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 116:
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
--Testcase 117:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Gather
                     Output: t3.c3, t3.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a t3_1
                                 Output: t3_1.c3, t3_1.c1
                                   Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
         ->  Foreign Scan on public.ft2_a t1
               Output: t1.c1
                 Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(21 rows)

--Testcase 118:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
--Testcase 119:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(16 rows)

--Testcase 120:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
--Testcase 121:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(14 rows)

--Testcase 122:
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

--Testcase 123:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4_a ft4
                 Remote query: SELECT NULL FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
         ->  Materialize
               ->  Foreign Scan on public.ft5_a ft5
                       Remote query: SELECT NULL FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(9 rows)

--Testcase 124:
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
--Testcase 125:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (t2.c1 = ft4.c1)
         ->  Hash Right Join
               Output: t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft5_a t3
                     Output: t3.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft4_a t2
                           Output: t2.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(22 rows)

--Testcase 126:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
--Testcase 127:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft4_1.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
         ->  Hash
               Output: ft4_1.c1, ft5.c1
               ->  Hash Full Join
                     Output: ft4_1.c1, ft5.c1
                     Hash Cond: (ft4_1.c1 = ft5.c1)
                     Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4_a ft4_1
                           Output: ft4_1.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
                     ->  Hash
                           Output: ft5.c1
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(23 rows)

--Testcase 128:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
--Testcase 129:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
   ->  Sort
         Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
               ->  Hash Full Join
                     Output: ft4.c1, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, ft5.c1, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Hash Cond: (ft4.c1 = ft5.c1)
                     Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.c1, ft4.ctid, ft4.*, ft4.tableoid
                             Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
                     ->  Hash
                           Output: ft5.c1, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.c1, ft5.ctid, ft5.*, ft5.tableoid
                                   Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
               ->  Foreign Scan on "S 1"."T 3"
                     Output: "T 3".c1, "T 3".*
                     Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` = 50)) FOR UPDATE
(22 rows)

--Testcase 130:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
--Testcase 131:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: t1.c1, t2.c1
                     ->  Hash Join
                           Output: t1.c1, t2.c1
                           Hash Cond: ((t2.c1 + 1) = t1.c1)
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
                           ->  Hash
                                 Output: t1.c1
                                 ->  Foreign Scan on public.ft4_a t1
                                       Output: t1.c1
                                         Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(24 rows)

--Testcase 132:
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
--Testcase 133:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Hash Cond: (t2.c1 = t3.c1)
               ->  Hash Full Join
                     Output: t1.c1, t2.c2, t2.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft2_a t1
                           Output: t1.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t2.c2, t2.c1
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c2, t2.c1
                                   Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
               ->  Hash
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4_a t3
                           Output: t3.c3, t3.c1
                             Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
(24 rows)

--Testcase 134:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
--Testcase 135:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Nested Loop Left Join
                     Output: t3.c3, t2.c2, t2.c1
                     Join Filter: (t2.c1 = t3.c1)
                     ->  Gather
                           Output: t3.c3, t3.c1
                           Workers Planned: 1
                           ->  Parallel Append
                                 ->  Foreign Scan on public.ft4_a t3_1
                                       Output: t3_1.c3, t3_1.c1
                                         Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(24 rows)

--Testcase 136:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
--Testcase 137:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: t2.c2, t2.c1, t1.c1
                     ->  Nested Loop Left Join
                           Output: t2.c2, t2.c1, t1.c1
                           Join Filter: (t1.c1 = t2.c1)
                           ->  Gather
                                 Output: t2.c2, t2.c1
                                 Workers Planned: 1
                                 ->  Parallel Append
                                       ->  Foreign Scan on public.ft2_a t2_1
                                             Output: t2_1.c2, t2_1.c1
                                               Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
                           ->  Foreign Scan on public.ft2_a t1
                                 Output: t1.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(26 rows)

--Testcase 138:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
--Testcase 139:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Hash Full Join
                     Output: t1.c1, t2.c2, t2.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft2_a t1
                           Output: t1.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t2.c2, t2.c1
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c2, t2.c1
                                   Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
(22 rows)

--Testcase 140:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
--Testcase 141:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: t1.c1, t2.c2, t2.c1
                     ->  Nested Loop Left Join
                           Output: t1.c1, t2.c2, t2.c1
                           Join Filter: (t1.c1 = t2.c1)
                           ->  Gather
                                 Output: t1.c1
                                 Workers Planned: 1
                                 ->  Parallel Append
                                       ->  Foreign Scan on public.ft2_a t1_1
                                             Output: t1_1.c1
                                               Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c2, t2.c1
                                   Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
(26 rows)

--Testcase 142:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

--Testcase 746:
SET enable_memoize TO off;
-- right outer join + left outer join
--Testcase 143:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Nested Loop Left Join
                     Output: t2.c2, t2.c1, t1.c1
                     Join Filter: (t1.c1 = t2.c1)
                     ->  Gather
                           Output: t2.c2, t2.c1
                           Workers Planned: 1
                           ->  Parallel Append
                                 ->  Foreign Scan on public.ft2_a t2_1
                                       Output: t2_1.c2, t2_1.c1
                                         Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
                     ->  Foreign Scan on public.ft2_a t1
                           Output: t1.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
(24 rows)

--Testcase 144:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

--Testcase 747:
RESET enable_memoize;
-- left outer join + right outer join
--Testcase 145:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t2.c1
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t3.c3, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote query: SELECT `c1`, `c3` FROM `mysql_fdw_post`.`T 3`
               ->  Materialize
                     Output: t1.c1, t2.c2, t2.c1
                     ->  Nested Loop
                           Output: t1.c1, t2.c2, t2.c1
                           Join Filter: (t1.c1 = t2.c1)
                           ->  Gather
                                 Output: t1.c1
                                 Workers Planned: 1
                                 ->  Parallel Append
                                       ->  Foreign Scan on public.ft2_a t1_1
                                             Output: t1_1.c1
                                               Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c2, t2.c1
                                   Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
(26 rows)

--Testcase 146:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
--Testcase 147:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(17 rows)

--Testcase 148:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
--Testcase 149:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE mysql_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (mysql_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c3
                 Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1`
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
(14 rows)

--Testcase 150:
ALTER SERVER mysql_svr OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
--Testcase 151:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE mysql_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (mysql_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c3
                 Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1`
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1`
(14 rows)

--Testcase 152:
ALTER SERVER mysql_svr OPTIONS (ADD extensions 'mysql_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
--Testcase 153:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.ctid, ((t1.*)::ft1), t1.tableoid
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC FOR UPDATE
(18 rows)

--Testcase 154:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 155:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                                                                   QUERY PLAN                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` FOR UPDATE
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.ctid, ((t1.*)::ft1), t1.tableoid
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC FOR UPDATE
(18 rows)

--Testcase 156:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
--Testcase 157:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.ctid, ((t1.*)::ft1), t1.tableoid
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC FOR SHARE
(18 rows)

--Testcase 158:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 159:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` FOR SHARE
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.ctid, ((t1.*)::ft1), t1.tableoid
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC FOR SHARE
(18 rows)

--Testcase 160:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
--Testcase 161:
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Nested Loop
           Output: t1.c1, t1.c3, t2.c1
           Join Filter: (t1.c1 = t2.c1)
           ->  Gather
                 Output: t1.c1, t1.c3
                 Workers Planned: 1
                 ->  Parallel Append
                       ->  Foreign Scan on public.ft1_a t1_1
                             Output: t1_1.c1, t1_1.c3
                               Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1`
           ->  Foreign Scan on public.ft2_a t2
                 Output: t2.c1
                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(21 rows)

--Testcase 162:
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
--Testcase 748:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.*, t2.c1
                       Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
               ->  Hash
                     Output: t1.ctid, ((t1.*)::ft1), t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.ctid, t1.*, t1.c1, t1.c3
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(16 rows)

-- SEMI JOIN, not pushed down
--Testcase 163:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Join
         Output: t1.c1
         Inner Unique: true
         Merge Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1
                 Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  HashAggregate
                     Output: t2.c1
                     Group Key: t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(18 rows)

--Testcase 164:
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
--Testcase 165:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2
                             Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1`
(16 rows)

--Testcase 166:
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
--Testcase 167:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Gather
                     Output: t1.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft1_a t1_1
                                 Output: t1_1.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(17 rows)

--Testcase 168:
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
--Testcase 169:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft5_a t1
                     Output: t1.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4` ORDER BY `c1` IS NULL ASC, `c1` ASC
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft6_a t2
                           Output: t2.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4` ORDER BY `c1` IS NULL ASC, `c1` ASC
(16 rows)

--Testcase 170:
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
--Testcase 171:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c1
               Join Filter: (t1.c8 = t2.c8)
               ->  Gather
                     Output: t1.c1, t1.c8
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft1_a t1_1
                                 Output: t1_1.c1, t1_1.c8
                                   Remote query: SELECT `C 1`, `c8` FROM `mysql_fdw_post`.`T 1`
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1, t2.c8
                       Remote query: SELECT `C 1`, `c8` FROM `mysql_fdw_post`.`T 1`
(18 rows)

--Testcase 172:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
--Testcase 173:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3
                           Filter: (t1.c8 = 'foo'::user_enum)
                             Remote query: SELECT `C 1`, `c3`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(17 rows)

--Testcase 174:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--Testcase 175:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: ((t2.c1 = t1.c1) AND (t2.c8 = t1.c8))
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1, t2.c8
                       Remote query: SELECT `C 1`, `c8` FROM `mysql_fdw_post`.`T 1`
               ->  Hash
                     Output: t1.c1, t1.c3, t1.c8
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.c8
                             Remote query: SELECT `C 1`, `c3`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(16 rows)

--Testcase 176:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--Testcase 177:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  GroupAggregate
         Output: t1.c1, avg((t1.c1 + t2.c1))
         Group Key: t1.c1
         ->  Unique
               Output: t1.c1, t2.c1
               ->  Sort
                     Output: t1.c1, t2.c1
                     Sort Key: t1.c1, t2.c1
                     ->  Append
                           ->  Nested Loop
                                 Output: t1.c1, t2.c1
                                 Join Filter: (t1.c1 = t2.c1)
                                 ->  Gather
                                       Output: t1.c1
                                       Workers Planned: 1
                                       ->  Parallel Append
                                             ->  Foreign Scan on public.ft1_a t1_1
                                                   Output: t1_1.c1
                                                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                                 ->  Foreign Scan on public.ft2_a t2
                                       Output: t2.c1
                                         Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                           ->  Nested Loop
                                 Output: t1_2.c1, t2_1.c1
                                 Join Filter: (t1_2.c1 = t2_1.c1)
                                 ->  Gather
                                       Output: t1_2.c1
                                       Workers Planned: 1
                                       ->  Parallel Append
                                             ->  Foreign Scan on public.ft1_a t1_3
                                                   Output: t1_3.c1
                                                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                                 ->  Foreign Scan on public.ft2_a t2_1
                                       Output: t2_1.c1
                                         Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(37 rows)

--Testcase 178:
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--Testcase 179:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Nested Loop
         Output: t1."C 1"
         ->  Foreign Scan on "S 1"."T 1" t1
               Output: t1."C 1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
         ->  Unique
               Output: t2.c1, t3.c1
               ->  Sort
                     Output: t2.c1, t3.c1
                     Sort Key: t2.c1
                     ->  Hash Join
                           Output: t2.c1, t3.c1
                           Hash Cond: (t2.c1 = t3.c1)
                           ->  Foreign Scan on public.ft1_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` = ?)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC
                           ->  Hash
                                 Output: t3.c1
                                 ->  Foreign Scan on public.ft2_a t3
                                       Output: t3.c1
                                         Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(23 rows)

--Testcase 180:
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
 C 1 
-----
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
(10 rows)

-- join with pseudoconstant quals, not pushed down.
--Testcase 1036:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1 AND CURRENT_USER = SESSION_USER) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Result
               Output: t1.c1, t2.c1, t1.c3
               One-Time Filter: (CURRENT_USER = SESSION_USER)
               ->  Hash Join
                     Output: t1.c1, t1.c3, t2.c1
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                     ->  Hash
                           Output: t1.c1, t1.c3
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3
                                   Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1` ORDER BY `c3` IS NULL ASC, `c3` ASC, `C 1` IS NULL ASC, `C 1` ASC
(19 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
--Testcase 181:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1
           Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` >= 10)) AND ((`C 1` <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1_a ft1
               Output: 13
                 Remote query: SELECT NULL FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 13))
(11 rows)

--Testcase 182:
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--Testcase 183:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Join Filter: (ft4.c1 = ft1.c1)
   ->  Foreign Scan on public.ft4_a ft4
         Output: ft4.c1
           Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 10)) AND ((`c1` <= 15))
   ->  Materialize
         Output: ft1.c1, ft2.c1, (13)
         ->  Nested Loop
               Output: ft1.c1, ft2.c1, 13
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c1
                       Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 12))
               ->  Materialize
                     Output: ft2.c1
                     ->  Foreign Scan on public.ft2_a ft2
                           Output: ft2.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 12))
(18 rows)

--Testcase 184:
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 10 |    |    |   
 12 | 13 | 12 | 12
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
--Testcase 185:
UPDATE ft5_a_child SET c3 = null where c1 % 9 = 0;
--Testcase 186:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((ft5.*)::ft5), ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ((ft5.*)::ft5), ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5_a ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                 Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 4` ORDER BY `c1` IS NULL ASC, `c1` ASC
         ->  Hash
               Output: ft4.c1, ft4.c2
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1, ft4.c2
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 10)) AND ((`c1` <= 30)) ORDER BY `c1` IS NULL ASC, `c1` ASC
(14 rows)

--Testcase 187:
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
          ft5           | c1 | c2 |   c3   | c1 | c2 
------------------------+----+----+--------+----+----
 (12,13,AAA012,/node1/) | 12 | 13 | AAA012 | 12 | 13
 (18,19,,/node1/)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024,/node1/) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030,/node1/) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
--Testcase 188:
CREATE TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
--Testcase 189:
INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
-- ANALYZE local_tbl;
--Testcase 190:
SET enable_nestloop TO false;
--Testcase 191:
SET enable_hashjoin TO false;
--Testcase 192:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 ORDER BY ft1.c1 FOR UPDATE;
                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.ctid, ft2.ctid, ft4.ctid, ft5.ctid, local_tbl.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
   ->  Merge Join
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.ctid, ft2.ctid, ft4.ctid, ft5.ctid, local_tbl.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Merge Cond: (ft1.c1 = ft2.c1)
         ->  Sort
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
               Sort Key: ft1.c1
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                     Merge Cond: (ft1.c2 = ft5.c1)
                     ->  Merge Join
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                           Merge Cond: (ft1.c2 = ft4.c1)
                           ->  Merge Join
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                                 Merge Cond: (local_tbl.c1 = ft1.c2)
                                 ->  Index Scan using local_tbl_pkey on public.local_tbl
                                       Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
                                 ->  Sort
                                       Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
                                       Sort Key: ft1.c2
                                       ->  Foreign Scan on public.ft1_a ft1
                                             Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ft1.*, ft1.tableoid
                                               Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC FOR UPDATE
                           ->  Sort
                                 Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid
                                 Sort Key: ft4.c1
                                 ->  Foreign Scan on public.ft4_a ft4
                                       Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ft4.*, ft4.tableoid
                                         Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3` FOR UPDATE
                     ->  Sort
                           Output: ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                           Sort Key: ft5.c1
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ft5.*, ft5.tableoid
                                   Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 4` FOR UPDATE
         ->  Materialize
               Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid
               ->  Foreign Scan on public.ft2_a ft2
                     Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ft2.*, ft2.tableoid
                       Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC FOR UPDATE
(42 rows)

--Testcase 193:
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 ORDER BY ft1.c1 FOR UPDATE;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |  c3  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------+----+----+-------+------------------------------+--------------------------+----+------------+-----+---------+----+----+--------+---------+----+----+--------+---------+----+----+------
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
(10 rows)

--Testcase 194:
RESET enable_nestloop;
--Testcase 195:
RESET enable_hashjoin;
-- test that add_paths_with_pathkeys_for_rel() arranges for the epq_path to
-- return columns needed by the parent ForeignScan node
--Testcase 912:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.*, COALESCE(ft1.c3 || ft2.c3, 'foobar') FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100)) ss ON (local_tbl.c1 = ss.c1) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)), local_tbl.ctid, ft1.ctid, ft2.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid
   ->  Nested Loop Left Join
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)), local_tbl.ctid, ft1.ctid, ft2.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid
         Join Filter: (local_tbl.c1 = ft1.c1)
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
         ->  Materialize
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid, (COALESCE((ft1.c3 || ft2.c3), 'foobar'::text))
               ->  Hash Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid, COALESCE((ft1.c3 || ft2.c3), 'foobar'::text)
                     Hash Cond: (ft1.c1 = ft2.c1)
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ft1.*, ft1.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100))
                     ->  Hash
                           Output: ft2.ctid, ft2.c1, ft2.c3, ((ft2.*)::ft2), ft2.tableoid
                           ->  Foreign Scan on public.ft2_a ft2
                                 Output: ft2.ctid, ft2.c1, ft2.c3, ft2.*, ft2.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(20 rows)

ALTER SERVER mysql_svr OPTIONS (DROP extensions);
-- ALTER SERVER loopback OPTIONS (ADD fdw_startup_cost '10000.0');
--Testcase 913:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.* FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100 AND (ft1.c1 - mysql_fdw_abs(ft2.c2)) = 0)) ss ON (local_tbl.c3 = ss.c3) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, local_tbl.ctid, ft1.ctid, ft2.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid
   ->  Nested Loop Left Join
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, local_tbl.ctid, ft1.ctid, ft2.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid
         Join Filter: (local_tbl.c3 = ft1.c3)
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
         ->  Materialize
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid
               ->  Hash Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid
                     Hash Cond: (ft1.c1 = ft2.c1)
                     Join Filter: ((ft1.c1 - mysql_fdw_abs(ft2.c2)) = 0)
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ft1.*, ft1.tableoid
                             Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100))
                     ->  Hash
                           Output: ft2.ctid, ft2.c1, ft2.c2, ((ft2.*)::ft2), ft2.tableoid
                           ->  Foreign Scan on public.ft2_a ft2
                                 Output: ft2.ctid, ft2.c1, ft2.c2, ft2.*, ft2.tableoid
                                   Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(21 rows)

-- ALTER SERVER loopback OPTIONS (DROP fdw_startup_cost);
ALTER SERVER mysql_svr OPTIONS (ADD extensions 'mysql_fdw');
--Testcase 196:
DROP TABLE local_tbl;
-- check join pushdown in situations where multiple userids are involved
--Testcase 197:
CREATE ROLE regress_view_owner SUPERUSER;
--Testcase 198:
CREATE USER MAPPING FOR regress_view_owner SERVER mysql_svr;
CREATE USER MAPPING FOR regress_view_owner SERVER spdsrv;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
--Testcase 199:
CREATE VIEW v4 AS SELECT * FROM ft4;
--Testcase 200:
CREATE VIEW v5 AS SELECT * FROM ft5;
--Testcase 201:
ALTER VIEW v5 OWNER TO regress_view_owner;
--Testcase 202:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Join Filter: (ft4.c1 = ft5.c1)
               ->  Gather
                     Output: ft4.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a ft4_1
                                 Output: ft4_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c2, ft5.c1
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 203:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 204:
ALTER VIEW v4 OWNER TO regress_view_owner;
--Testcase 205:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Join Filter: (ft4.c1 = ft5.c1)
               ->  Gather
                     Output: ft4.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a ft4_1
                                 Output: ft4_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c2, ft5.c1
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 206:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 207:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Nested Loop Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Join Filter: (ft4.c1 = t2.c1)
               ->  Gather
                     Output: ft4.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a ft4_1
                                 Output: ft4_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 208:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 209:
ALTER VIEW v4 OWNER TO CURRENT_USER;
--Testcase 210:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Nested Loop Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Join Filter: (ft4.c1 = t2.c1)
               ->  Gather
                     Output: ft4.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft4_a ft4_1
                                 Output: ft4_1.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
               ->  Foreign Scan on public.ft5_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `c1`, `c2` FROM `mysql_fdw_post`.`T 4`
(18 rows)

--Testcase 211:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 212:
ALTER VIEW v4 OWNER TO regress_view_owner;
-- ====================================================================
-- Check that userid to use when querying the remote table is correctly
-- propagated into foreign rels present in subqueries under an UNION ALL
-- ====================================================================
--Testcase 1037:
CREATE ROLE regress_view_owner_another;
--Testcase 1038:
ALTER VIEW v4 OWNER TO regress_view_owner_another;
--Testcase 1039:
GRANT SELECT ON ft4 TO regress_view_owner_another;
--Testcase 1040:
ALTER FOREIGN TABLE ft4_a_child OPTIONS (ADD use_remote_estimate 'true');
-- The following should query the remote backing table of ft4 as user
-- regress_view_owner_another, the view owner, though it fails as expected
-- due to the lack of a user mapping for that user.
--Testcase 1041:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM v4;
ERROR:  user mapping not found for "regress_view_owner_another"
-- Likewise, but with the query under an UNION ALL
--Testcase 1042:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM (SELECT * FROM v4 UNION ALL SELECT * FROM v4);
ERROR:  user mapping not found for "regress_view_owner_another"
-- Should not get that error once a user mapping is created
--Testcase 1043:
CREATE USER MAPPING FOR regress_view_owner_another SERVER mysql_svr;
--Testcase 1044:
CREATE USER MAPPING FOR regress_view_owner_another SERVER spdsrv;
--Testcase 1045:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM v4;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft4_a ft4
   Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl
     Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3`
(3 rows)

--Testcase 1046:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM (SELECT * FROM v4 UNION ALL SELECT * FROM v4);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Append
   ->  Foreign Scan on public.ft4_a ft4
         Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl
           Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3`
   ->  Foreign Scan on public.ft4_a ft4_1
         Output: ft4_1.c1, ft4_1.c2, ft4_1.c3, ft4_1.spdurl
           Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3`
(7 rows)

--Testcase 1047:
DROP USER MAPPING FOR regress_view_owner_another SERVER mysql_svr;
--Testcase 1048:
DROP USER MAPPING FOR regress_view_owner_another SERVER spdsrv;
--Testcase 1049:
DROP OWNED BY regress_view_owner_another;
--Testcase 1050:
DROP ROLE regress_view_owner_another;
--Testcase 1051:
ALTER FOREIGN TABLE ft4_a_child OPTIONS (SET use_remote_estimate 'false');
-- cleanup
--Testcase 213:
DROP OWNED BY regress_view_owner;
--Testcase 214:
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--Testcase 215:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer), ft1.c2
   ->  Sort
         Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ft1.c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  GroupAggregate
               Output: count(ft1.c6), sum(ft1.c1), avg(ft1.c1), min(ft1.c2), max(ft1.c1), stddev(ft1.c2), ft1.c2
               Group Key: ft1.c2
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c2, ft1.c6, ft1.c1
                       Remote query: SELECT `C 1`, `c2`, `c6` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 5)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(11 rows)

--Testcase 216:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

--Testcase 217:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), (((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer)), ft1.c2
   ->  Result
         Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer), ft1.c2
         ->  Sort
               Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ft1.c2
               Sort Key: (count(ft1.c6)), (sum(ft1.c1))
               ->  GroupAggregate
                     Output: count(ft1.c6), sum(ft1.c1), avg(ft1.c1), min(ft1.c2), max(ft1.c1), stddev(ft1.c2), ft1.c2
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c2, ft1.c6, ft1.c1
                             Remote query: SELECT `C 1`, `c2`, `c6` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 5)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(13 rows)

--Testcase 218:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
--Testcase 219:
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Aggregate
   Output: sum((ft1.c1 * ((random() <= '1'::double precision))::integer)), avg(ft1.c1)
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c1
           Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(5 rows)

-- Aggregate over join query
--Testcase 220:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` = 6))
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1_a t2
                     Output: t2.c1, t2.c2
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` = 6))
(12 rows)

--Testcase 221:
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
--Testcase 222:
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         Join Filter: ((t1.c1 = t2.c1) AND (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision))
         ->  Gather
               Output: t1.c1
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft1_a t1_1
                           Output: t1_1.c1
                             Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
         ->  Foreign Scan on public.ft2_a t2
               Output: t2.c1
                 Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(15 rows)

-- GROUP BY clause having expressions
--Testcase 223:
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((ft1.c2 / 2)), ((sum(ft1.c2) * ((ft1.c2 / 2))))
   Sort Key: ((ft1.c2 / 2))
   ->  Finalize HashAggregate
         Output: ((ft1.c2 / 2)), (sum(ft1.c2) * ((ft1.c2 / 2)))
         Group Key: ((ft1.c2 / 2))
         ->  Foreign Scan
               Output: ((ft1.c2 / 2)), (PARTIAL sum(ft1.c2)), ft1.c2
                 Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                 Remote query: SELECT (`c2` DIV 2), sum(`c2`), `c2` FROM `mysql_fdw_post`.`T 1` GROUP BY 1, 3 ORDER BY (`c2` DIV 2) IS NULL ASC, (`c2` DIV 2) ASC
(10 rows)

--Testcase 224:
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
set enable_incremental_sort = off;
--Testcase 225:
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  Finalize HashAggregate
               Output: ft1.c2, sum(ft1.c1), (sqrt((ft1.c1)::double precision))
               Group Key: ft1.c2, (sqrt((ft1.c1)::double precision))
               ->  Foreign Scan
                     Output: ft1.c2, (sqrt((ft1.c1)::double precision)), (PARTIAL sum(ft1.c1))
                       Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                       Remote query: SELECT `c2`, sqrt(`C 1`), sum(`C 1`) FROM `mysql_fdw_post`.`T 1` GROUP BY 1, 2 ORDER BY `c2` IS NULL ASC, `c2` ASC, sqrt(`C 1`) IS NULL ASC, sqrt(`C 1`) ASC
(12 rows)

--Testcase 226:
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

reset enable_incremental_sort;
-- Aggregate is still pushed down by taking unshippable expression out
--Testcase 227:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2)), ft1.c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  Finalize HashAggregate
         Output: (ft1.c2 * ((random() <= '1'::double precision))::integer), (sum(ft1.c1) * ft1.c2), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan
               Output: ft1.c2, (PARTIAL sum(ft1.c1))
                 Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                 Remote query: SELECT `c2`, sum(`C 1`) FROM `mysql_fdw_post`.`T 1` GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(10 rows)

--Testcase 228:
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2  
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
--Testcase 229:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Group
   Output: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   Group Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  Sort
         Output: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
         Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
         ->  Partial HashAggregate
               Output: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
               Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
               ->  Foreign Scan on public.ft2_a ft2
                     Output: (ft2.c2 * ((random() <= '1'::double precision))::integer)
                       Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1`
(12 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--Testcase 230:
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(ft1.c2)), ft1.c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  Finalize HashAggregate
         Output: count(ft1.c2), ft1.c2, 5, 7.0, 9
         Group Key: ft1.c2
         ->  Foreign Scan
               Output: ft1.c2, (PARTIAL count(ft1.c2))
                 Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                 Remote query: SELECT `c2`, count(`c2`) FROM `mysql_fdw_post`.`T 1` GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(10 rows)

--Testcase 231:
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--Testcase 232:
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, ft1.c2, (sum(ft1.c1))
   Sort Key: (sum(ft1.c1))
   ->  Finalize HashAggregate
         Output: ft1.c2, ft1.c2, sum(ft1.c1)
         Group Key: ft1.c2
         ->  Foreign Scan
               Output: ft1.c2, (PARTIAL sum(ft1.c1))
                 Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                 Remote query: SELECT `c2`, sum(`C 1`) FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` > 6)) GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(10 rows)

--Testcase 233:
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2 
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--Testcase 234:
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft2.c2, sum(ft2.c1)
   Group Key: ft2.c2
   Filter: ((avg(ft2.c1) < '500'::numeric) AND (sum(ft2.c1) < 49800))
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c2, ft2.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(7 rows)

--Testcase 235:
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
--Testcase 236:
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  GroupAggregate
         Output: ft1.c5, NULL::bigint, (sqrt((ft1.c2)::double precision))
         Group Key: ft1.c5, sqrt((ft1.c2)::double precision)
         Filter: ((avg(ft1.c1) < '500'::numeric) AND ((((avg(ft1.c1) / avg(ft1.c1)))::double precision * random()) <= '1'::double precision))
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c5, sqrt((ft1.c2)::double precision), ft1.c1
                 Remote query: SELECT `C 1`, `c2`, `c5` FROM `mysql_fdw_post`.`T 1` ORDER BY `c5` IS NULL ASC, `c5` ASC, sqrt(`c2`) IS NULL ASC, sqrt(`c2`) ASC
(9 rows)

--Testcase 237:
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
--Testcase 238:
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1)), ft1.c2
   Sort Key: (sum(ft1.c1))
   ->  GroupAggregate
         Output: sum(ft1.c1), ft1.c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(10 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
--Testcase 239:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Finalize Aggregate
   Output: $0, sum(ft1.c1)
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan
         Output: (PARTIAL sum(ft1.c1))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT sum(`C 1`) FROM `mysql_fdw_post`.`T 1`
(8 rows)

--Testcase 240:
select exists(select 1 from pg_enum), sum(c1) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

--Testcase 241:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Finalize GroupAggregate
   Output: $0, sum(ft1.c1)
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan
         Output: (PARTIAL sum(ft1.c1))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT sum(`C 1`) FROM `mysql_fdw_post`.`T 1`
(8 rows)

--Testcase 242:
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--Testcase 243:
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(ft1.c1 ORDER BY ft1.c1)), ft1.c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  GroupAggregate
         Output: array_agg(ft1.c1 ORDER BY ft1.c1), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) ORDER BY `c2` IS NULL ASC, `c2` ASC, `C 1` IS NULL ASC, `C 1` ASC
(9 rows)

--Testcase 244:
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--Testcase 245:
explain (verbose, costs off)
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: array_agg(ft2.c5 ORDER BY ft2.c1 DESC)
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c5, ft2.c1
           Remote query: SELECT `C 1`, `c5` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 50)) AND ((`c2` = 6)) ORDER BY `C 1` IS NULL DESC, `C 1` DESC
(5 rows)

--Testcase 246:
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--Testcase 247:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % 5)))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % 5))))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % 5))), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1, ((t1.c1 % 5))
               Sort Key: ((t2.c1 % 3)), ((t1.c1 % 5))
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1, (t1.c1 % 5)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(21 rows)

--Testcase 248:
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--Testcase 249:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5)))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5))))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5))), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1, ((t1.c1 % 5))
               Sort Key: ((t2.c1 % 3)), ((t1.c1 % 5))
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1, (t1.c1 % 5)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(21 rows)

--Testcase 250:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--Testcase 251:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5)) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5)) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % 5)) ORDER BY ((t1.c1 % 5)) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1, ((t1.c1 % 5))
               Sort Key: ((t2.c1 % 3)), ((t1.c1 % 5)) DESC NULLS LAST
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1, (t1.c1 % 5)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(21 rows)

--Testcase 252:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--Testcase 253:
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5)))), ft1.c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))))
   ->  GroupAggregate
         Output: sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(9 rows)

--Testcase 254:
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--Testcase 255:
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(((ft1.c1 % 3))), sum(DISTINCT ((ft1.c1 % 3)) ORDER BY ((ft1.c1 % 3))) FILTER (WHERE (((ft1.c1 % 3)) < 2)), ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c1, ft1.c2, (ft1.c1 % 3)
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` = 6)) ORDER BY (`C 1` % 3) IS NULL ASC, (`C 1` % 3) ASC
(5 rows)

--Testcase 256:
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--Testcase 257:
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE (((`c2` % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1_a t1
                       Output: count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                         Remote query: SELECT NULL FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 6))
(14 rows)

--Testcase 258:
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
--Testcase 259:
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Gather
               Output: (SubPlan 1)
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft2_a t2_1
                           Output: t2_1.c2, t2_1.c1
                             Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE (((`c2` % 6) = 0))
               SubPlan 1
                 ->  Aggregate
                       Output: count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       ->  Foreign Scan on public.ft1_a t1
                             Output: t1.c1
                               Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 6))
(18 rows)

--Testcase 260:
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
--Testcase 261:
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision))), ft1.c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  GroupAggregate
         Output: sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(9 rows)

--Testcase 262:
explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2
           Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1`
   SubPlan 1
     ->  Foreign Scan on public.ft1_a ft1_1
           Output: ft1_1.c2
             Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 5))
(9 rows)

-- Ordered-sets within aggregate
--Testcase 263:
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, rank('10'::character varying) WITHIN GROUP (ORDER BY ft1.c6), percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision))
   Group Key: ft1.c2
   Filter: (percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision)) < '500'::double precision)
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c6, ft1.c1
           Remote query: SELECT `C 1`, `c2`, `c6` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 10)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(7 rows)

--Testcase 264:
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--Testcase 265:
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c1, rank(ft1.c1, ft1.c2) WITHIN GROUP (ORDER BY ft1.c1, ft1.c2), ft1.c2
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 6)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

--Testcase 266:
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
--Testcase 267:
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
--Testcase 268:
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
--Testcase 269:
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
--Testcase 270:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

-- Add function and aggregate into extension
--Testcase 271:
alter extension mysql_fdw add function least_accum(anyelement, variadic anyarray);
--Testcase 272:
alter extension mysql_fdw add aggregate least_agg(variadic items anyarray);
--Testcase 273:
alter server mysql_svr options (set extensions 'mysql_fdw');
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--Testcase 274:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 100)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

--Testcase 275:
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg 
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
--Testcase 276:
alter extension mysql_fdw drop function least_accum(anyelement, variadic anyarray);
--Testcase 277:
alter extension mysql_fdw drop aggregate least_agg(variadic items anyarray);
--Testcase 278:
alter server mysql_svr options (set extensions 'mysql_fdw');
-- Not pushed down as we have dropped objects from extension.
--Testcase 279:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

-- Cleanup
--Testcase 280:
reset enable_hashagg;
--Testcase 281:
drop aggregate least_agg(variadic items anyarray);
--Testcase 282:
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
--Testcase 283:
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
--Testcase 284:
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
--Testcase 285:
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
--Testcase 286:
create operator family my_op_family using btree;
--Testcase 287:
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
--Testcase 288:
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
--Testcase 289:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   ->  Sort
         Output: ft2.c1, ft2.c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2_a ft2
               Output: ft2.c1, ft2.c2
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) AND ((`c2` = 6))
(8 rows)

-- This should not be pushed either.
--Testcase 879:
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl
   Sort Key: ft2.c1 USING <^
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(6 rows)

-- Update local stats on ft2
-- ANALYZE ft2;
-- Add into extension
--Testcase 290:
alter extension mysql_fdw add operator class my_op_class using btree;
--Testcase 291:
alter extension mysql_fdw add function my_op_cmp(a int, b int);
--Testcase 292:
alter extension mysql_fdw add operator family my_op_family using btree;
--Testcase 293:
alter extension mysql_fdw add operator public.<^(int, int);
--Testcase 294:
alter extension mysql_fdw add operator public.=^(int, int);
--Testcase 295:
alter extension mysql_fdw add operator public.>^(int, int);
--Testcase 296:
alter server mysql_svr options (set extensions 'mysql_fdw');
-- Now this will be pushed as sort operator is part of the extension.
-- alter server loopback options (add fdw_tuple_cost '0.5');
--Testcase 297:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   ->  Sort
         Output: ft2.c1, ft2.c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2_a ft2
               Output: ft2.c1, ft2.c2
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) AND ((`c2` = 6))
(8 rows)

--Testcase 298:
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- alter server loopback options (drop fdw_tuple_cost);
-- This should be pushed too.
-- MYSQL not support user defined operator.
--Testcase 880:
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl
   Sort Key: ft2.c1 USING <^
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(6 rows)

-- Remove from extension
--Testcase 299:
alter extension mysql_fdw drop operator class my_op_class using btree;
--Testcase 300:
alter extension mysql_fdw drop function my_op_cmp(a int, b int);
--Testcase 301:
alter extension mysql_fdw drop operator family my_op_family using btree;
--Testcase 302:
alter extension mysql_fdw drop operator public.<^(int, int);
--Testcase 303:
alter extension mysql_fdw drop operator public.=^(int, int);
--Testcase 304:
alter extension mysql_fdw drop operator public.>^(int, int);
--Testcase 305:
alter server mysql_svr options (set extensions 'mysql_fdw');
-- This will not be pushed as sort operator is now removed from the extension.
--Testcase 306:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   ->  Sort
         Output: ft2.c1, ft2.c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2_a ft2
               Output: ft2.c1, ft2.c2
                 Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 100)) AND ((`c2` = 6))
(8 rows)

-- Cleanup
--Testcase 307:
drop operator class my_op_class using btree;
--Testcase 308:
drop function my_op_cmp(a int, b int);
--Testcase 309:
drop operator family my_op_family using btree;
--Testcase 310:
drop operator public.>^(int, int);
--Testcase 311:
drop operator public.=^(int, int);
--Testcase 312:
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
--Testcase 313:
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Gather
               Output: t1.c3, t1.c1
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft2_a t1_1
                           Output: t1_1.c3, t1_1.c1
                             Remote query: SELECT `C 1`, `c3` FROM `mysql_fdw_post`.`T 1`
         ->  Foreign Scan on public.ft2_a t2
               Output: t2.c2
                 Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1`
(15 rows)

-- Subquery in FROM clause having aggregate
--Testcase 314:
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(ft1_1.c1))
   Sort Key: (count(*)), (sum(ft1_1.c1))
   ->  GroupAggregate
         Output: count(*), (sum(ft1_1.c1))
         Group Key: (sum(ft1_1.c1))
         ->  Sort
               Output: (sum(ft1_1.c1))
               Sort Key: (sum(ft1_1.c1))
               ->  Nested Loop
                     Output: (sum(ft1_1.c1))
                     Join Filter: (ft1.c2 = ft1_1.c2)
                     ->  Finalize HashAggregate
                           Output: ft1_1.c2, sum(ft1_1.c1)
                           Group Key: ft1_1.c2
                           ->  Foreign Scan
                                 Output: ft1_1.c2, (PARTIAL sum(ft1_1.c1))
                                   Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                                   Remote query: SELECT `c2`, sum(`C 1`) FROM `mysql_fdw_post`.`T 1` GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c2
                             Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1`
(22 rows)

--Testcase 315:
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--Testcase 316:
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  GroupAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < 10)) OR (sum(t2.c1) IS NULL))
         ->  Sort
               Output: t2.c1, t1.c1
               Sort Key: t2.c1
               ->  Hash Full Join
                     Output: t2.c1, t1.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4`
(21 rows)

--Testcase 317:
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--Testcase 318:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c1
                       Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 4` WHERE ((`c1` >= 50)) AND ((`c1` <= 60))
(13 rows)

--Testcase 319:
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--Testcase 320:
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: ((sum(ft1.c2) * ((random() <= '1'::double precision))::integer))
   Sort Key: ((sum(ft1.c2) * ((random() <= '1'::double precision))::integer))
   ->  Finalize Aggregate
         Output: (sum(ft1.c2) * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan
               Output: (PARTIAL sum(ft1.c2))
                 Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                 Remote query: SELECT sum(`c2`) FROM `mysql_fdw_post`.`T 1`
(9 rows)

--Testcase 321:
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
-- Disable remote estimation temporary because sum() was not pushed down if enabled.
--Testcase 749:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (set use_remote_estimate 'false');
--Testcase 322:
set enable_hashagg to false;
--Testcase 323:
explain (verbose, costs off)
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1.c2, qry.sum
   ->  Foreign Scan on "S 1"."T 1" t1
         Output: t1."C 1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 3)) AND ((`C 1` < 100)) ORDER BY `c2` IS NULL ASC, `c2` ASC
   ->  Subquery Scan on qry
         Output: qry.sum, t2.c1
         Filter: ((t1.c2 * 2) = qry.sum)
         ->  Finalize GroupAggregate
               Output: sum((t2.c1 + t1."C 1")), t2.c1
               Group Key: t2.c1
               ->  Sort
                     Output: t2.c1, (PARTIAL sum((t2.c1 + t1."C 1")))
                     Sort Key: t2.c1
                     ->  Foreign Scan
                           Output: t2.c1, (PARTIAL sum((t2.c1 + t1."C 1")))
                             Relations: Aggregate on (mysql_fdw_post.ft2_a_child)
                             Remote query: SELECT `C 1`, sum((`C 1` + ?)) FROM `mysql_fdw_post`.`T 1` GROUP BY 1 ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(18 rows)

--Testcase 324:
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

--Testcase 325:
reset enable_hashagg;
--Testcase 750:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (set use_remote_estimate 'true');
-- bug #15613: bad plan for foreign table scan with lateral reference
--Testcase 326:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: ref_0.c2, ref_0."C 1", (ref_0.c2), ref_1.c3, ref_0."C 1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C 1", ref_1.c3, (ref_0.c2)
         ->  Foreign Scan on "S 1"."T 1" ref_0
               Output: ref_0."C 1", ref_0.c2, ref_0.c3, ref_0.c4, ref_0.c5, ref_0.c6, ref_0.c7, ref_0.c8
               Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 10)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC
         ->  Foreign Scan on public.ft1_a ref_1
               Output: ref_1.c3, ref_0.c2
                 Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`c3` = '00001'))
   ->  Materialize
         Output: ref_3.c3
         ->  Foreign Scan on public.ft2_a ref_3
               Output: ref_3.c3
                 Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`c3` = '00001'))
(15 rows)

--Testcase 327:
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
 c2 | c1 | c2 |  c3   
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--Testcase 328:
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote query: SELECT `c1` FROM `mysql_fdw_post`.`T 3`
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::bigint
                           ->  Nested Loop Left Join
                                 Output: ft1.c1
                                 Join Filter: (ft1.c1 = ft2.c1)
                                 ->  Gather
                                       Output: ft2.c1
                                       Workers Planned: 1
                                       ->  Parallel Append
                                             ->  Foreign Scan on public.ft2_a ft2_1
                                                   Output: ft2_1.c1
                                                     Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
                                 ->  Foreign Scan on public.ft1_a ft1
                                       Output: ft1.c1
                                         Remote query: SELECT `C 1` FROM `mysql_fdw_post`.`T 1`
(28 rows)

--Testcase 329:
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
--Testcase 330:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, sum(ft1.c1)
   Group Key: ft1.c2
   Group Key: ()
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 3)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(7 rows)

--Testcase 331:
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 332:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, sum(ft1.c1)
   Group Key: ft1.c2
   Group Key: ()
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 3)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(7 rows)

--Testcase 333:
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 334:
explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, ft1.c6, (sum(ft1.c1))
   Sort Key: ft1.c2, ft1.c6
   ->  MixedAggregate
         Output: ft1.c2, ft1.c6, sum(ft1.c1)
         Hash Key: ft1.c6
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c6, ft1.c1
                 Remote query: SELECT `C 1`, `c2`, `c6` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 3)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(10 rows)

--Testcase 335:
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

--Testcase 336:
explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, sum(ft1.c1), GROUPING(ft1.c2)
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 3)) ORDER BY `c2` IS NULL ASC, `c2` ASC
(6 rows)

--Testcase 337:
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
-- Disable remote estimation temporary because sum() was not pushed down if enabled.
--Testcase 751:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (set use_remote_estimate 'false');
--Testcase 338:
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((sum(ft2.c1) / 1000)), ft2.c2
   ->  Sort
         Output: ((sum(ft2.c1) / 1000)), ft2.c2
         Sort Key: ((sum(ft2.c1) / 1000))
         ->  Finalize HashAggregate
               Output: (sum(ft2.c1) / 1000), ft2.c2
               Group Key: ft2.c2
               ->  Foreign Scan
                     Output: ft2.c2, (PARTIAL sum(ft2.c1))
                       Relations: Aggregate on (mysql_fdw_post.ft2_a_child)
                       Remote query: SELECT `c2`, sum(`C 1`) FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 6)) GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(12 rows)

--Testcase 339:
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
 s  
----
 49
 50
(2 rows)

-- WindowAgg
--Testcase 340:
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c2, (sum(ft2.c2)), (count(ft2.c2) OVER (?)), ((ft2.c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: ft2.c2, (sum(ft2.c2)), count(ft2.c2) OVER (?), ((ft2.c2 % 2))
         ->  Sort
               Output: ft2.c2, ((ft2.c2 % 2)), (sum(ft2.c2))
               Sort Key: ((ft2.c2 % 2))
               ->  Finalize HashAggregate
                     Output: ft2.c2, (ft2.c2 % 2), sum(ft2.c2)
                     Group Key: ft2.c2
                     ->  Foreign Scan
                           Output: ft2.c2, (PARTIAL sum(ft2.c2))
                             Relations: Aggregate on (mysql_fdw_post.ft2_a_child)
                             Remote query: SELECT `c2`, sum(`c2`) FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 10)) GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(15 rows)

--Testcase 341:
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count 
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--Testcase 342:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (array_agg(ft1.c2) OVER (?)), ((ft1.c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: ft1.c2, array_agg(ft1.c2) OVER (?), ((ft1.c2 % 2))
         ->  Sort
               Output: ft1.c2, ((ft1.c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  Finalize HashAggregate
                     Output: ft1.c2, (ft1.c2 % 2)
                     Group Key: ft1.c2
                     ->  Foreign Scan
                           Output: ft1.c2
                             Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                             Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 10)) GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(15 rows)

--Testcase 343:
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 344:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (array_agg(ft1.c2) OVER (?)), ((ft1.c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: ft1.c2, array_agg(ft1.c2) OVER (?), ((ft1.c2 % 2))
         ->  Sort
               Output: ft1.c2, ((ft1.c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  Finalize HashAggregate
                     Output: ft1.c2, (ft1.c2 % 2)
                     Group Key: ft1.c2
                     ->  Foreign Scan
                           Output: ft1.c2
                             Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
                             Remote query: SELECT `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`c2` < 10)) GROUP BY 1 ORDER BY `c2` IS NULL ASC, `c2` ASC
(15 rows)

--Testcase 345:
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 752:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (set use_remote_estimate 'true');
-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
--Testcase 346:
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
--Testcase 347:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
           Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
   ->  Materialize
         Output: t2.c3
         ->  Foreign Scan on public.ft2_a t2
               Output: t2.c3
                 Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 2))
(10 rows)

--Testcase 348:
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

--Testcase 349:
EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
--Testcase 350:
SET datestyle TO "ISO, YMD";
--Testcase 351:
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
--Testcase 352:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Sort Key: t1.c1
   ->  Nested Loop
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Join Filter: (t1.c3 = t2.c3)
         ->  HashAggregate
               Output: t2.c3
               Group Key: t2.c3
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c3
                       Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` > 10)) AND ((date(`c4`) = '1970-01-17'))
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 20)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(15 rows)

--Testcase 353:
EXECUTE st2(10, 20);
 c1 | c2 |  c3   |           c4           |         c5          | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------+---------------------+----+------------+-----+---------
 16 |  6 | 00016 | 1970-01-17 00:00:00-08 | 1970-01-17 00:00:00 | 6  | 6          | foo | /node1/
(1 row)

--Testcase 354:
EXECUTE st2(101, 121);
 c1  | c2 |  c3   |           c4           |         c5          | c6 |     c7     | c8  | spdurl  
-----+----+-------+------------------------+---------------------+----+------------+-----+---------
 116 |  6 | 00116 | 1970-01-17 00:00:00-08 | 1970-01-17 00:00:00 | 6  | 6          | foo | /node1/
(1 row)

-- subquery using immutable function (can be sent to remote)
--Testcase 355:
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
--Testcase 356:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Sort Key: t1.c1
   ->  Nested Loop
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Join Filter: (t1.c3 = t2.c3)
         ->  HashAggregate
               Output: t2.c3
               Group Key: t2.c3
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c3
                       Remote query: SELECT `c3` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` > 10)) AND ((date(`c5`) = '1970-01-17'))
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` < 20)) ORDER BY `C 1` IS NULL ASC, `C 1` ASC
(15 rows)

--Testcase 357:
EXECUTE st3(10, 20);
 c1 | c2 |  c3   |           c4           |         c5          | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------+---------------------+----+------------+-----+---------
 16 |  6 | 00016 | 1970-01-17 00:00:00-08 | 1970-01-17 00:00:00 | 6  | 6          | foo | /node1/
(1 row)

--Testcase 358:
EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

--Testcase 359:
SET datestyle TO "Postgres, MDY";
-- custom plan should be chosen initially
--Testcase 360:
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
--Testcase 361:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

--Testcase 362:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

--Testcase 363:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

--Testcase 364:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

--Testcase 365:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
--Testcase 366:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = ?))
(3 rows)

-- value of $1 should not be sent to remote
--Testcase 367:
PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
--Testcase 368:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(4 rows)

--Testcase 369:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(4 rows)

--Testcase 370:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(4 rows)

--Testcase 371:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(4 rows)

--Testcase 372:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = 'foo'::user_enum)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1))
(4 rows)

--Testcase 373:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c8 = $1)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = ?))
(4 rows)

--Testcase 374:
EXECUTE st5('foo', 1);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- altering FDW options requires replanning
--Testcase 375:
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
--Testcase 376:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = `c2`))
(3 rows)

--Testcase 377:
PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
--Testcase 378:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum, NULL::text
(3 rows)

-- ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
-- ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
--Testcase 379:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = `c2`))
(3 rows)

--Testcase 380:
EXECUTE st6;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
(9 rows)

--Testcase 381:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum, NULL::text
(3 rows)

-- ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
-- ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 1');
--Testcase 382:
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
--Testcase 383:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 384:
ALTER SERVER mysql_svr OPTIONS (DROP extensions);
--Testcase 385:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 386:
EXECUTE st8;
 count 
-------
     9
(1 row)

--Testcase 387:
ALTER SERVER mysql_svr OPTIONS (ADD extensions 'mysql_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
--Testcase 753:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Filter: (t1.tableoid = '1259'::oid)
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(6 rows)

--Testcase 754:
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1_a'::regclass LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 755:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: ((t1.tableoid)::regclass), t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: (t1.tableoid)::regclass, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(5 rows)

--Testcase 756:
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----------+----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 ft1_a    |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 757:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.ctid = '(0,2)'::tid)
     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(4 rows)

--Testcase 758:
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

--Testcase 759:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.ctid, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1`
(5 rows)

--Testcase 760:
SELECT ctid, * FROM ft1 t1 LIMIT 1;
      ctid      | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----------------+----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
 (4294967295,0) |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
--Testcase 388:
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
--Testcase 389:
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
--Testcase 390:
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

--Testcase 391:
DROP FUNCTION f_test(int);
-- This test does not suitable with PGSpider Extension.
-- -- ===================================================================
-- REINDEX
-- ===================================================================
-- -- remote table is not created here
-- CREATE FOREIGN TABLE reindex_foreign (c1 int, c2 int)
--   SERVER mysql_svr2 OPTIONS (table_name 'reindex_local');
-- REINDEX TABLE reindex_foreign; -- error
-- REINDEX TABLE CONCURRENTLY reindex_foreign; -- error
-- DROP FOREIGN TABLE reindex_foreign;
-- -- partitions and foreign tables
-- CREATE TABLE reind_fdw_parent (c1 int) PARTITION BY RANGE (c1);
-- CREATE TABLE reind_fdw_0_10 PARTITION OF reind_fdw_parent
--   FOR VALUES FROM (0) TO (10);
-- CREATE FOREIGN TABLE reind_fdw_10_20 PARTITION OF reind_fdw_parent
--   FOR VALUES FROM (10) TO (20)
--   SERVER mysql_svr OPTIONS (table_name 'reind_local_10_20');
-- REINDEX TABLE reind_fdw_parent; -- ok
-- REINDEX TABLE CONCURRENTLY reind_fdw_parent; -- ok
-- DROP TABLE reind_fdw_parent;
-- ===================================================================
-- conversion error
-- ===================================================================
--Testcase 392:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c8 TYPE int;
--Testcase 393:
SELECT * FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8) WHERE x1 = 1;  -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 394:
SELECT ftx.x1, ft2.c2, ftx.x8 FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 395:
SELECT ftx.x1, ft2.c2, ftx FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
--Testcase 396:
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  invalid input syntax for type integer: "foo"
-- ANALYZE ft1; -- ERROR
--Testcase 397:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- local type can be different from remote type in some cases,
-- in particular if similarly-named operators do equivalent things
-- ===================================================================
--Testcase 892:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c8 TYPE text;
ALTER TABLE ft1 ALTER COLUMN c8 TYPE text;
--Testcase 881:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`c8` = 'foo'))
(5 rows)

--Testcase 882:
SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 883:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
           Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE (('foo' = `c8`))
(5 rows)

--Testcase 884:
SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- we declared c8 to be text locally, but it's still the same type on
-- the remote which will balk if we try to do anything incompatible
-- with that remote type
-- Can not create user define type in MySQL Server.
-- Type c8 of table ft1 and remote table T1 are 
-- match. These case below not error with mysql_fdw. 
--Testcase 890:
SELECT * FROM ft1 WHERE c8 LIKE 'foo' LIMIT 1; -- ERROR
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 891:
SELECT * FROM ft1 WHERE c8::text LIKE 'foo' LIMIT 1; -- ERROR; cast not pushed down
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
--Testcase 398:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR" at character 1
ROLLBACK TO s;
--Testcase 399:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
(1 row)

SAVEPOINT s;
--Testcase 400:
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ERROR:  division by zero
ROLLBACK TO s;
--Testcase 401:
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
(1 row)

--Testcase 402:
SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+------------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
--Testcase 920:
create foreign table ft3_a_child (f1 text collate "C", f2 text, f3 varchar(10))
  server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct8', use_remote_estimate 'true');
--Testcase 921:
create table ft3 (f1 text collate "C", f2 text, f3 varchar(10), spdurl text) PARTITION BY LIST (spdurl);
--Testcase 922:
create foreign table ft3_a PARTITION OF ft3 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- can be sent to remote
--Testcase 923:
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f1` = 'foo'))
(3 rows)

--Testcase 924:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f1` = 'foo'))
(3 rows)

--Testcase 925:
explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f2` = 'foo'))
(3 rows)

--Testcase 926:
explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f3` = 'foo'))
(3 rows)

--Testcase 927:
explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, f.spdurl, l.f1, l.f2, l.f3, l.spdurl
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3_a f
         Output: f.f1, f.f2, f.f3, f.spdurl
           Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
   ->  Materialize
         Output: l.f1, l.f2, l.f3, l.spdurl
         ->  Foreign Scan on public.ft3_a l
               Output: l.f1, l.f2, l.f3, l.spdurl
                 Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f1` = 'foo'))
(11 rows)

-- can't be sent to remote
--Testcase 928:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: ((ft3.f1)::text = 'foo'::text)
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
(4 rows)

--Testcase 929:
explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
(4 rows)

--Testcase 930:
explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: ((ft3.f2)::text = 'foo'::text)
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
(4 rows)

--Testcase 931:
explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
(4 rows)

--Testcase 932:
explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, f.spdurl, l.f1, l.f2, l.f3, l.spdurl
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3_a f
         Output: f.f1, f.f2, f.f3, f.spdurl
           Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8`
   ->  Materialize
         Output: l.f1, l.f2, l.f3, l.spdurl
         ->  Foreign Scan on public.ft3_a l
               Output: l.f1, l.f2, l.f3, l.spdurl
                 Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct8` WHERE ((`f1` = 'foo'))
(11 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
--Testcase 403:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_a_child (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`T 1`(`C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
   Batch Size: 1
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::integer, "*SELECT*"."?column?_2", NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
         ->  Limit
               Output: ((ft2.c1 + 1000)), ((ft2.c2 + 100)), ((ft2.c3 || ft2.c3))
               ->  Foreign Scan on public.ft2_a ft2
                     Output: (ft2.c1 + 1000), (ft2.c2 + 100), (ft2.c3 || ft2.c3)
                       Remote query: SELECT `C 1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 1`
(10 rows)

--Testcase 404:
INSERT INTO ft2_a_child (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
--Testcase 405:
INSERT INTO ft2_a_child (c1,c2,c3)
   VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc');
-- MySQL does not support RETURNING, so we use SELECT with condition to check data after INSERT/UPDATE/DELETE.
--Testcase 406:
SELECT * FROM ft2 WHERE c1 IN (1101, 1102, 1103);
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  
------+-----+-----+----+----+----+------------+----+---------
 1101 | 201 | aaa |    |    |    | ft2        |    | /node1/
 1102 | 202 | bbb |    |    |    | ft2        |    | /node1/
 1103 | 203 | ccc |    |    |    | ft2        |    | /node1/
(3 rows)

--Testcase 407:
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
--Testcase 408:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   ->  Foreign Update on public.ft2_a_child
         remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c2` = (`c2` + 300), `c3` = CONCAT(`c3` , '_update3') WHERE (((`C 1` % 10) = 3))
(3 rows)

--Testcase 409:
UPDATE ft2_a_child SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
--Testcase 410:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7;  -- can be pushed down
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   ->  Foreign Update on public.ft2_a_child
         remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c2` = (`c2` + 400), `c3` = CONCAT(`c3` , '_update7') WHERE (((`C 1` % 10) = 7))
(3 rows)

--Testcase 411:
UPDATE ft2_a_child SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7;
-- MySQL does not support RETURNING, so we use SELECT with condition to check data after INSERT/UPDATE/DELETE.
--Testcase 412:
SELECT * FROM ft2 WHERE c1 % 10 = 7;
  c1  | c2  |         c3         |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
------+-----+--------------------+------------------------------+--------------------------+----+------------+-----+---------
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 1007 | 507 | 0000700007_update7 |                              |                          |    | ft2        |     | /node1/
 1017 | 507 | 0001700017_update7 |                              |                          |    | ft2        |     | /node1/
(102 rows)

--Testcase 413:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = ft2_a_child.c2 + 500, c3 = ft2_a_child.c3 || '_update9', c7 = DEFAULT
   FROM ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c2` = ?, `c3` = ?, `c7` = ? WHERE `C 1` = ?
   ->  Hash Join
         Output: (ft2_a_child.c2 + 500), (ft2_a_child.c3 || '_update9'::text), 'ft2       '::character(10), ft2_a_child.c1, ft2_a_child.*, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
         Hash Cond: (ft1.c1 = ft2_a_child.c2)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.ctid, ft1.c1, ft1.*, ft1.tableoid
                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE (((`C 1` % 10) = 9))
         ->  Hash
               Output: ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c1, ft2_a_child.*
               ->  Foreign Scan on public.ft2_a_child
                     Output: ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c1, ft2_a_child.*
                     Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC FOR UPDATE
(13 rows)

--Testcase 414:
 UPDATE ft2_a_child SET c2 = ft2_a_child.c2 + 500, c3 = ft2_a_child.c3 || '_update9', c7 = DEFAULT
   FROM ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 9;
--Testcase 415:
EXPLAIN (verbose, costs off)
   DELETE FROM ft2_a_child WHERE c1 % 10 = 5;                               -- can be pushed down
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   ->  Foreign Delete on public.ft2_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`T 1` WHERE (((`C 1` % 10) = 5))
(3 rows)

--Testcase 416:
DELETE FROM ft2_a_child WHERE c1 % 10 = 5;
-- MySQL does not support RETURNING, so we use SELECT with condition to check data after INSERT/UPDATE/DELETE.
--Testcase 417:
SELECT c1, c4 FROM ft2 WHERE c1 % 10 = 5; -- empty result
 c1 | c4 
----+----
(0 rows)

--Testcase 418:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child USING ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote query: DELETE FROM `mysql_fdw_post`.`T 1` WHERE `C 1` = ?
   ->  Hash Join
         Output: ft2_a_child.c1, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
         Hash Cond: (ft1.c1 = ft2_a_child.c2)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.ctid, ft1.c1, ft1.*, ft1.tableoid
                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE (((`C 1` % 10) = 2))
         ->  Hash
               Output: ft2_a_child.c1, ft2_a_child.c2
               ->  Foreign Scan on public.ft2_a_child
                     Output: ft2_a_child.c1, ft2_a_child.c2
                     Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` ORDER BY `c2` IS NULL ASC, `c2` ASC FOR UPDATE
(13 rows)

--Testcase 419:
DELETE FROM ft2_a_child USING ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 2;
--Testcase 420:
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |         c3         |              c4              
------+-----+--------------------+------------------------------
    1 |   1 | 00001              | Fri Jan 02 00:00:00 1970 PST
    3 | 303 | 00003_update3      | Sun Jan 04 00:00:00 1970 PST
    4 |   4 | 00004              | Mon Jan 05 00:00:00 1970 PST
    6 |   6 | 00006              | Wed Jan 07 00:00:00 1970 PST
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST
    8 |   8 | 00008              | Fri Jan 09 00:00:00 1970 PST
    9 | 509 | 00009_update9      | Sat Jan 10 00:00:00 1970 PST
   10 |   0 | 00010              | Sun Jan 11 00:00:00 1970 PST
   11 |   1 | 00011              | Mon Jan 12 00:00:00 1970 PST
   13 | 303 | 00013_update3      | Wed Jan 14 00:00:00 1970 PST
   14 |   4 | 00014              | Thu Jan 15 00:00:00 1970 PST
   16 |   6 | 00016              | Sat Jan 17 00:00:00 1970 PST
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST
   18 |   8 | 00018              | Mon Jan 19 00:00:00 1970 PST
   19 | 509 | 00019_update9      | Tue Jan 20 00:00:00 1970 PST
   20 |   0 | 00020              | Wed Jan 21 00:00:00 1970 PST
   21 |   1 | 00021              | Thu Jan 22 00:00:00 1970 PST
   23 | 303 | 00023_update3      | Sat Jan 24 00:00:00 1970 PST
   24 |   4 | 00024              | Sun Jan 25 00:00:00 1970 PST
   26 |   6 | 00026              | Tue Jan 27 00:00:00 1970 PST
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST
   28 |   8 | 00028              | Thu Jan 29 00:00:00 1970 PST
   29 | 509 | 00029_update9      | Fri Jan 30 00:00:00 1970 PST
   30 |   0 | 00030              | Sat Jan 31 00:00:00 1970 PST
   31 |   1 | 00031              | Sun Feb 01 00:00:00 1970 PST
   33 | 303 | 00033_update3      | Tue Feb 03 00:00:00 1970 PST
   34 |   4 | 00034              | Wed Feb 04 00:00:00 1970 PST
   36 |   6 | 00036              | Fri Feb 06 00:00:00 1970 PST
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST
   38 |   8 | 00038              | Sun Feb 08 00:00:00 1970 PST
   39 | 509 | 00039_update9      | Mon Feb 09 00:00:00 1970 PST
   40 |   0 | 00040              | Tue Feb 10 00:00:00 1970 PST
   41 |   1 | 00041              | Wed Feb 11 00:00:00 1970 PST
   43 | 303 | 00043_update3      | Fri Feb 13 00:00:00 1970 PST
   44 |   4 | 00044              | Sat Feb 14 00:00:00 1970 PST
   46 |   6 | 00046              | Mon Feb 16 00:00:00 1970 PST
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST
   48 |   8 | 00048              | Wed Feb 18 00:00:00 1970 PST
   49 | 509 | 00049_update9      | Thu Feb 19 00:00:00 1970 PST
   50 |   0 | 00050              | Fri Feb 20 00:00:00 1970 PST
   51 |   1 | 00051              | Sat Feb 21 00:00:00 1970 PST
   53 | 303 | 00053_update3      | Mon Feb 23 00:00:00 1970 PST
   54 |   4 | 00054              | Tue Feb 24 00:00:00 1970 PST
   56 |   6 | 00056              | Thu Feb 26 00:00:00 1970 PST
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST
   58 |   8 | 00058              | Sat Feb 28 00:00:00 1970 PST
   59 | 509 | 00059_update9      | Sun Mar 01 00:00:00 1970 PST
   60 |   0 | 00060              | Mon Mar 02 00:00:00 1970 PST
   61 |   1 | 00061              | Tue Mar 03 00:00:00 1970 PST
   63 | 303 | 00063_update3      | Thu Mar 05 00:00:00 1970 PST
   64 |   4 | 00064              | Fri Mar 06 00:00:00 1970 PST
   66 |   6 | 00066              | Sun Mar 08 00:00:00 1970 PST
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST
   68 |   8 | 00068              | Tue Mar 10 00:00:00 1970 PST
   69 | 509 | 00069_update9      | Wed Mar 11 00:00:00 1970 PST
   70 |   0 | 00070              | Thu Mar 12 00:00:00 1970 PST
   71 |   1 | 00071              | Fri Mar 13 00:00:00 1970 PST
   73 | 303 | 00073_update3      | Sun Mar 15 00:00:00 1970 PST
   74 |   4 | 00074              | Mon Mar 16 00:00:00 1970 PST
   76 |   6 | 00076              | Wed Mar 18 00:00:00 1970 PST
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST
   78 |   8 | 00078              | Fri Mar 20 00:00:00 1970 PST
   79 | 509 | 00079_update9      | Sat Mar 21 00:00:00 1970 PST
   80 |   0 | 00080              | Sun Mar 22 00:00:00 1970 PST
   81 |   1 | 00081              | Mon Mar 23 00:00:00 1970 PST
   83 | 303 | 00083_update3      | Wed Mar 25 00:00:00 1970 PST
   84 |   4 | 00084              | Thu Mar 26 00:00:00 1970 PST
   86 |   6 | 00086              | Sat Mar 28 00:00:00 1970 PST
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST
   88 |   8 | 00088              | Mon Mar 30 00:00:00 1970 PST
   89 | 509 | 00089_update9      | Tue Mar 31 00:00:00 1970 PST
   90 |   0 | 00090              | Wed Apr 01 00:00:00 1970 PST
   91 |   1 | 00091              | Thu Apr 02 00:00:00 1970 PST
   93 | 303 | 00093_update3      | Sat Apr 04 00:00:00 1970 PST
   94 |   4 | 00094              | Sun Apr 05 00:00:00 1970 PST
   96 |   6 | 00096              | Tue Apr 07 00:00:00 1970 PST
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST
   98 |   8 | 00098              | Thu Apr 09 00:00:00 1970 PST
   99 | 509 | 00099_update9      | Fri Apr 10 00:00:00 1970 PST
  100 |   0 | 00100              | Thu Jan 01 00:00:00 1970 PST
  101 |   1 | 00101              | Fri Jan 02 00:00:00 1970 PST
  103 | 303 | 00103_update3      | Sun Jan 04 00:00:00 1970 PST
  104 |   4 | 00104              | Mon Jan 05 00:00:00 1970 PST
  106 |   6 | 00106              | Wed Jan 07 00:00:00 1970 PST
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST
  108 |   8 | 00108              | Fri Jan 09 00:00:00 1970 PST
  109 | 509 | 00109_update9      | Sat Jan 10 00:00:00 1970 PST
  110 |   0 | 00110              | Sun Jan 11 00:00:00 1970 PST
  111 |   1 | 00111              | Mon Jan 12 00:00:00 1970 PST
  113 | 303 | 00113_update3      | Wed Jan 14 00:00:00 1970 PST
  114 |   4 | 00114              | Thu Jan 15 00:00:00 1970 PST
  116 |   6 | 00116              | Sat Jan 17 00:00:00 1970 PST
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST
  118 |   8 | 00118              | Mon Jan 19 00:00:00 1970 PST
  119 | 509 | 00119_update9      | Tue Jan 20 00:00:00 1970 PST
  120 |   0 | 00120              | Wed Jan 21 00:00:00 1970 PST
  121 |   1 | 00121              | Thu Jan 22 00:00:00 1970 PST
  123 | 303 | 00123_update3      | Sat Jan 24 00:00:00 1970 PST
  124 |   4 | 00124              | Sun Jan 25 00:00:00 1970 PST
  126 |   6 | 00126              | Tue Jan 27 00:00:00 1970 PST
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST
  128 |   8 | 00128              | Thu Jan 29 00:00:00 1970 PST
  129 | 509 | 00129_update9      | Fri Jan 30 00:00:00 1970 PST
  130 |   0 | 00130              | Sat Jan 31 00:00:00 1970 PST
  131 |   1 | 00131              | Sun Feb 01 00:00:00 1970 PST
  133 | 303 | 00133_update3      | Tue Feb 03 00:00:00 1970 PST
  134 |   4 | 00134              | Wed Feb 04 00:00:00 1970 PST
  136 |   6 | 00136              | Fri Feb 06 00:00:00 1970 PST
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST
  138 |   8 | 00138              | Sun Feb 08 00:00:00 1970 PST
  139 | 509 | 00139_update9      | Mon Feb 09 00:00:00 1970 PST
  140 |   0 | 00140              | Tue Feb 10 00:00:00 1970 PST
  141 |   1 | 00141              | Wed Feb 11 00:00:00 1970 PST
  143 | 303 | 00143_update3      | Fri Feb 13 00:00:00 1970 PST
  144 |   4 | 00144              | Sat Feb 14 00:00:00 1970 PST
  146 |   6 | 00146              | Mon Feb 16 00:00:00 1970 PST
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST
  148 |   8 | 00148              | Wed Feb 18 00:00:00 1970 PST
  149 | 509 | 00149_update9      | Thu Feb 19 00:00:00 1970 PST
  150 |   0 | 00150              | Fri Feb 20 00:00:00 1970 PST
  151 |   1 | 00151              | Sat Feb 21 00:00:00 1970 PST
  153 | 303 | 00153_update3      | Mon Feb 23 00:00:00 1970 PST
  154 |   4 | 00154              | Tue Feb 24 00:00:00 1970 PST
  156 |   6 | 00156              | Thu Feb 26 00:00:00 1970 PST
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST
  158 |   8 | 00158              | Sat Feb 28 00:00:00 1970 PST
  159 | 509 | 00159_update9      | Sun Mar 01 00:00:00 1970 PST
  160 |   0 | 00160              | Mon Mar 02 00:00:00 1970 PST
  161 |   1 | 00161              | Tue Mar 03 00:00:00 1970 PST
  163 | 303 | 00163_update3      | Thu Mar 05 00:00:00 1970 PST
  164 |   4 | 00164              | Fri Mar 06 00:00:00 1970 PST
  166 |   6 | 00166              | Sun Mar 08 00:00:00 1970 PST
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST
  168 |   8 | 00168              | Tue Mar 10 00:00:00 1970 PST
  169 | 509 | 00169_update9      | Wed Mar 11 00:00:00 1970 PST
  170 |   0 | 00170              | Thu Mar 12 00:00:00 1970 PST
  171 |   1 | 00171              | Fri Mar 13 00:00:00 1970 PST
  173 | 303 | 00173_update3      | Sun Mar 15 00:00:00 1970 PST
  174 |   4 | 00174              | Mon Mar 16 00:00:00 1970 PST
  176 |   6 | 00176              | Wed Mar 18 00:00:00 1970 PST
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST
  178 |   8 | 00178              | Fri Mar 20 00:00:00 1970 PST
  179 | 509 | 00179_update9      | Sat Mar 21 00:00:00 1970 PST
  180 |   0 | 00180              | Sun Mar 22 00:00:00 1970 PST
  181 |   1 | 00181              | Mon Mar 23 00:00:00 1970 PST
  183 | 303 | 00183_update3      | Wed Mar 25 00:00:00 1970 PST
  184 |   4 | 00184              | Thu Mar 26 00:00:00 1970 PST
  186 |   6 | 00186              | Sat Mar 28 00:00:00 1970 PST
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST
  188 |   8 | 00188              | Mon Mar 30 00:00:00 1970 PST
  189 | 509 | 00189_update9      | Tue Mar 31 00:00:00 1970 PST
  190 |   0 | 00190              | Wed Apr 01 00:00:00 1970 PST
  191 |   1 | 00191              | Thu Apr 02 00:00:00 1970 PST
  193 | 303 | 00193_update3      | Sat Apr 04 00:00:00 1970 PST
  194 |   4 | 00194              | Sun Apr 05 00:00:00 1970 PST
  196 |   6 | 00196              | Tue Apr 07 00:00:00 1970 PST
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST
  198 |   8 | 00198              | Thu Apr 09 00:00:00 1970 PST
  199 | 509 | 00199_update9      | Fri Apr 10 00:00:00 1970 PST
  200 |   0 | 00200              | Thu Jan 01 00:00:00 1970 PST
  201 |   1 | 00201              | Fri Jan 02 00:00:00 1970 PST
  203 | 303 | 00203_update3      | Sun Jan 04 00:00:00 1970 PST
  204 |   4 | 00204              | Mon Jan 05 00:00:00 1970 PST
  206 |   6 | 00206              | Wed Jan 07 00:00:00 1970 PST
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST
  208 |   8 | 00208              | Fri Jan 09 00:00:00 1970 PST
  209 | 509 | 00209_update9      | Sat Jan 10 00:00:00 1970 PST
  210 |   0 | 00210              | Sun Jan 11 00:00:00 1970 PST
  211 |   1 | 00211              | Mon Jan 12 00:00:00 1970 PST
  213 | 303 | 00213_update3      | Wed Jan 14 00:00:00 1970 PST
  214 |   4 | 00214              | Thu Jan 15 00:00:00 1970 PST
  216 |   6 | 00216              | Sat Jan 17 00:00:00 1970 PST
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST
  218 |   8 | 00218              | Mon Jan 19 00:00:00 1970 PST
  219 | 509 | 00219_update9      | Tue Jan 20 00:00:00 1970 PST
  220 |   0 | 00220              | Wed Jan 21 00:00:00 1970 PST
  221 |   1 | 00221              | Thu Jan 22 00:00:00 1970 PST
  223 | 303 | 00223_update3      | Sat Jan 24 00:00:00 1970 PST
  224 |   4 | 00224              | Sun Jan 25 00:00:00 1970 PST
  226 |   6 | 00226              | Tue Jan 27 00:00:00 1970 PST
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST
  228 |   8 | 00228              | Thu Jan 29 00:00:00 1970 PST
  229 | 509 | 00229_update9      | Fri Jan 30 00:00:00 1970 PST
  230 |   0 | 00230              | Sat Jan 31 00:00:00 1970 PST
  231 |   1 | 00231              | Sun Feb 01 00:00:00 1970 PST
  233 | 303 | 00233_update3      | Tue Feb 03 00:00:00 1970 PST
  234 |   4 | 00234              | Wed Feb 04 00:00:00 1970 PST
  236 |   6 | 00236              | Fri Feb 06 00:00:00 1970 PST
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST
  238 |   8 | 00238              | Sun Feb 08 00:00:00 1970 PST
  239 | 509 | 00239_update9      | Mon Feb 09 00:00:00 1970 PST
  240 |   0 | 00240              | Tue Feb 10 00:00:00 1970 PST
  241 |   1 | 00241              | Wed Feb 11 00:00:00 1970 PST
  243 | 303 | 00243_update3      | Fri Feb 13 00:00:00 1970 PST
  244 |   4 | 00244              | Sat Feb 14 00:00:00 1970 PST
  246 |   6 | 00246              | Mon Feb 16 00:00:00 1970 PST
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST
  248 |   8 | 00248              | Wed Feb 18 00:00:00 1970 PST
  249 | 509 | 00249_update9      | Thu Feb 19 00:00:00 1970 PST
  250 |   0 | 00250              | Fri Feb 20 00:00:00 1970 PST
  251 |   1 | 00251              | Sat Feb 21 00:00:00 1970 PST
  253 | 303 | 00253_update3      | Mon Feb 23 00:00:00 1970 PST
  254 |   4 | 00254              | Tue Feb 24 00:00:00 1970 PST
  256 |   6 | 00256              | Thu Feb 26 00:00:00 1970 PST
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST
  258 |   8 | 00258              | Sat Feb 28 00:00:00 1970 PST
  259 | 509 | 00259_update9      | Sun Mar 01 00:00:00 1970 PST
  260 |   0 | 00260              | Mon Mar 02 00:00:00 1970 PST
  261 |   1 | 00261              | Tue Mar 03 00:00:00 1970 PST
  263 | 303 | 00263_update3      | Thu Mar 05 00:00:00 1970 PST
  264 |   4 | 00264              | Fri Mar 06 00:00:00 1970 PST
  266 |   6 | 00266              | Sun Mar 08 00:00:00 1970 PST
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST
  268 |   8 | 00268              | Tue Mar 10 00:00:00 1970 PST
  269 | 509 | 00269_update9      | Wed Mar 11 00:00:00 1970 PST
  270 |   0 | 00270              | Thu Mar 12 00:00:00 1970 PST
  271 |   1 | 00271              | Fri Mar 13 00:00:00 1970 PST
  273 | 303 | 00273_update3      | Sun Mar 15 00:00:00 1970 PST
  274 |   4 | 00274              | Mon Mar 16 00:00:00 1970 PST
  276 |   6 | 00276              | Wed Mar 18 00:00:00 1970 PST
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST
  278 |   8 | 00278              | Fri Mar 20 00:00:00 1970 PST
  279 | 509 | 00279_update9      | Sat Mar 21 00:00:00 1970 PST
  280 |   0 | 00280              | Sun Mar 22 00:00:00 1970 PST
  281 |   1 | 00281              | Mon Mar 23 00:00:00 1970 PST
  283 | 303 | 00283_update3      | Wed Mar 25 00:00:00 1970 PST
  284 |   4 | 00284              | Thu Mar 26 00:00:00 1970 PST
  286 |   6 | 00286              | Sat Mar 28 00:00:00 1970 PST
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST
  288 |   8 | 00288              | Mon Mar 30 00:00:00 1970 PST
  289 | 509 | 00289_update9      | Tue Mar 31 00:00:00 1970 PST
  290 |   0 | 00290              | Wed Apr 01 00:00:00 1970 PST
  291 |   1 | 00291              | Thu Apr 02 00:00:00 1970 PST
  293 | 303 | 00293_update3      | Sat Apr 04 00:00:00 1970 PST
  294 |   4 | 00294              | Sun Apr 05 00:00:00 1970 PST
  296 |   6 | 00296              | Tue Apr 07 00:00:00 1970 PST
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST
  298 |   8 | 00298              | Thu Apr 09 00:00:00 1970 PST
  299 | 509 | 00299_update9      | Fri Apr 10 00:00:00 1970 PST
  300 |   0 | 00300              | Thu Jan 01 00:00:00 1970 PST
  301 |   1 | 00301              | Fri Jan 02 00:00:00 1970 PST
  303 | 303 | 00303_update3      | Sun Jan 04 00:00:00 1970 PST
  304 |   4 | 00304              | Mon Jan 05 00:00:00 1970 PST
  306 |   6 | 00306              | Wed Jan 07 00:00:00 1970 PST
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST
  308 |   8 | 00308              | Fri Jan 09 00:00:00 1970 PST
  309 | 509 | 00309_update9      | Sat Jan 10 00:00:00 1970 PST
  310 |   0 | 00310              | Sun Jan 11 00:00:00 1970 PST
  311 |   1 | 00311              | Mon Jan 12 00:00:00 1970 PST
  313 | 303 | 00313_update3      | Wed Jan 14 00:00:00 1970 PST
  314 |   4 | 00314              | Thu Jan 15 00:00:00 1970 PST
  316 |   6 | 00316              | Sat Jan 17 00:00:00 1970 PST
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST
  318 |   8 | 00318              | Mon Jan 19 00:00:00 1970 PST
  319 | 509 | 00319_update9      | Tue Jan 20 00:00:00 1970 PST
  320 |   0 | 00320              | Wed Jan 21 00:00:00 1970 PST
  321 |   1 | 00321              | Thu Jan 22 00:00:00 1970 PST
  323 | 303 | 00323_update3      | Sat Jan 24 00:00:00 1970 PST
  324 |   4 | 00324              | Sun Jan 25 00:00:00 1970 PST
  326 |   6 | 00326              | Tue Jan 27 00:00:00 1970 PST
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST
  328 |   8 | 00328              | Thu Jan 29 00:00:00 1970 PST
  329 | 509 | 00329_update9      | Fri Jan 30 00:00:00 1970 PST
  330 |   0 | 00330              | Sat Jan 31 00:00:00 1970 PST
  331 |   1 | 00331              | Sun Feb 01 00:00:00 1970 PST
  333 | 303 | 00333_update3      | Tue Feb 03 00:00:00 1970 PST
  334 |   4 | 00334              | Wed Feb 04 00:00:00 1970 PST
  336 |   6 | 00336              | Fri Feb 06 00:00:00 1970 PST
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST
  338 |   8 | 00338              | Sun Feb 08 00:00:00 1970 PST
  339 | 509 | 00339_update9      | Mon Feb 09 00:00:00 1970 PST
  340 |   0 | 00340              | Tue Feb 10 00:00:00 1970 PST
  341 |   1 | 00341              | Wed Feb 11 00:00:00 1970 PST
  343 | 303 | 00343_update3      | Fri Feb 13 00:00:00 1970 PST
  344 |   4 | 00344              | Sat Feb 14 00:00:00 1970 PST
  346 |   6 | 00346              | Mon Feb 16 00:00:00 1970 PST
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST
  348 |   8 | 00348              | Wed Feb 18 00:00:00 1970 PST
  349 | 509 | 00349_update9      | Thu Feb 19 00:00:00 1970 PST
  350 |   0 | 00350              | Fri Feb 20 00:00:00 1970 PST
  351 |   1 | 00351              | Sat Feb 21 00:00:00 1970 PST
  353 | 303 | 00353_update3      | Mon Feb 23 00:00:00 1970 PST
  354 |   4 | 00354              | Tue Feb 24 00:00:00 1970 PST
  356 |   6 | 00356              | Thu Feb 26 00:00:00 1970 PST
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST
  358 |   8 | 00358              | Sat Feb 28 00:00:00 1970 PST
  359 | 509 | 00359_update9      | Sun Mar 01 00:00:00 1970 PST
  360 |   0 | 00360              | Mon Mar 02 00:00:00 1970 PST
  361 |   1 | 00361              | Tue Mar 03 00:00:00 1970 PST
  363 | 303 | 00363_update3      | Thu Mar 05 00:00:00 1970 PST
  364 |   4 | 00364              | Fri Mar 06 00:00:00 1970 PST
  366 |   6 | 00366              | Sun Mar 08 00:00:00 1970 PST
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST
  368 |   8 | 00368              | Tue Mar 10 00:00:00 1970 PST
  369 | 509 | 00369_update9      | Wed Mar 11 00:00:00 1970 PST
  370 |   0 | 00370              | Thu Mar 12 00:00:00 1970 PST
  371 |   1 | 00371              | Fri Mar 13 00:00:00 1970 PST
  373 | 303 | 00373_update3      | Sun Mar 15 00:00:00 1970 PST
  374 |   4 | 00374              | Mon Mar 16 00:00:00 1970 PST
  376 |   6 | 00376              | Wed Mar 18 00:00:00 1970 PST
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST
  378 |   8 | 00378              | Fri Mar 20 00:00:00 1970 PST
  379 | 509 | 00379_update9      | Sat Mar 21 00:00:00 1970 PST
  380 |   0 | 00380              | Sun Mar 22 00:00:00 1970 PST
  381 |   1 | 00381              | Mon Mar 23 00:00:00 1970 PST
  383 | 303 | 00383_update3      | Wed Mar 25 00:00:00 1970 PST
  384 |   4 | 00384              | Thu Mar 26 00:00:00 1970 PST
  386 |   6 | 00386              | Sat Mar 28 00:00:00 1970 PST
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST
  388 |   8 | 00388              | Mon Mar 30 00:00:00 1970 PST
  389 | 509 | 00389_update9      | Tue Mar 31 00:00:00 1970 PST
  390 |   0 | 00390              | Wed Apr 01 00:00:00 1970 PST
  391 |   1 | 00391              | Thu Apr 02 00:00:00 1970 PST
  393 | 303 | 00393_update3      | Sat Apr 04 00:00:00 1970 PST
  394 |   4 | 00394              | Sun Apr 05 00:00:00 1970 PST
  396 |   6 | 00396              | Tue Apr 07 00:00:00 1970 PST
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST
  398 |   8 | 00398              | Thu Apr 09 00:00:00 1970 PST
  399 | 509 | 00399_update9      | Fri Apr 10 00:00:00 1970 PST
  400 |   0 | 00400              | Thu Jan 01 00:00:00 1970 PST
  401 |   1 | 00401              | Fri Jan 02 00:00:00 1970 PST
  403 | 303 | 00403_update3      | Sun Jan 04 00:00:00 1970 PST
  404 |   4 | 00404              | Mon Jan 05 00:00:00 1970 PST
  406 |   6 | 00406              | Wed Jan 07 00:00:00 1970 PST
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST
  408 |   8 | 00408              | Fri Jan 09 00:00:00 1970 PST
  409 | 509 | 00409_update9      | Sat Jan 10 00:00:00 1970 PST
  410 |   0 | 00410              | Sun Jan 11 00:00:00 1970 PST
  411 |   1 | 00411              | Mon Jan 12 00:00:00 1970 PST
  413 | 303 | 00413_update3      | Wed Jan 14 00:00:00 1970 PST
  414 |   4 | 00414              | Thu Jan 15 00:00:00 1970 PST
  416 |   6 | 00416              | Sat Jan 17 00:00:00 1970 PST
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST
  418 |   8 | 00418              | Mon Jan 19 00:00:00 1970 PST
  419 | 509 | 00419_update9      | Tue Jan 20 00:00:00 1970 PST
  420 |   0 | 00420              | Wed Jan 21 00:00:00 1970 PST
  421 |   1 | 00421              | Thu Jan 22 00:00:00 1970 PST
  423 | 303 | 00423_update3      | Sat Jan 24 00:00:00 1970 PST
  424 |   4 | 00424              | Sun Jan 25 00:00:00 1970 PST
  426 |   6 | 00426              | Tue Jan 27 00:00:00 1970 PST
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST
  428 |   8 | 00428              | Thu Jan 29 00:00:00 1970 PST
  429 | 509 | 00429_update9      | Fri Jan 30 00:00:00 1970 PST
  430 |   0 | 00430              | Sat Jan 31 00:00:00 1970 PST
  431 |   1 | 00431              | Sun Feb 01 00:00:00 1970 PST
  433 | 303 | 00433_update3      | Tue Feb 03 00:00:00 1970 PST
  434 |   4 | 00434              | Wed Feb 04 00:00:00 1970 PST
  436 |   6 | 00436              | Fri Feb 06 00:00:00 1970 PST
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST
  438 |   8 | 00438              | Sun Feb 08 00:00:00 1970 PST
  439 | 509 | 00439_update9      | Mon Feb 09 00:00:00 1970 PST
  440 |   0 | 00440              | Tue Feb 10 00:00:00 1970 PST
  441 |   1 | 00441              | Wed Feb 11 00:00:00 1970 PST
  443 | 303 | 00443_update3      | Fri Feb 13 00:00:00 1970 PST
  444 |   4 | 00444              | Sat Feb 14 00:00:00 1970 PST
  446 |   6 | 00446              | Mon Feb 16 00:00:00 1970 PST
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST
  448 |   8 | 00448              | Wed Feb 18 00:00:00 1970 PST
  449 | 509 | 00449_update9      | Thu Feb 19 00:00:00 1970 PST
  450 |   0 | 00450              | Fri Feb 20 00:00:00 1970 PST
  451 |   1 | 00451              | Sat Feb 21 00:00:00 1970 PST
  453 | 303 | 00453_update3      | Mon Feb 23 00:00:00 1970 PST
  454 |   4 | 00454              | Tue Feb 24 00:00:00 1970 PST
  456 |   6 | 00456              | Thu Feb 26 00:00:00 1970 PST
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST
  458 |   8 | 00458              | Sat Feb 28 00:00:00 1970 PST
  459 | 509 | 00459_update9      | Sun Mar 01 00:00:00 1970 PST
  460 |   0 | 00460              | Mon Mar 02 00:00:00 1970 PST
  461 |   1 | 00461              | Tue Mar 03 00:00:00 1970 PST
  463 | 303 | 00463_update3      | Thu Mar 05 00:00:00 1970 PST
  464 |   4 | 00464              | Fri Mar 06 00:00:00 1970 PST
  466 |   6 | 00466              | Sun Mar 08 00:00:00 1970 PST
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST
  468 |   8 | 00468              | Tue Mar 10 00:00:00 1970 PST
  469 | 509 | 00469_update9      | Wed Mar 11 00:00:00 1970 PST
  470 |   0 | 00470              | Thu Mar 12 00:00:00 1970 PST
  471 |   1 | 00471              | Fri Mar 13 00:00:00 1970 PST
  473 | 303 | 00473_update3      | Sun Mar 15 00:00:00 1970 PST
  474 |   4 | 00474              | Mon Mar 16 00:00:00 1970 PST
  476 |   6 | 00476              | Wed Mar 18 00:00:00 1970 PST
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST
  478 |   8 | 00478              | Fri Mar 20 00:00:00 1970 PST
  479 | 509 | 00479_update9      | Sat Mar 21 00:00:00 1970 PST
  480 |   0 | 00480              | Sun Mar 22 00:00:00 1970 PST
  481 |   1 | 00481              | Mon Mar 23 00:00:00 1970 PST
  483 | 303 | 00483_update3      | Wed Mar 25 00:00:00 1970 PST
  484 |   4 | 00484              | Thu Mar 26 00:00:00 1970 PST
  486 |   6 | 00486              | Sat Mar 28 00:00:00 1970 PST
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST
  488 |   8 | 00488              | Mon Mar 30 00:00:00 1970 PST
  489 | 509 | 00489_update9      | Tue Mar 31 00:00:00 1970 PST
  490 |   0 | 00490              | Wed Apr 01 00:00:00 1970 PST
  491 |   1 | 00491              | Thu Apr 02 00:00:00 1970 PST
  493 | 303 | 00493_update3      | Sat Apr 04 00:00:00 1970 PST
  494 |   4 | 00494              | Sun Apr 05 00:00:00 1970 PST
  496 |   6 | 00496              | Tue Apr 07 00:00:00 1970 PST
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST
  498 |   8 | 00498              | Thu Apr 09 00:00:00 1970 PST
  499 | 509 | 00499_update9      | Fri Apr 10 00:00:00 1970 PST
  500 |   0 | 00500              | Thu Jan 01 00:00:00 1970 PST
  501 |   1 | 00501              | Fri Jan 02 00:00:00 1970 PST
  503 | 303 | 00503_update3      | Sun Jan 04 00:00:00 1970 PST
  504 |   4 | 00504              | Mon Jan 05 00:00:00 1970 PST
  506 |   6 | 00506              | Wed Jan 07 00:00:00 1970 PST
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST
  508 |   8 | 00508              | Fri Jan 09 00:00:00 1970 PST
  509 | 509 | 00509_update9      | Sat Jan 10 00:00:00 1970 PST
  510 |   0 | 00510              | Sun Jan 11 00:00:00 1970 PST
  511 |   1 | 00511              | Mon Jan 12 00:00:00 1970 PST
  513 | 303 | 00513_update3      | Wed Jan 14 00:00:00 1970 PST
  514 |   4 | 00514              | Thu Jan 15 00:00:00 1970 PST
  516 |   6 | 00516              | Sat Jan 17 00:00:00 1970 PST
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST
  518 |   8 | 00518              | Mon Jan 19 00:00:00 1970 PST
  519 | 509 | 00519_update9      | Tue Jan 20 00:00:00 1970 PST
  520 |   0 | 00520              | Wed Jan 21 00:00:00 1970 PST
  521 |   1 | 00521              | Thu Jan 22 00:00:00 1970 PST
  523 | 303 | 00523_update3      | Sat Jan 24 00:00:00 1970 PST
  524 |   4 | 00524              | Sun Jan 25 00:00:00 1970 PST
  526 |   6 | 00526              | Tue Jan 27 00:00:00 1970 PST
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST
  528 |   8 | 00528              | Thu Jan 29 00:00:00 1970 PST
  529 | 509 | 00529_update9      | Fri Jan 30 00:00:00 1970 PST
  530 |   0 | 00530              | Sat Jan 31 00:00:00 1970 PST
  531 |   1 | 00531              | Sun Feb 01 00:00:00 1970 PST
  533 | 303 | 00533_update3      | Tue Feb 03 00:00:00 1970 PST
  534 |   4 | 00534              | Wed Feb 04 00:00:00 1970 PST
  536 |   6 | 00536              | Fri Feb 06 00:00:00 1970 PST
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST
  538 |   8 | 00538              | Sun Feb 08 00:00:00 1970 PST
  539 | 509 | 00539_update9      | Mon Feb 09 00:00:00 1970 PST
  540 |   0 | 00540              | Tue Feb 10 00:00:00 1970 PST
  541 |   1 | 00541              | Wed Feb 11 00:00:00 1970 PST
  543 | 303 | 00543_update3      | Fri Feb 13 00:00:00 1970 PST
  544 |   4 | 00544              | Sat Feb 14 00:00:00 1970 PST
  546 |   6 | 00546              | Mon Feb 16 00:00:00 1970 PST
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST
  548 |   8 | 00548              | Wed Feb 18 00:00:00 1970 PST
  549 | 509 | 00549_update9      | Thu Feb 19 00:00:00 1970 PST
  550 |   0 | 00550              | Fri Feb 20 00:00:00 1970 PST
  551 |   1 | 00551              | Sat Feb 21 00:00:00 1970 PST
  553 | 303 | 00553_update3      | Mon Feb 23 00:00:00 1970 PST
  554 |   4 | 00554              | Tue Feb 24 00:00:00 1970 PST
  556 |   6 | 00556              | Thu Feb 26 00:00:00 1970 PST
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST
  558 |   8 | 00558              | Sat Feb 28 00:00:00 1970 PST
  559 | 509 | 00559_update9      | Sun Mar 01 00:00:00 1970 PST
  560 |   0 | 00560              | Mon Mar 02 00:00:00 1970 PST
  561 |   1 | 00561              | Tue Mar 03 00:00:00 1970 PST
  563 | 303 | 00563_update3      | Thu Mar 05 00:00:00 1970 PST
  564 |   4 | 00564              | Fri Mar 06 00:00:00 1970 PST
  566 |   6 | 00566              | Sun Mar 08 00:00:00 1970 PST
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST
  568 |   8 | 00568              | Tue Mar 10 00:00:00 1970 PST
  569 | 509 | 00569_update9      | Wed Mar 11 00:00:00 1970 PST
  570 |   0 | 00570              | Thu Mar 12 00:00:00 1970 PST
  571 |   1 | 00571              | Fri Mar 13 00:00:00 1970 PST
  573 | 303 | 00573_update3      | Sun Mar 15 00:00:00 1970 PST
  574 |   4 | 00574              | Mon Mar 16 00:00:00 1970 PST
  576 |   6 | 00576              | Wed Mar 18 00:00:00 1970 PST
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST
  578 |   8 | 00578              | Fri Mar 20 00:00:00 1970 PST
  579 | 509 | 00579_update9      | Sat Mar 21 00:00:00 1970 PST
  580 |   0 | 00580              | Sun Mar 22 00:00:00 1970 PST
  581 |   1 | 00581              | Mon Mar 23 00:00:00 1970 PST
  583 | 303 | 00583_update3      | Wed Mar 25 00:00:00 1970 PST
  584 |   4 | 00584              | Thu Mar 26 00:00:00 1970 PST
  586 |   6 | 00586              | Sat Mar 28 00:00:00 1970 PST
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST
  588 |   8 | 00588              | Mon Mar 30 00:00:00 1970 PST
  589 | 509 | 00589_update9      | Tue Mar 31 00:00:00 1970 PST
  590 |   0 | 00590              | Wed Apr 01 00:00:00 1970 PST
  591 |   1 | 00591              | Thu Apr 02 00:00:00 1970 PST
  593 | 303 | 00593_update3      | Sat Apr 04 00:00:00 1970 PST
  594 |   4 | 00594              | Sun Apr 05 00:00:00 1970 PST
  596 |   6 | 00596              | Tue Apr 07 00:00:00 1970 PST
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST
  598 |   8 | 00598              | Thu Apr 09 00:00:00 1970 PST
  599 | 509 | 00599_update9      | Fri Apr 10 00:00:00 1970 PST
  600 |   0 | 00600              | Thu Jan 01 00:00:00 1970 PST
  601 |   1 | 00601              | Fri Jan 02 00:00:00 1970 PST
  603 | 303 | 00603_update3      | Sun Jan 04 00:00:00 1970 PST
  604 |   4 | 00604              | Mon Jan 05 00:00:00 1970 PST
  606 |   6 | 00606              | Wed Jan 07 00:00:00 1970 PST
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST
  608 |   8 | 00608              | Fri Jan 09 00:00:00 1970 PST
  609 | 509 | 00609_update9      | Sat Jan 10 00:00:00 1970 PST
  610 |   0 | 00610              | Sun Jan 11 00:00:00 1970 PST
  611 |   1 | 00611              | Mon Jan 12 00:00:00 1970 PST
  613 | 303 | 00613_update3      | Wed Jan 14 00:00:00 1970 PST
  614 |   4 | 00614              | Thu Jan 15 00:00:00 1970 PST
  616 |   6 | 00616              | Sat Jan 17 00:00:00 1970 PST
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST
  618 |   8 | 00618              | Mon Jan 19 00:00:00 1970 PST
  619 | 509 | 00619_update9      | Tue Jan 20 00:00:00 1970 PST
  620 |   0 | 00620              | Wed Jan 21 00:00:00 1970 PST
  621 |   1 | 00621              | Thu Jan 22 00:00:00 1970 PST
  623 | 303 | 00623_update3      | Sat Jan 24 00:00:00 1970 PST
  624 |   4 | 00624              | Sun Jan 25 00:00:00 1970 PST
  626 |   6 | 00626              | Tue Jan 27 00:00:00 1970 PST
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST
  628 |   8 | 00628              | Thu Jan 29 00:00:00 1970 PST
  629 | 509 | 00629_update9      | Fri Jan 30 00:00:00 1970 PST
  630 |   0 | 00630              | Sat Jan 31 00:00:00 1970 PST
  631 |   1 | 00631              | Sun Feb 01 00:00:00 1970 PST
  633 | 303 | 00633_update3      | Tue Feb 03 00:00:00 1970 PST
  634 |   4 | 00634              | Wed Feb 04 00:00:00 1970 PST
  636 |   6 | 00636              | Fri Feb 06 00:00:00 1970 PST
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST
  638 |   8 | 00638              | Sun Feb 08 00:00:00 1970 PST
  639 | 509 | 00639_update9      | Mon Feb 09 00:00:00 1970 PST
  640 |   0 | 00640              | Tue Feb 10 00:00:00 1970 PST
  641 |   1 | 00641              | Wed Feb 11 00:00:00 1970 PST
  643 | 303 | 00643_update3      | Fri Feb 13 00:00:00 1970 PST
  644 |   4 | 00644              | Sat Feb 14 00:00:00 1970 PST
  646 |   6 | 00646              | Mon Feb 16 00:00:00 1970 PST
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST
  648 |   8 | 00648              | Wed Feb 18 00:00:00 1970 PST
  649 | 509 | 00649_update9      | Thu Feb 19 00:00:00 1970 PST
  650 |   0 | 00650              | Fri Feb 20 00:00:00 1970 PST
  651 |   1 | 00651              | Sat Feb 21 00:00:00 1970 PST
  653 | 303 | 00653_update3      | Mon Feb 23 00:00:00 1970 PST
  654 |   4 | 00654              | Tue Feb 24 00:00:00 1970 PST
  656 |   6 | 00656              | Thu Feb 26 00:00:00 1970 PST
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST
  658 |   8 | 00658              | Sat Feb 28 00:00:00 1970 PST
  659 | 509 | 00659_update9      | Sun Mar 01 00:00:00 1970 PST
  660 |   0 | 00660              | Mon Mar 02 00:00:00 1970 PST
  661 |   1 | 00661              | Tue Mar 03 00:00:00 1970 PST
  663 | 303 | 00663_update3      | Thu Mar 05 00:00:00 1970 PST
  664 |   4 | 00664              | Fri Mar 06 00:00:00 1970 PST
  666 |   6 | 00666              | Sun Mar 08 00:00:00 1970 PST
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST
  668 |   8 | 00668              | Tue Mar 10 00:00:00 1970 PST
  669 | 509 | 00669_update9      | Wed Mar 11 00:00:00 1970 PST
  670 |   0 | 00670              | Thu Mar 12 00:00:00 1970 PST
  671 |   1 | 00671              | Fri Mar 13 00:00:00 1970 PST
  673 | 303 | 00673_update3      | Sun Mar 15 00:00:00 1970 PST
  674 |   4 | 00674              | Mon Mar 16 00:00:00 1970 PST
  676 |   6 | 00676              | Wed Mar 18 00:00:00 1970 PST
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST
  678 |   8 | 00678              | Fri Mar 20 00:00:00 1970 PST
  679 | 509 | 00679_update9      | Sat Mar 21 00:00:00 1970 PST
  680 |   0 | 00680              | Sun Mar 22 00:00:00 1970 PST
  681 |   1 | 00681              | Mon Mar 23 00:00:00 1970 PST
  683 | 303 | 00683_update3      | Wed Mar 25 00:00:00 1970 PST
  684 |   4 | 00684              | Thu Mar 26 00:00:00 1970 PST
  686 |   6 | 00686              | Sat Mar 28 00:00:00 1970 PST
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST
  688 |   8 | 00688              | Mon Mar 30 00:00:00 1970 PST
  689 | 509 | 00689_update9      | Tue Mar 31 00:00:00 1970 PST
  690 |   0 | 00690              | Wed Apr 01 00:00:00 1970 PST
  691 |   1 | 00691              | Thu Apr 02 00:00:00 1970 PST
  693 | 303 | 00693_update3      | Sat Apr 04 00:00:00 1970 PST
  694 |   4 | 00694              | Sun Apr 05 00:00:00 1970 PST
  696 |   6 | 00696              | Tue Apr 07 00:00:00 1970 PST
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST
  698 |   8 | 00698              | Thu Apr 09 00:00:00 1970 PST
  699 | 509 | 00699_update9      | Fri Apr 10 00:00:00 1970 PST
  700 |   0 | 00700              | Thu Jan 01 00:00:00 1970 PST
  701 |   1 | 00701              | Fri Jan 02 00:00:00 1970 PST
  703 | 303 | 00703_update3      | Sun Jan 04 00:00:00 1970 PST
  704 |   4 | 00704              | Mon Jan 05 00:00:00 1970 PST
  706 |   6 | 00706              | Wed Jan 07 00:00:00 1970 PST
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST
  708 |   8 | 00708              | Fri Jan 09 00:00:00 1970 PST
  709 | 509 | 00709_update9      | Sat Jan 10 00:00:00 1970 PST
  710 |   0 | 00710              | Sun Jan 11 00:00:00 1970 PST
  711 |   1 | 00711              | Mon Jan 12 00:00:00 1970 PST
  713 | 303 | 00713_update3      | Wed Jan 14 00:00:00 1970 PST
  714 |   4 | 00714              | Thu Jan 15 00:00:00 1970 PST
  716 |   6 | 00716              | Sat Jan 17 00:00:00 1970 PST
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST
  718 |   8 | 00718              | Mon Jan 19 00:00:00 1970 PST
  719 | 509 | 00719_update9      | Tue Jan 20 00:00:00 1970 PST
  720 |   0 | 00720              | Wed Jan 21 00:00:00 1970 PST
  721 |   1 | 00721              | Thu Jan 22 00:00:00 1970 PST
  723 | 303 | 00723_update3      | Sat Jan 24 00:00:00 1970 PST
  724 |   4 | 00724              | Sun Jan 25 00:00:00 1970 PST
  726 |   6 | 00726              | Tue Jan 27 00:00:00 1970 PST
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST
  728 |   8 | 00728              | Thu Jan 29 00:00:00 1970 PST
  729 | 509 | 00729_update9      | Fri Jan 30 00:00:00 1970 PST
  730 |   0 | 00730              | Sat Jan 31 00:00:00 1970 PST
  731 |   1 | 00731              | Sun Feb 01 00:00:00 1970 PST
  733 | 303 | 00733_update3      | Tue Feb 03 00:00:00 1970 PST
  734 |   4 | 00734              | Wed Feb 04 00:00:00 1970 PST
  736 |   6 | 00736              | Fri Feb 06 00:00:00 1970 PST
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST
  738 |   8 | 00738              | Sun Feb 08 00:00:00 1970 PST
  739 | 509 | 00739_update9      | Mon Feb 09 00:00:00 1970 PST
  740 |   0 | 00740              | Tue Feb 10 00:00:00 1970 PST
  741 |   1 | 00741              | Wed Feb 11 00:00:00 1970 PST
  743 | 303 | 00743_update3      | Fri Feb 13 00:00:00 1970 PST
  744 |   4 | 00744              | Sat Feb 14 00:00:00 1970 PST
  746 |   6 | 00746              | Mon Feb 16 00:00:00 1970 PST
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST
  748 |   8 | 00748              | Wed Feb 18 00:00:00 1970 PST
  749 | 509 | 00749_update9      | Thu Feb 19 00:00:00 1970 PST
  750 |   0 | 00750              | Fri Feb 20 00:00:00 1970 PST
  751 |   1 | 00751              | Sat Feb 21 00:00:00 1970 PST
  753 | 303 | 00753_update3      | Mon Feb 23 00:00:00 1970 PST
  754 |   4 | 00754              | Tue Feb 24 00:00:00 1970 PST
  756 |   6 | 00756              | Thu Feb 26 00:00:00 1970 PST
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST
  758 |   8 | 00758              | Sat Feb 28 00:00:00 1970 PST
  759 | 509 | 00759_update9      | Sun Mar 01 00:00:00 1970 PST
  760 |   0 | 00760              | Mon Mar 02 00:00:00 1970 PST
  761 |   1 | 00761              | Tue Mar 03 00:00:00 1970 PST
  763 | 303 | 00763_update3      | Thu Mar 05 00:00:00 1970 PST
  764 |   4 | 00764              | Fri Mar 06 00:00:00 1970 PST
  766 |   6 | 00766              | Sun Mar 08 00:00:00 1970 PST
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST
  768 |   8 | 00768              | Tue Mar 10 00:00:00 1970 PST
  769 | 509 | 00769_update9      | Wed Mar 11 00:00:00 1970 PST
  770 |   0 | 00770              | Thu Mar 12 00:00:00 1970 PST
  771 |   1 | 00771              | Fri Mar 13 00:00:00 1970 PST
  773 | 303 | 00773_update3      | Sun Mar 15 00:00:00 1970 PST
  774 |   4 | 00774              | Mon Mar 16 00:00:00 1970 PST
  776 |   6 | 00776              | Wed Mar 18 00:00:00 1970 PST
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST
  778 |   8 | 00778              | Fri Mar 20 00:00:00 1970 PST
  779 | 509 | 00779_update9      | Sat Mar 21 00:00:00 1970 PST
  780 |   0 | 00780              | Sun Mar 22 00:00:00 1970 PST
  781 |   1 | 00781              | Mon Mar 23 00:00:00 1970 PST
  783 | 303 | 00783_update3      | Wed Mar 25 00:00:00 1970 PST
  784 |   4 | 00784              | Thu Mar 26 00:00:00 1970 PST
  786 |   6 | 00786              | Sat Mar 28 00:00:00 1970 PST
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST
  788 |   8 | 00788              | Mon Mar 30 00:00:00 1970 PST
  789 | 509 | 00789_update9      | Tue Mar 31 00:00:00 1970 PST
  790 |   0 | 00790              | Wed Apr 01 00:00:00 1970 PST
  791 |   1 | 00791              | Thu Apr 02 00:00:00 1970 PST
  793 | 303 | 00793_update3      | Sat Apr 04 00:00:00 1970 PST
  794 |   4 | 00794              | Sun Apr 05 00:00:00 1970 PST
  796 |   6 | 00796              | Tue Apr 07 00:00:00 1970 PST
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST
  798 |   8 | 00798              | Thu Apr 09 00:00:00 1970 PST
  799 | 509 | 00799_update9      | Fri Apr 10 00:00:00 1970 PST
  800 |   0 | 00800              | Thu Jan 01 00:00:00 1970 PST
  801 |   1 | 00801              | Fri Jan 02 00:00:00 1970 PST
  803 | 303 | 00803_update3      | Sun Jan 04 00:00:00 1970 PST
  804 |   4 | 00804              | Mon Jan 05 00:00:00 1970 PST
  806 |   6 | 00806              | Wed Jan 07 00:00:00 1970 PST
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST
  808 |   8 | 00808              | Fri Jan 09 00:00:00 1970 PST
  809 | 509 | 00809_update9      | Sat Jan 10 00:00:00 1970 PST
  810 |   0 | 00810              | Sun Jan 11 00:00:00 1970 PST
  811 |   1 | 00811              | Mon Jan 12 00:00:00 1970 PST
  813 | 303 | 00813_update3      | Wed Jan 14 00:00:00 1970 PST
  814 |   4 | 00814              | Thu Jan 15 00:00:00 1970 PST
  816 |   6 | 00816              | Sat Jan 17 00:00:00 1970 PST
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST
  818 |   8 | 00818              | Mon Jan 19 00:00:00 1970 PST
  819 | 509 | 00819_update9      | Tue Jan 20 00:00:00 1970 PST
  820 |   0 | 00820              | Wed Jan 21 00:00:00 1970 PST
  821 |   1 | 00821              | Thu Jan 22 00:00:00 1970 PST
  823 | 303 | 00823_update3      | Sat Jan 24 00:00:00 1970 PST
  824 |   4 | 00824              | Sun Jan 25 00:00:00 1970 PST
  826 |   6 | 00826              | Tue Jan 27 00:00:00 1970 PST
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST
  828 |   8 | 00828              | Thu Jan 29 00:00:00 1970 PST
  829 | 509 | 00829_update9      | Fri Jan 30 00:00:00 1970 PST
  830 |   0 | 00830              | Sat Jan 31 00:00:00 1970 PST
  831 |   1 | 00831              | Sun Feb 01 00:00:00 1970 PST
  833 | 303 | 00833_update3      | Tue Feb 03 00:00:00 1970 PST
  834 |   4 | 00834              | Wed Feb 04 00:00:00 1970 PST
  836 |   6 | 00836              | Fri Feb 06 00:00:00 1970 PST
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST
  838 |   8 | 00838              | Sun Feb 08 00:00:00 1970 PST
  839 | 509 | 00839_update9      | Mon Feb 09 00:00:00 1970 PST
  840 |   0 | 00840              | Tue Feb 10 00:00:00 1970 PST
  841 |   1 | 00841              | Wed Feb 11 00:00:00 1970 PST
  843 | 303 | 00843_update3      | Fri Feb 13 00:00:00 1970 PST
  844 |   4 | 00844              | Sat Feb 14 00:00:00 1970 PST
  846 |   6 | 00846              | Mon Feb 16 00:00:00 1970 PST
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST
  848 |   8 | 00848              | Wed Feb 18 00:00:00 1970 PST
  849 | 509 | 00849_update9      | Thu Feb 19 00:00:00 1970 PST
  850 |   0 | 00850              | Fri Feb 20 00:00:00 1970 PST
  851 |   1 | 00851              | Sat Feb 21 00:00:00 1970 PST
  853 | 303 | 00853_update3      | Mon Feb 23 00:00:00 1970 PST
  854 |   4 | 00854              | Tue Feb 24 00:00:00 1970 PST
  856 |   6 | 00856              | Thu Feb 26 00:00:00 1970 PST
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST
  858 |   8 | 00858              | Sat Feb 28 00:00:00 1970 PST
  859 | 509 | 00859_update9      | Sun Mar 01 00:00:00 1970 PST
  860 |   0 | 00860              | Mon Mar 02 00:00:00 1970 PST
  861 |   1 | 00861              | Tue Mar 03 00:00:00 1970 PST
  863 | 303 | 00863_update3      | Thu Mar 05 00:00:00 1970 PST
  864 |   4 | 00864              | Fri Mar 06 00:00:00 1970 PST
  866 |   6 | 00866              | Sun Mar 08 00:00:00 1970 PST
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST
  868 |   8 | 00868              | Tue Mar 10 00:00:00 1970 PST
  869 | 509 | 00869_update9      | Wed Mar 11 00:00:00 1970 PST
  870 |   0 | 00870              | Thu Mar 12 00:00:00 1970 PST
  871 |   1 | 00871              | Fri Mar 13 00:00:00 1970 PST
  873 | 303 | 00873_update3      | Sun Mar 15 00:00:00 1970 PST
  874 |   4 | 00874              | Mon Mar 16 00:00:00 1970 PST
  876 |   6 | 00876              | Wed Mar 18 00:00:00 1970 PST
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST
  878 |   8 | 00878              | Fri Mar 20 00:00:00 1970 PST
  879 | 509 | 00879_update9      | Sat Mar 21 00:00:00 1970 PST
  880 |   0 | 00880              | Sun Mar 22 00:00:00 1970 PST
  881 |   1 | 00881              | Mon Mar 23 00:00:00 1970 PST
  883 | 303 | 00883_update3      | Wed Mar 25 00:00:00 1970 PST
  884 |   4 | 00884              | Thu Mar 26 00:00:00 1970 PST
  886 |   6 | 00886              | Sat Mar 28 00:00:00 1970 PST
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST
  888 |   8 | 00888              | Mon Mar 30 00:00:00 1970 PST
  889 | 509 | 00889_update9      | Tue Mar 31 00:00:00 1970 PST
  890 |   0 | 00890              | Wed Apr 01 00:00:00 1970 PST
  891 |   1 | 00891              | Thu Apr 02 00:00:00 1970 PST
  893 | 303 | 00893_update3      | Sat Apr 04 00:00:00 1970 PST
  894 |   4 | 00894              | Sun Apr 05 00:00:00 1970 PST
  896 |   6 | 00896              | Tue Apr 07 00:00:00 1970 PST
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST
  898 |   8 | 00898              | Thu Apr 09 00:00:00 1970 PST
  899 | 509 | 00899_update9      | Fri Apr 10 00:00:00 1970 PST
  900 |   0 | 00900              | Thu Jan 01 00:00:00 1970 PST
  901 |   1 | 00901              | Fri Jan 02 00:00:00 1970 PST
  903 | 303 | 00903_update3      | Sun Jan 04 00:00:00 1970 PST
  904 |   4 | 00904              | Mon Jan 05 00:00:00 1970 PST
  906 |   6 | 00906              | Wed Jan 07 00:00:00 1970 PST
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST
  908 |   8 | 00908              | Fri Jan 09 00:00:00 1970 PST
  909 | 509 | 00909_update9      | Sat Jan 10 00:00:00 1970 PST
  910 |   0 | 00910              | Sun Jan 11 00:00:00 1970 PST
  911 |   1 | 00911              | Mon Jan 12 00:00:00 1970 PST
  913 | 303 | 00913_update3      | Wed Jan 14 00:00:00 1970 PST
  914 |   4 | 00914              | Thu Jan 15 00:00:00 1970 PST
  916 |   6 | 00916              | Sat Jan 17 00:00:00 1970 PST
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST
  918 |   8 | 00918              | Mon Jan 19 00:00:00 1970 PST
  919 | 509 | 00919_update9      | Tue Jan 20 00:00:00 1970 PST
  920 |   0 | 00920              | Wed Jan 21 00:00:00 1970 PST
  921 |   1 | 00921              | Thu Jan 22 00:00:00 1970 PST
  923 | 303 | 00923_update3      | Sat Jan 24 00:00:00 1970 PST
  924 |   4 | 00924              | Sun Jan 25 00:00:00 1970 PST
  926 |   6 | 00926              | Tue Jan 27 00:00:00 1970 PST
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST
  928 |   8 | 00928              | Thu Jan 29 00:00:00 1970 PST
  929 | 509 | 00929_update9      | Fri Jan 30 00:00:00 1970 PST
  930 |   0 | 00930              | Sat Jan 31 00:00:00 1970 PST
  931 |   1 | 00931              | Sun Feb 01 00:00:00 1970 PST
  933 | 303 | 00933_update3      | Tue Feb 03 00:00:00 1970 PST
  934 |   4 | 00934              | Wed Feb 04 00:00:00 1970 PST
  936 |   6 | 00936              | Fri Feb 06 00:00:00 1970 PST
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST
  938 |   8 | 00938              | Sun Feb 08 00:00:00 1970 PST
  939 | 509 | 00939_update9      | Mon Feb 09 00:00:00 1970 PST
  940 |   0 | 00940              | Tue Feb 10 00:00:00 1970 PST
  941 |   1 | 00941              | Wed Feb 11 00:00:00 1970 PST
  943 | 303 | 00943_update3      | Fri Feb 13 00:00:00 1970 PST
  944 |   4 | 00944              | Sat Feb 14 00:00:00 1970 PST
  946 |   6 | 00946              | Mon Feb 16 00:00:00 1970 PST
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST
  948 |   8 | 00948              | Wed Feb 18 00:00:00 1970 PST
  949 | 509 | 00949_update9      | Thu Feb 19 00:00:00 1970 PST
  950 |   0 | 00950              | Fri Feb 20 00:00:00 1970 PST
  951 |   1 | 00951              | Sat Feb 21 00:00:00 1970 PST
  953 | 303 | 00953_update3      | Mon Feb 23 00:00:00 1970 PST
  954 |   4 | 00954              | Tue Feb 24 00:00:00 1970 PST
  956 |   6 | 00956              | Thu Feb 26 00:00:00 1970 PST
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST
  958 |   8 | 00958              | Sat Feb 28 00:00:00 1970 PST
  959 | 509 | 00959_update9      | Sun Mar 01 00:00:00 1970 PST
  960 |   0 | 00960              | Mon Mar 02 00:00:00 1970 PST
  961 |   1 | 00961              | Tue Mar 03 00:00:00 1970 PST
  963 | 303 | 00963_update3      | Thu Mar 05 00:00:00 1970 PST
  964 |   4 | 00964              | Fri Mar 06 00:00:00 1970 PST
  966 |   6 | 00966              | Sun Mar 08 00:00:00 1970 PST
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST
  968 |   8 | 00968              | Tue Mar 10 00:00:00 1970 PST
  969 | 509 | 00969_update9      | Wed Mar 11 00:00:00 1970 PST
  970 |   0 | 00970              | Thu Mar 12 00:00:00 1970 PST
  971 |   1 | 00971              | Fri Mar 13 00:00:00 1970 PST
  973 | 303 | 00973_update3      | Sun Mar 15 00:00:00 1970 PST
  974 |   4 | 00974              | Mon Mar 16 00:00:00 1970 PST
  976 |   6 | 00976              | Wed Mar 18 00:00:00 1970 PST
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST
  978 |   8 | 00978              | Fri Mar 20 00:00:00 1970 PST
  979 | 509 | 00979_update9      | Sat Mar 21 00:00:00 1970 PST
  980 |   0 | 00980              | Sun Mar 22 00:00:00 1970 PST
  981 |   1 | 00981              | Mon Mar 23 00:00:00 1970 PST
  983 | 303 | 00983_update3      | Wed Mar 25 00:00:00 1970 PST
  984 |   4 | 00984              | Thu Mar 26 00:00:00 1970 PST
  986 |   6 | 00986              | Sat Mar 28 00:00:00 1970 PST
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST
  988 |   8 | 00988              | Mon Mar 30 00:00:00 1970 PST
  989 | 509 | 00989_update9      | Tue Mar 31 00:00:00 1970 PST
  990 |   0 | 00990              | Wed Apr 01 00:00:00 1970 PST
  991 |   1 | 00991              | Thu Apr 02 00:00:00 1970 PST
  993 | 303 | 00993_update3      | Sat Apr 04 00:00:00 1970 PST
  994 |   4 | 00994              | Sun Apr 05 00:00:00 1970 PST
  996 |   6 | 00996              | Tue Apr 07 00:00:00 1970 PST
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST
  998 |   8 | 00998              | Thu Apr 09 00:00:00 1970 PST
  999 | 509 | 00999_update9      | Fri Apr 10 00:00:00 1970 PST
 1000 |   0 | 01000              | Thu Jan 01 00:00:00 1970 PST
 1001 | 101 | 0000100001         | 
 1003 | 403 | 0000300003_update3 | 
 1004 | 104 | 0000400004         | 
 1006 | 106 | 0000600006         | 
 1007 | 507 | 0000700007_update7 | 
 1008 | 108 | 0000800008         | 
 1009 | 609 | 0000900009_update9 | 
 1010 | 100 | 0001000010         | 
 1011 | 101 | 0001100011         | 
 1013 | 403 | 0001300013_update3 | 
 1014 | 104 | 0001400014         | 
 1016 | 106 | 0001600016         | 
 1017 | 507 | 0001700017_update7 | 
 1018 | 108 | 0001800018         | 
 1019 | 609 | 0001900019_update9 | 
 1020 | 100 | 0002000020         | 
 1101 | 201 | aaa                | 
 1103 | 503 | ccc_update3        | 
 1104 | 204 | ddd                | 
(819 rows)

--Testcase 421:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1200,999,'foo');
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`T 1`(`C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
   Batch Size: 1
   ->  Result
         Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
(5 rows)

--Testcase 422:
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1200,999,'foo');
--Testcase 423:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'bar' WHERE c1 = 1200;             -- can be pushed down
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   ->  Foreign Update on public.ft2_a_child
         remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c3` = 'bar' WHERE ((`C 1` = 1200))
(3 rows)

--Testcase 424:
UPDATE ft2_a_child SET c3 = 'bar' WHERE c1 = 1200;
--Testcase 425:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child WHERE c1 = 1200;                       -- can be pushed down
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   ->  Foreign Delete on public.ft2_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` = 1200))
(3 rows)

--Testcase 426:
DELETE FROM ft2_a_child WHERE c1 = 1200;
-- -- Test UPDATE/DELETE with RETURNING on a three-table join
-- -- INSERT INTO ft2 (c1,c2,c3)
--   SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
-- -- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1;       -- can be pushed down
-- -- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1;
-- -- SELECT ft2, ft2.*, ft4, ft4.*
--   FROM ft2 INNER JOIN ft4 ON (ft2.c1 > 1200 AND ft2.c2 = ft4.c1)
--   INNER JOIN ft5 ON (ft4.c1 = ft5.c1);
-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1;                          -- can be pushed down
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1;
-- SELECT 100 FROM ft2, ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1;
-- DELETE FROM ft2 WHERE ft2.c1 > 1200;
-- -- Test UPDATE with a MULTIEXPR sub-select
-- -- (maybe someday this'll be remotely executable, but not today)
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 AS target SET (c2, c7) = (
--     SELECT c2 * 10, c7
--         FROM ft2 AS src
--         WHERE target.c1 = src.c1
-- ) WHERE c1 > 1100;
-- UPDATE ft2 AS target SET (c2, c7) = (
--     SELECT c2 * 10, c7
--         FROM ft2 AS src
--         WHERE target.c1 = src.c1
-- ) WHERE c1 > 1100;
-- UPDATE ft2 AS target SET (c2) = (
--     SELECT c2 / 10
--         FROM ft2 AS src
--         WHERE target.c1 = src.c1
-- ) WHERE c1 > 1100;
-- -- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- -- user-defined operators/functions
--Testcase 427:
ALTER SERVER mysql_svr OPTIONS (DROP extensions);
--Testcase 428:
INSERT INTO ft2_a_child (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
--Testcase 429:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'bar' WHERE mysql_fdw_abs(c1) > 2000;            -- can't be pushed down
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c3` = ? WHERE `C 1` = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: 'bar'::text, c1, ft2_a_child.*
         Filter: (mysql_fdw_abs(ft2_a_child.c1) > 2000)
         Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` FOR UPDATE
(6 rows)

--Testcase 430:
SELECT * FROM ft2_a_child WHERE mysql_fdw_abs(c1) > 2000;
  c1  | c2 |  c3   | c4 | c5 | c6 |     c7     | c8 
------+----+-------+----+----+----+------------+----
 2001 |  1 | 02001 |    |    |    | ft2        | 
 2002 |  2 | 02002 |    |    |    | ft2        | 
 2003 |  3 | 02003 |    |    |    | ft2        | 
 2004 |  4 | 02004 |    |    |    | ft2        | 
 2005 |  5 | 02005 |    |    |    | ft2        | 
 2006 |  6 | 02006 |    |    |    | ft2        | 
 2007 |  7 | 02007 |    |    |    | ft2        | 
 2008 |  8 | 02008 |    |    |    | ft2        | 
 2009 |  9 | 02009 |    |    |    | ft2        | 
 2010 |  0 | 02010 |    |    |    | ft2        | 
(10 rows)

--Testcase 431:
UPDATE ft2_a_child SET c3 = 'bar' WHERE mysql_fdw_abs(c1) > 2000;
--Testcase 432:
SELECT * FROM ft2 WHERE mysql_fdw_abs(c1) > 2000;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  
------+----+-----+----+----+----+------------+----+---------
 2001 |  1 | bar |    |    |    | ft2        |    | /node1/
 2002 |  2 | bar |    |    |    | ft2        |    | /node1/
 2003 |  3 | bar |    |    |    | ft2        |    | /node1/
 2004 |  4 | bar |    |    |    | ft2        |    | /node1/
 2005 |  5 | bar |    |    |    | ft2        |    | /node1/
 2006 |  6 | bar |    |    |    | ft2        |    | /node1/
 2007 |  7 | bar |    |    |    | ft2        |    | /node1/
 2008 |  8 | bar |    |    |    | ft2        |    | /node1/
 2009 |  9 | bar |    |    |    | ft2        |    | /node1/
 2010 |  0 | bar |    |    |    | ft2        |    | /node1/
(10 rows)

--Testcase 433:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 === ft4.c1;                         -- can't be pushed down
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote query: UPDATE `mysql_fdw_post`.`T 1` SET `c3` = ? WHERE `C 1` = ?
   ->  Hash Join
         Output: 'baz'::text, ft2_a_child.c1, ft2_a_child.*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5_a ft5
               Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                 Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 4`
         ->  Hash
               Output: ft2_a_child.c1, ft2_a_child.*, ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid
               ->  Nested Loop
                     Output: ft2_a_child.c1, ft2_a_child.*, ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid
                     Join Filter: (ft2_a_child.c2 === ft4.c1)
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                             Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3`
                     ->  Materialize
                           Output: ft2_a_child.c1, ft2_a_child.*, ft2_a_child.c2
                           ->  Foreign Scan on public.ft2_a_child
                                 Output: ft2_a_child.c1, ft2_a_child.*, ft2_a_child.c2
                                 Remote query: SELECT `C 1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` > 2000)) FOR UPDATE
(21 rows)

--Testcase 434:
SELECT ft2.*, ft4.*, ft5.*
  FROM ft2, ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |   c3   | spdurl  
------+----+-----+----+----+----+------------+----+---------+----+----+--------+---------+----+----+--------+---------
 2006 |  6 | bar |    |    |    | ft2        |    | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/
(1 row)

--Testcase 435:
UPDATE ft2_a_child SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 === ft4.c1;
--Testcase 436:
SELECT ft2.*, ft4.*, ft5.*
  FROM ft2, ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |   c3   | spdurl  
------+----+-----+----+----+----+------------+----+---------+----+----+--------+---------+----+----+--------+---------
 2006 |  6 | baz |    |    |    | ft2        |    | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/
(1 row)

--Testcase 437:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 = ft4.c1;                           -- can't be pushed down
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote query: DELETE FROM `mysql_fdw_post`.`T 1` WHERE `C 1` = ?
   ->  Nested Loop
         Output: ft2_a_child.c1, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Join Filter: (ft4.c1 === ft5.c1)
         ->  Hash Join
               Output: ft2_a_child.c1, ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid
               Hash Cond: (ft4.c1 = ft2_a_child.c2)
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                       Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 3`
               ->  Hash
                     Output: ft2_a_child.c1, ft2_a_child.c2
                     ->  Foreign Scan on public.ft2_a_child
                           Output: ft2_a_child.c1, ft2_a_child.c2
                           Remote query: SELECT `C 1`, `c2` FROM `mysql_fdw_post`.`T 1` WHERE ((`C 1` > 2000)) ORDER BY `c2` IS NULL ASC, `c2` ASC FOR UPDATE
         ->  Foreign Scan on public.ft5_a ft5
               Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                 Remote query: SELECT `c1`, `c2`, `c3` FROM `mysql_fdw_post`.`T 4`
(19 rows)

--Testcase 438:
SELECT ft2.c1, ft2.c2, ft2.c3 FROM ft2, ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1;
  c1  | c2 | c3  
------+----+-----
 2006 |  6 | baz
(1 row)

--Testcase 439:
DELETE FROM ft2_a_child
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 = ft4.c1;
--Testcase 440:
SELECT ft2.c1, ft2.c2, ft2.c3 FROM ft2, ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1;
 c1 | c2 | c3 
----+----+----
(0 rows)

--Testcase 441:
DELETE FROM ft2_a_child WHERE ft2_a_child.c1 > 2000;
--Testcase 442:
ALTER SERVER mysql_svr OPTIONS (ADD extensions 'mysql_fdw');
-- Test that trigger on remote table works as expected
-- CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
-- BEGIN
--     NEW.c3 = NEW.c3 || '_trig_update';
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;
-- CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
--     ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1208, 818, 'fff');
-- INSERT INTO ft2 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;');
-- UPDATE ft2 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200;
-- -- Test errors thrown on remote side during update
--Testcase 761:
CREATE FOREIGN TABLE ft1_constraint_a_child (
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 't1_constraint');
--Testcase 443:
CREATE TABLE ft1_constraint (
	c1 int,
	c2 int NOT NULL,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text,
	spdurl text) PARTITION BY LIST (spdurl);
--Testcase 762:
CREATE FOREIGN TABLE ft1_constraint_a PARTITION OF ft1_constraint FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 444:
INSERT INTO ft1_constraint_a_child SELECT * FROM ft1_a_child ON CONFLICT DO NOTHING;
-- c2 must be greater than or equal to 0, so this case is ignored.
--Testcase 445:
INSERT INTO ft1_constraint_a_child(c1, c2) VALUES (2222, -2) ON CONFLICT DO NOTHING; -- ignore, do nothing
--Testcase 446:
SELECT c1, c2 FROM ft1_constraint_a_child WHERE c1 = 2222 or c2 = -2; -- empty result
 c1 | c2 
----+----
(0 rows)

--Testcase 447:
ALTER FOREIGN TABLE ft1_a_child RENAME TO ft1_org;
--Testcase 448:
ALTER FOREIGN TABLE ft1_constraint_a_child RENAME TO ft1_a_child;
--Testcase 449:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12);  -- duplicate key
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Duplicate entry '11' for key 't1_constraint.PRIMARY'
--Testcase 450:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
--Testcase 763:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 451:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 452:
INSERT INTO ft1_a_child(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Check constraint 't1_constraint_chk_1' is violated.
--Testcase 453:
UPDATE ft1_a_child SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Check constraint 't1_constraint_chk_1' is violated.
--Testcase 454:
ALTER FOREIGN TABLE ft1_a_child RENAME TO ft1_constraint_a_child;
--Testcase 455:
ALTER FOREIGN TABLE ft1_org RENAME TO ft1_a_child;
-- -- Test savepoint/rollback behavior
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
-- begin;
-- update ft2 set c2 = 42 where c2 = 0;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s1;
-- update ft2 set c2 = 44 where c2 = 4;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s1;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s2;
-- update ft2 set c2 = 46 where c2 = 6;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- rollback to savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s3;
-- update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
-- rollback to savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- -- none of the above is committed yet remotely
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
-- commit;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
-- VACUUM ANALYZE "S 1"."T 1";
-- -- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- -- FIRST behavior here.
-- -- ORDER BY DESC NULLS LAST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
-- -- ORDER BY DESC NULLS FIRST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- -- ORDER BY ASC NULLS FIRST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- -- ===================================================================
-- -- test check constraints
-- -- ===================================================================
--Testcase 456:
ALTER FOREIGN TABLE ft1_a_child RENAME TO ft1_org;
--Testcase 457:
ALTER FOREIGN TABLE ft1_constraint_a_child RENAME TO ft1_a_child;
-- Consistent check constraints provide consistent results
--Testcase 458:
ALTER TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
--Testcase 764:
SET constraint_exclusion = 'off';
--Testcase 459:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: (PARTIAL count(*))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT count(*) FROM `mysql_fdw_post`.`t1_constraint` WHERE ((`c2` < 0))
(6 rows)

--Testcase 460:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 461:
SET constraint_exclusion = 'on';
--Testcase 462:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 463:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 464:
RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
--Testcase 465:
INSERT INTO ft1_a_child(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Check constraint 't1_constraint_chk_1' is violated.
--Testcase 466:
UPDATE ft1_a_child SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Check constraint 't1_constraint_chk_1' is violated.
--Testcase 467:
ALTER TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
--Testcase 468:
ALTER TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
--Testcase 765:
SET constraint_exclusion = 'off';
--Testcase 469:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: (PARTIAL count(*))
           Relations: Aggregate on (mysql_fdw_post.ft1_a_child)
           Remote query: SELECT count(*) FROM `mysql_fdw_post`.`t1_constraint` WHERE ((`c2` >= 0))
(6 rows)

--Testcase 470:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
   819
(1 row)

--Testcase 471:
SET constraint_exclusion = 'on';
--Testcase 472:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 473:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

--Testcase 474:
RESET constraint_exclusion;
-- local check constraint is not actually enforced
--Testcase 475:
INSERT INTO ft1_a_child(c1, c2) VALUES(1111, 2);
--Testcase 476:
UPDATE ft1_a_child SET c2 = c2 + 1 WHERE c1 = 1;
--Testcase 477:
ALTER TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
--Testcase 478:
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
--Testcase 766:
CREATE FOREIGN TABLE foreign_tbl_a_child (id int, a int, b int)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'base_tbl');
--Testcase 479:
CREATE TABLE foreign_tbl (id int, a int, b int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 767:
CREATE FOREIGN TABLE foreign_tbl_a PARTITION OF foreign_tbl FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 480:
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON foreign_tbl_a_child FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
--Testcase 481:
CREATE VIEW rw_view AS SELECT a, b FROM foreign_tbl_a_child
  WHERE a < b WITH CHECK OPTION;
--Testcase 482:
\d+ rw_view
                           View "public.rw_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 a      | integer |           |          |         | plain   | 
 b      | integer |           |          |         | plain   | 
View definition:
 SELECT a,
    b
   FROM foreign_tbl_a_child
  WHERE a < b;
Options: check_option=cascaded

--Testcase 483:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Insert on public.foreign_tbl_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`base_tbl`(`id`, `a`, `b`) VALUES (?, ?, ?)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 0, 5
(5 rows)

--Testcase 484:
INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
--Testcase 485:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Insert on public.foreign_tbl_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`base_tbl`(`id`, `a`, `b`) VALUES (?, ?, ?)
   Batch Size: 1
   ->  Result
         Output: NULL::integer, 0, 15
(5 rows)

--Testcase 486:
INSERT INTO rw_view VALUES (0, 15); -- ok
--Testcase 487:
SELECT a, b FROM foreign_tbl;
 a  | b  
----+----
 10 | 15
(1 row)

--Testcase 488:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Update on public.foreign_tbl_a_child
   Remote query: UPDATE `mysql_fdw_post`.`base_tbl` SET `a` = ?, `b` = ? WHERE id = ?
   ->  Foreign Scan on public.foreign_tbl_a_child
         Output: (foreign_tbl_a_child.b + 5), foreign_tbl_a_child.id, foreign_tbl_a_child.*
         Remote query: SELECT `id`, `a`, `b` FROM `mysql_fdw_post`.`base_tbl` WHERE ((`a` < `b`)) FOR UPDATE
(5 rows)

--Testcase 489:
UPDATE rw_view SET b = b + 5; -- should fail
ERROR:  new row violates check option for view "rw_view"
--Testcase 490:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Update on public.foreign_tbl_a_child
   Remote query: UPDATE `mysql_fdw_post`.`base_tbl` SET `a` = ?, `b` = ? WHERE id = ?
   ->  Foreign Scan on public.foreign_tbl_a_child
         Output: (foreign_tbl_a_child.b + 15), foreign_tbl_a_child.id, foreign_tbl_a_child.*
         Remote query: SELECT `id`, `a`, `b` FROM `mysql_fdw_post`.`base_tbl` WHERE ((`a` < `b`)) FOR UPDATE
(5 rows)

--Testcase 491:
UPDATE rw_view SET b = b + 15; -- ok
--Testcase 492:
SELECT a, b FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

-- We don't allow batch insert when there are any WCO constraints
ALTER SERVER mysql_svr OPTIONS (ADD batch_size '10');
--Testcase 914:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15), (0, 5);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Insert on public.foreign_tbl_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`base_tbl`(`id`, `a`, `b`) VALUES (?, ?, ?)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: NULL::integer, "*VALUES*".column1, "*VALUES*".column2
(5 rows)

--Testcase 915:
INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
--Testcase 916:
SELECT a, b FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

ALTER SERVER mysql_svr OPTIONS (DROP batch_size);
--Testcase 493:
DROP TRIGGER row_before_insupd_trigger ON foreign_tbl_a_child;
--Testcase 494:
DROP FOREIGN TABLE foreign_tbl_a_child CASCADE;
NOTICE:  drop cascades to view rw_view
-- PGspider_Ext support only LIST partition rule 
-- -- test WCO for partitions
-- --Testcase 495:
-- CREATE FOREIGN TABLE foreign_tbl (id int, a int, b int)
--   SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'child_tbl');
-- --Testcase 496:
-- CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON foreign_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
-- --Testcase 497:
-- CREATE TABLE parent_tbl (id int, a int, b int) PARTITION BY RANGE(a);
-- --Testcase 498:
-- ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
-- -- Detach and re-attach once, to stress the concurrent detach case.
-- ALTER TABLE parent_tbl DETACH PARTITION foreign_tbl CONCURRENTLY;
-- ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
-- --Testcase 499:
-- CREATE VIEW rw_view AS SELECT a, b FROM parent_tbl
--   WHERE a < b WITH CHECK OPTION;
-- --Testcase 500:
-- \d+ rw_view
-- --Testcase 501:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 5);
-- --Testcase 502:
-- INSERT INTO rw_view VALUES (0, 5); -- should fail
-- --Testcase 503:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 15);
-- --Testcase 504:
-- INSERT INTO rw_view VALUES (0, 15); -- ok
-- --Testcase 505:
-- SELECT a, b FROM foreign_tbl;
-- --Testcase 506:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE rw_view SET b = b + 5;
-- --Testcase 507:
-- UPDATE rw_view SET b = b + 5; -- should fail
-- --Testcase 508:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE rw_view SET b = b + 15;
-- --Testcase 509:
-- UPDATE rw_view SET b = b + 15; -- ok
-- --Testcase 510:
-- SELECT a, b FROM foreign_tbl;
-- -- We don't allow batch insert when there are any WCO constraints
-- ALTER SERVER loopback OPTIONS (ADD batch_size '10');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 15), (0, 5);
-- INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
-- SELECT * FROM foreign_tbl;
-- ALTER SERVER loopback OPTIONS (DROP batch_size);
-- --Testcase 511:
-- DROP TRIGGER row_before_insupd_trigger ON foreign_tbl;
-- --Testcase 512:
-- DROP FOREIGN TABLE foreign_tbl CASCADE;
-- --Testcase 513:
-- DROP TABLE parent_tbl CASCADE;
-- --Testcase 514:
-- DROP FUNCTION row_before_insupd_trigfunc;
-- Try a more complex permutation of WCO where there are multiple levels of
-- partitioned tables with columns not all in the same order
--Testcase 936:
CREATE TABLE parent_tbl (a int, b text, c numeric) PARTITION BY RANGE(a);
--Testcase 937:
CREATE TABLE sub_parent (c numeric, a int, b text) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION sub_parent FOR VALUES FROM (1) TO (10);
--Testcase 938:
CREATE FOREIGN TABLE child_foreign (b text, c numeric, a int)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'child_local');
ALTER TABLE sub_parent ATTACH PARTITION child_foreign FOR VALUES FROM (1) TO (10);
--Testcase 939:
CREATE VIEW rw_view AS SELECT * FROM parent_tbl WHERE a < 5 WITH CHECK OPTION;
--Testcase 940:
INSERT INTO parent_tbl (a) VALUES(1),(5);
--Testcase 941:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = 'text', c = 123.456;
ERROR:  row identifier column update is not supported
--Testcase 942:
UPDATE rw_view SET b = 'text', c = 123.456;
ERROR:  row identifier column update is not supported
--Testcase 943:
SELECT * FROM parent_tbl ORDER BY a;
 a | b | c 
---+---+---
 1 |   |  
 5 |   |  
(2 rows)

--Testcase 944:
DROP VIEW rw_view;
--Testcase 945:
DROP FOREIGN TABLE child_foreign;
--Testcase 946:
DROP TABLE sub_parent;
--Testcase 947:
DROP TABLE parent_tbl;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
--Testcase 768:
create foreign table loc1_a_child (id int, f1 serial, f2 text)
  server mysql_svr options(dbname 'mysql_fdw_post', table_name 'loc1');
--Testcase 515:
create table loc1 (id int, f1 serial, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 769:
create foreign table loc1_a PARTITION OF loc1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 770:
create foreign table rem1_a_child (id int, f1 serial, f2 text)
  server mysql_svr options(dbname 'mysql_fdw_post', table_name 'loc1');
--Testcase 516:
create table rem1 (id int, f1 serial, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 771:
create foreign table rem1_a PARTITION OF rem1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 517:
select pg_catalog.setval('rem1_a_child_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

--Testcase 518:
insert into loc1_a_child(f2) values('hi');
--Testcase 519:
insert into rem1_a_child(f2) values('hi remote');
--Testcase 520:
insert into loc1_a_child(f2) values('bye');
--Testcase 521:
insert into rem1_a_child(f2) values('bye remote');
--Testcase 522:
select f1, f2 from loc1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

--Testcase 523:
select f1, f2 from rem1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
--Testcase 772:
create foreign table grem1_a_child (
  id int,
  a int,
  b int generated always as (a * 2) stored)
  server mysql_svr options(dbname 'mysql_fdw_post', table_name 'gloc1_post14');
--Testcase 524:
create table grem1 (
  id int,
  a int,
  b int generated always as (a * 2) stored,
  spdurl text) PARTITION BY LIST (spdurl);
--Testcase 773:
create foreign table grem1_a PARTITION OF grem1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 917:
explain (verbose, costs off)
insert into grem1_a_child (a) values (1), (2);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Insert on public.grem1_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`gloc1_post14`(`id`, `a`, `b`) VALUES (?, ?, DEFAULT)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: NULL::integer, "*VALUES*".column1, NULL::integer
(5 rows)

--Testcase 525:
insert into grem1_a_child (a) values (1), (2);
--Testcase 918:
explain (verbose, costs off)
update grem1_a_child set a = 22 where a = 2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Update on public.grem1_a_child
   Remote query: UPDATE `mysql_fdw_post`.`gloc1_post14` SET `a` = ?, `b` = DEFAULT WHERE id = ?
   ->  Foreign Scan on public.grem1_a_child
         Output: 22, id, grem1_a_child.*
         Remote query: SELECT `id`, `a`, `b` FROM `mysql_fdw_post`.`gloc1_post14` WHERE ((`a` = 2)) FOR UPDATE
(5 rows)

--Testcase 526:
update grem1_a_child set a = 22 where a = 2;
--Testcase 527:
select a, b from grem1;
 a  | b  
----+----
  1 |  2
 22 | 44
(2 rows)

--Testcase 919:
delete from grem1_a_child;
-- test copy from
copy grem1_a_child from stdin;
ERROR:  invalid input syntax for type integer: "1   1"
--Testcase 747:
select * from grem1;
 id | a | b | spdurl 
----+---+---+--------
(0 rows)

--Testcase 748:
delete from grem1_a_child;
-- test batch insert
--Testcase 749:
alter server mysql_svr options (add batch_size '10');
--Testcase 750:
explain (verbose, costs off)
insert into grem1_a_child (a) values (1), (2);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Insert on public.grem1_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`gloc1_post14`(`id`, `a`, `b`) VALUES (?, ?, DEFAULT)
   Batch Size: 10
   ->  Values Scan on "*VALUES*"
         Output: NULL::integer, "*VALUES*".column1, NULL::integer
(5 rows)

--Testcase 751:
insert into grem1_a_child (a) values (1), (2);
--Testcase 752:
select * from grem1;
 id | a | b | spdurl  
----+---+---+---------
  2 |   |   | /node1/
  3 | 1 | 2 | /node1/
(2 rows)

--Testcase 753:
delete from grem1_a_child;
-- batch insert with foreign partitions.
-- This schema uses two partitions, one local and one remote with a modulo
-- to loop across all of them in batches.
--Testcase 948:
create table tab_batch_local (id int, data text);
--Testcase 949:
insert into tab_batch_local select i, 'test'|| i from generate_series(1, 45) i;
--Testcase 950:
create table tab_batch_sharded (id int, data text) partition by hash(id);
--Testcase 951:
create table tab_batch_sharded_p0 partition of tab_batch_sharded
  for values with (modulus 2, remainder 0);
--Testcase 952:
create foreign table tab_batch_sharded_p1 partition of tab_batch_sharded
  for values with (modulus 2, remainder 1)
  server mysql_svr options (dbname 'mysql_fdw_post', table_name 'tab_batch_sharded_p1_remote');
--Testcase 953:
insert into tab_batch_sharded select * from tab_batch_local;
--Testcase 954:
select count(*) from tab_batch_sharded;
 count 
-------
    45
(1 row)

--Testcase 955:
drop table tab_batch_local;
--Testcase 956:
drop table tab_batch_sharded;
--Testcase 754:
alter server mysql_svr options (drop batch_size);
-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
--Testcase 528:
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
--Testcase 957:
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE OR TRUNCATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 958:
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE OR TRUNCATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 529:
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
--Testcase 959:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 960:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 961:
delete from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
NOTICE:  OLD: (1,1,hi)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
NOTICE:  OLD: (2,10,"hi remote")
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
NOTICE:  OLD: (3,2,bye)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
NOTICE:  OLD: (4,11,"bye remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (1,1,hi)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (2,10,"hi remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (3,2,bye)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (4,11,"bye remote")
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = AFTER, level = STATEMENT
--Testcase 962:
insert into rem1_a_child(f1, f2) values(1,'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,1,insert)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,1,insert)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--Testcase 963:
update rem1_a_child set f2  = 'update' where f1 = 1;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (5,1,insert),NEW: (5,1,update)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (5,1,insert),NEW: (5,1,update)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
--Testcase 964:
update rem1_a_child set f2 = f2 || f2;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (5,1,update),NEW: (5,1,updateupdate)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (5,1,update),NEW: (5,1,updateupdate)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
truncate rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = TRUNCATE, when = BEFORE, level = STATEMENT
NOTICE:  trigger_func(<NULL>) called: action = TRUNCATE, when = AFTER, level = STATEMENT
-- cleanup
--Testcase 965:
DROP TRIGGER trig_row_before ON rem1_a_child;
--Testcase 966:
DROP TRIGGER trig_row_after ON rem1_a_child;
--Testcase 967:
DROP TRIGGER trig_stmt_before ON rerem1_a_childm1;
ERROR:  relation "rerem1_a_childm1" does not exist
--Testcase 968:
DROP TRIGGER trig_stmt_after ON rem1_a_child;
--Testcase 969:
DELETE from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
-- Test multiple AFTER ROW triggers on a foreign table
--Testcase 970:
CREATE TRIGGER trig_row_after1
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 971:
CREATE TRIGGER trig_row_after2
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 972:
insert into rem1_a_child(f1, f2) values(1,'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,1,insert)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,1,insert)
--Testcase 973:
update rem1_a_child set f2  = 'update' where f1 = 1;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (1,1,insert),NEW: (1,1,update)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (1,1,insert),NEW: (1,1,update)
--Testcase 974:
update rem1_a_child set f2 = f2 || f2;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (1,1,update),NEW: (1,1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (1,1,update),NEW: (1,1,updateupdate)
--Testcase 975:
delete from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (1,1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (1,1,updateupdate)
-- cleanup
--Testcase 976:
DROP TRIGGER trig_row_after1 ON rem1_a_child;
--Testcase 977:
DROP TRIGGER trig_row_after2 ON rem1_a_child;
-- Test WHEN conditions
--Testcase 978:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 979:
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
--Testcase 980:
INSERT INTO rem1_a_child(f1, f2) values(1, 'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
--Testcase 981:
UPDATE rem1_a_child set f2 = 'test';
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
-- Insert or update matching: triggers are fired
--Testcase 982:
INSERT INTO rem1_a_child(f1, f2) values(2, 'update');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,2,update)
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON rem1_a_child
NOTICE:  NEW: (,2,update)
--Testcase 983:
UPDATE rem1_a_child set f2 = 'update update' where f1 = '2';
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (3,2,update),NEW: (3,2,"update update")
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
NOTICE:  OLD: (3,2,update),NEW: (3,2,"update update")
--Testcase 984:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_a_child
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 985:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_a_child
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
--Testcase 986:
DELETE FROM rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
NOTICE:  OLD: (3,2,"update update")
NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON rem1_a_child
NOTICE:  OLD: (3,2,"update update")
-- cleanup
--Testcase 987:
DROP TRIGGER trig_row_before_insupd ON rem1_a_child;
--Testcase 988:
DROP TRIGGER trig_row_after_insupd ON rem1_a_child;
--Testcase 989:
DROP TRIGGER trig_row_before_delete ON rem1_a_child;
--Testcase 990:
DROP TRIGGER trig_row_after_delete ON rem1_a_child;
-- MySQL FDW does not support RETURNING
-- Test various RETURN statements in BEFORE triggers.
--Testcase 530:
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
-- CREATE TRIGGER trig_row_before_insupd
-- BEFORE INSERT OR UPDATE ON rem1
-- FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- -- The new values should have 'triggered' appended
-- INSERT INTO rem1(f1, f2) values(1, 'insert');
-- SELECT * from loc1;
-- INSERT INTO rem1(f1, f2) values(2, 'insert') RETURNING f2;
-- SELECT * from loc1;
-- UPDATE rem1 set f2 = '';
-- SELECT * from loc1;
-- UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
-- SELECT * from loc1;
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1 set f1 = 10;          -- all columns should be transmitted
-- UPDATE rem1 set f1 = 10;
-- SELECT * from loc1;
-- DELETE FROM rem1;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
-- CREATE TRIGGER trig_row_before_insupd2
-- BEFORE INSERT OR UPDATE ON rem1
-- FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- INSERT INTO rem1(f1, f2) values(1, 'insert');
-- SELECT * from loc1;
-- INSERT INTO rem1(f1, f2) values(2, 'insert') RETURNING f2;
-- SELECT * from loc1;
-- UPDATE rem1 set f2 = '';
-- SELECT * from loc1;
-- UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
-- SELECT * from loc1;
-- DROP TRIGGER trig_row_before_insupd ON rem1;
-- DROP TRIGGER trig_row_before_insupd2 ON rem1;
--Testcase 991:
DELETE from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
--Testcase 992:
INSERT INTO rem1_a_child(f1, f2) VALUES (1, 'test');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
-- Test with a trigger returning NULL
--Testcase 531:
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
--Testcase 993:
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
--Testcase 994:
INSERT INTO rem1_a_child(f1, f2) VALUES (2, 'test2');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
--Testcase 995:
SELECT * from loc1;
 id | f1 |  f2  | spdurl  
----+----+------+---------
  4 |  1 | test | /node1/
(1 row)

--Testcase 996:
UPDATE rem1_a_child SET f2 = 'test2';
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
--Testcase 997:
SELECT * from loc1;
 id | f1 |  f2  | spdurl  
----+----+------+---------
  4 |  1 | test | /node1/
(1 row)

--Testcase 998:
DELETE from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
--Testcase 999:
SELECT * from loc1;
 id | f1 |  f2  | spdurl  
----+----+------+---------
  4 |  1 | test | /node1/
(1 row)

--Testcase 1000:
DROP TRIGGER trig_null ON rem1_a_child;
--Testcase 1001:
DELETE from rem1_a_child;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
-- Cannot create trigger on remote table at runtime
-- Test a combination of local and remote triggers
-- CREATE TRIGGER trig_row_before
-- BEFORE INSERT OR UPDATE OR DELETE ON rem1
-- FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- CREATE TRIGGER trig_row_after
-- AFTER INSERT OR UPDATE OR DELETE ON rem1
-- FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1
-- FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- INSERT INTO rem1(f2) VALUES ('test');
-- UPDATE rem1 SET f2 = 'testo';
-- -- Test returning a system attribute
-- INSERT INTO rem1(f2) VALUES ('test') RETURNING ctid;
-- cleanup
-- DROP TRIGGER trig_row_before ON rem1;
-- DROP TRIGGER trig_row_after ON rem1;
-- DROP TRIGGER trig_local_before ON loc1;
-- Test direct foreign table modification functionality
--Testcase 863:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 864:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child WHERE false;     -- currently can't be pushed down
                            QUERY PLAN                            
------------------------------------------------------------------
 Delete on public.rem1_a_child
   Remote query: DELETE FROM `mysql_fdw_post`.`loc1` WHERE id = ?
   ->  Result
         Output: id
         One-Time Filter: false
(5 rows)

-- Test with statement-level triggers
--Testcase 1002:
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
ERROR:  trigger "trig_stmt_before" for relation "rem1_a_child" already exists
--Testcase 1003:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1004:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1005:
DROP TRIGGER trig_stmt_before ON rem1_a_child;
--Testcase 1006:
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 1007:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1008:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1009:
DROP TRIGGER trig_stmt_after ON rem1_a_child;
-- Test with row-level ON INSERT triggers
--Testcase 1010:
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1011:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1012:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1013:
DROP TRIGGER trig_row_before_insert ON rem1_a_child;
--Testcase 1014:
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1015:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1016:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1017:
DROP TRIGGER trig_row_after_insert ON rem1_a_child;
-- Test with row-level ON UPDATE triggers
--Testcase 1018:
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1019:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can't be pushed down
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Update on public.rem1_a_child
   Remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f1` = ?, `f2` = ? WHERE id = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: ''::text, id, rem1_a_child.*
         Remote query: SELECT `id`, `f1`, `f2` FROM `mysql_fdw_post`.`loc1` FOR UPDATE
(5 rows)

--Testcase 1020:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1021:
DROP TRIGGER trig_row_before_update ON rem1_a_child;
--Testcase 1022:
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1023:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can't be pushed down
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Update on public.rem1_a_child
   Remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ? WHERE id = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: ''::text, id, rem1_a_child.*
         Remote query: SELECT `id`, `f1`, `f2` FROM `mysql_fdw_post`.`loc1` FOR UPDATE
(5 rows)

--Testcase 1024:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                        QUERY PLAN                         
-----------------------------------------------------------
 Delete on public.rem1_a_child
   ->  Foreign Delete on public.rem1_a_child
         remote query: DELETE FROM `mysql_fdw_post`.`loc1`
(3 rows)

--Testcase 1025:
DROP TRIGGER trig_row_after_update ON rem1_a_child;
-- Test with row-level ON DELETE triggers
--Testcase 1026:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1027:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1028:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can't be pushed down
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Delete on public.rem1_a_child
   Remote query: DELETE FROM `mysql_fdw_post`.`loc1` WHERE id = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: id, rem1_a_child.*
         Remote query: SELECT `id`, `f1`, `f2` FROM `mysql_fdw_post`.`loc1` FOR UPDATE
(5 rows)

--Testcase 1029:
DROP TRIGGER trig_row_before_delete ON rem1_a_child;
--Testcase 1030:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 1031:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1_a_child
   ->  Foreign Update on public.rem1_a_child
         remote query: UPDATE `mysql_fdw_post`.`loc1` SET `f2` = ''
(3 rows)

--Testcase 1032:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can't be pushed down
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Delete on public.rem1_a_child
   Remote query: DELETE FROM `mysql_fdw_post`.`loc1` WHERE id = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: id, rem1_a_child.*
         Remote query: SELECT `id`, `f1`, `f2` FROM `mysql_fdw_post`.`loc1` FOR UPDATE
(5 rows)

--Testcase 1033:
DROP TRIGGER trig_row_after_delete ON rem1_a_child;
-- ===================================================================
-- test inheritance features
-- ===================================================================
--Testcase 532:
CREATE TABLE a (aa TEXT);
--Testcase 533:
CREATE TABLE loct (aa TEXT, bb TEXT);
--Testcase 534:
ALTER TABLE a SET (autovacuum_enabled = 'false');
--Testcase 535:
ALTER TABLE loct SET (autovacuum_enabled = 'false');
--Testcase 774:
CREATE FOREIGN TABLE b_a_child (bb TEXT) INHERITS (a)
  SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'loct');
--Testcase 536:
CREATE TABLE b (aa TEXT, bb TEXT, spdurl text)
   PARTITION BY LIST (spdurl);
--Testcase 775:
CREATE FOREIGN TABLE b_a PARTITION OF b FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 537:
INSERT INTO a(aa) VALUES('aaa');
--Testcase 538:
INSERT INTO a(aa) VALUES('aaaa');
--Testcase 539:
INSERT INTO a(aa) VALUES('aaaaa');
--Testcase 540:
INSERT INTO b_a_child(aa) VALUES('bbb');
--Testcase 541:
INSERT INTO b_a_child(aa) VALUES('bbbb');
--Testcase 542:
INSERT INTO b_a_child(aa) VALUES('bbbbb');
--Testcase 776:
SELECT tableoid::regclass, * FROM a;
 tableoid  |  aa   
-----------+-------
 a         | aaa
 a         | aaaa
 a         | aaaaa
 b_a_child | bbb
 b_a_child | bbbb
 b_a_child | bbbbb
(6 rows)

--Testcase 777:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb | spdurl  
----------+-------+----+---------
 b_a      | bbb   |    | /node1/
 b_a      | bbbb  |    | /node1/
 b_a      | bbbbb |    | /node1/
(3 rows)

--Testcase 778:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

--Testcase 543:
UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--Testcase 779:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | aaa
 a         | zzzzzz
 a         | zzzzzz
 b_a_child | bbb
 b_a_child | bbbb
 b_a_child | bbbbb
(6 rows)

--Testcase 780:
SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb | spdurl  
----------+-------+----+---------
 b_a      | bbb   |    | /node1/
 b_a      | bbbb  |    | /node1/
 b_a      | bbbbb |    | /node1/
(3 rows)

--Testcase 781:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 544:
UPDATE b_a_child SET aa = 'new';
--Testcase 782:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | aaa
 a         | zzzzzz
 a         | zzzzzz
 b_a_child | new
 b_a_child | new
 b_a_child | new
(6 rows)

--Testcase 783:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb | spdurl  
----------+-----+----+---------
 b_a      | new |    | /node1/
 b_a      | new |    | /node1/
 b_a      | new |    | /node1/
(3 rows)

--Testcase 784:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 545:
UPDATE a SET aa = 'newtoo';
--Testcase 785:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | newtoo
 a         | newtoo
 a         | newtoo
 b_a_child | newtoo
 b_a_child | newtoo
 b_a_child | newtoo
(6 rows)

--Testcase 786:
SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb | spdurl  
----------+--------+----+---------
 b_a      | newtoo |    | /node1/
 b_a      | newtoo |    | /node1/
 b_a      | newtoo |    | /node1/
(3 rows)

--Testcase 787:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

--Testcase 546:
DELETE FROM a;
--Testcase 788:
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 789:
SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb | spdurl 
----------+----+----+--------
(0 rows)

--Testcase 790:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 547:
DROP TABLE a CASCADE;
NOTICE:  drop cascades to foreign table b_a_child
--Testcase 548:
DROP TABLE loct;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--Testcase 549:
create table foo (f1 int, f2 int);
--Testcase 791:
create foreign table foo2_a_child (f3 int) inherits (foo)
  server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct1');
--Testcase 550:
create table foo2 (f3 int, spdurl text)
   PARTITION BY LIST (spdurl);
--Testcase 551:
CREATE FOREIGN TABLE foo2_a PARTITION OF foo2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 792:
create table bar (f1 int, f2 int);
--Testcase 793:
create foreign table bar2_a_child (f3 int) inherits (bar)
  server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct2');
--Testcase 552:
create table bar2 (f3 int, spdurl text)
  PARTITION BY LIST (spdurl);
--Testcase 794:
CREATE FOREIGN TABLE bar2_a PARTITION OF bar2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 553:
alter table foo set (autovacuum_enabled = 'false');
--Testcase 554:
alter table bar set (autovacuum_enabled = 'false');
--Testcase 555:
insert into foo values(1,1);
--Testcase 556:
insert into foo values(3,3);
--Testcase 557:
insert into foo2_a_child values(2,2,2);
--Testcase 558:
insert into foo2_a_child values(4,4,4);
--Testcase 559:
insert into bar values(1,11);
--Testcase 560:
insert into bar values(2,22);
--Testcase 561:
insert into bar values(6,66);
--Testcase 562:
insert into bar2_a_child values(3,33,33);
--Testcase 563:
insert into bar2_a_child values(4,44,44);
--Testcase 564:
insert into bar2_a_child values(7,77,77);
--Testcase 565:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for update;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2_a_child bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct2` FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct1`
(23 rows)

--Testcase 566:
select * from bar where f1 in (select f1 from foo) for update;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

--Testcase 567:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for share;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2_a_child bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct2` FOR SHARE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct1`
(23 rows)

--Testcase 568:
select * from bar where f1 in (select f1 from foo) for share;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

-- Check UPDATE with inherited target and an inherited source table
--Testcase 569:
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2_a_child bar_2
     Remote query: UPDATE `mysql_fdw_post`.`loct2` SET `f2` = ? WHERE f1 = ?
   ->  Hash Join
         Output: (bar.f2 + 100), foo.ctid, bar.tableoid, bar.ctid, (NULL::integer), (NULL::record), foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::integer, NULL::record
               ->  Foreign Scan on public.bar2_a_child bar_2
                     Output: bar_2.f2, bar_2.f1, bar_2.tableoid, NULL::tid, bar_2.f1, bar_2.*
                     Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct2` FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct1`
(25 rows)

--Testcase 570:
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--Testcase 571:
select tableoid::regclass, * from bar order by 1,2;
   tableoid   | f1 | f2  
--------------+----+-----
 bar          |  1 | 111
 bar          |  2 | 122
 bar          |  6 |  66
 bar2_a_child |  3 | 133
 bar2_a_child |  4 | 144
 bar2_a_child |  7 |  77
(6 rows)

-- Check UPDATE with inherited target and an appendrel subquery
--Testcase 572:
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2_a_child bar_2
     Remote query: UPDATE `mysql_fdw_post`.`loct2` SET `f2` = ? WHERE f1 = ?
   ->  Merge Join
         Output: (bar.f2 + 100), (ROW(foo.f1)), bar.tableoid, bar.ctid, (NULL::integer), (NULL::record)
         Merge Cond: (bar.f1 = foo.f1)
         ->  Sort
               Output: bar.f2, bar.f1, bar.tableoid, bar.ctid, (NULL::integer), (NULL::record)
               Sort Key: bar.f1
               ->  Append
                     ->  Seq Scan on public.bar bar_1
                           Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::integer, NULL::record
                     ->  Foreign Scan on public.bar2_a_child bar_2
                           Output: bar_2.f2, bar_2.f1, bar_2.tableoid, NULL::tid, bar_2.f1, bar_2.*
                           Remote query: SELECT `f1`, `f2`, `f3` FROM `mysql_fdw_post`.`loct2` FOR UPDATE
         ->  Sort
               Output: (ROW(foo.f1)), foo.f1
               Sort Key: foo.f1
               ->  Append
                     ->  Seq Scan on public.foo
                           Output: ROW(foo.f1), foo.f1
                     ->  Foreign Scan on public.foo2_a_child foo_1
                           Output: ROW(foo_1.f1), foo_1.f1
                           Remote query: SELECT `f1` FROM `mysql_fdw_post`.`loct1`
                     ->  Seq Scan on public.foo foo_2
                           Output: ROW((foo_2.f1 + 3)), (foo_2.f1 + 3)
                     ->  Foreign Scan on public.foo2_a_child foo_3
                           Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                           Remote query: SELECT `f1` FROM `mysql_fdw_post`.`loct1`
(30 rows)

--Testcase 573:
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
--Testcase 574:
select tableoid::regclass, * from bar order by 1,2;
   tableoid   | f1 | f2  
--------------+----+-----
 bar          |  1 | 211
 bar          |  2 | 222
 bar          |  6 | 166
 bar2_a_child |  3 | 233
 bar2_a_child |  4 | 244
 bar2_a_child |  7 | 177
(6 rows)

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
--truncate table foo2;
--Testcase 575:
delete from foo2_a_child;
truncate table only foo;
\set num_rows_foo 2000
--Testcase 576:
insert into foo2_a_child select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--Testcase 577:
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
--Testcase 578:
SET enable_hashjoin to false;
--Testcase 579:
SET enable_nestloop to false;
--alter foreign table foo2 options (use_remote_estimate 'true');
--create index i_loct1_f1 on loct1(f1);
--create index i_foo_f1 on foo(f1);
--analyze foo;
--analyze loct1;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 580:
explain (verbose, costs off)
	select foo.f1, foo2_a_child.f1 from foo join foo2_a_child on (foo.f1 = foo2_a_child.f1) order by foo.f2 offset 10 limit 10;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2_a_child.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2_a_child.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Join
               Output: foo.f1, foo2_a_child.f1, foo.f2
               Merge Cond: (foo.f1 = foo2_a_child.f1)
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.f1, foo_1.f2
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote query: SELECT `f1`, `f2` FROM `mysql_fdw_post`.`loct1` ORDER BY `f2` IS NULL ASC, `f2` ASC
               ->  Sort
                     Output: foo2_a_child.f1
                     Sort Key: foo2_a_child.f1
                     ->  Foreign Scan on public.foo2_a_child
                           Output: foo2_a_child.f1
                           Remote query: SELECT `f1` FROM `mysql_fdw_post`.`loct1`
(23 rows)

--Testcase 581:
select foo.f1, foo2_a_child.f1 from foo join foo2_a_child on (foo.f1 = foo2_a_child.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 20 | 20
 22 | 22
 24 | 24
 26 | 26
 28 | 28
 30 | 30
 32 | 32
 34 | 34
 36 | 36
 38 | 38
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 582:
explain (verbose, costs off)
	select foo.f1, foo2_a_child.f1 from foo left join foo2_a_child on (foo.f1 = foo2_a_child.f1) order by foo.f2 offset 10 limit 10;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2_a_child.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2_a_child.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Left Join
               Output: foo.f1, foo2_a_child.f1, foo.f2
               Merge Cond: (foo.f1 = foo2_a_child.f1)
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.f1, foo_1.f2
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote query: SELECT `f1`, `f2` FROM `mysql_fdw_post`.`loct1` ORDER BY `f2` IS NULL ASC, `f2` ASC
               ->  Sort
                     Output: foo2_a_child.f1
                     Sort Key: foo2_a_child.f1
                     ->  Foreign Scan on public.foo2_a_child
                           Output: foo2_a_child.f1
                           Remote query: SELECT `f1` FROM `mysql_fdw_post`.`loct1`
(23 rows)

--Testcase 583:
select foo.f1, foo2_a_child.f1 from foo left join foo2_a_child on (foo.f1 = foo2_a_child.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 10 | 10
 11 |   
 12 | 12
 13 |   
 14 | 14
 15 |   
 16 | 16
 17 |   
 18 | 18
 19 |   
(10 rows)

--Testcase 584:
RESET enable_hashjoin;
--Testcase 585:
RESET enable_nestloop;
-- mysql does not support transaction
-- -- Test that WHERE CURRENT OF is not supported
-- begin;
-- declare c cursor for select * from bar where f1 = 7;
-- fetch from c;
-- update bar set f2 = null where current of c;
-- rollback;
-- explain (verbose, costs off)
-- delete from foo where f1 < 5 returning *;
-- delete from foo where f1 < 5 returning *;
-- explain (verbose, costs off)
-- update bar set f2 = f2 + 100 returning *;
-- update bar set f2 = f2 + 100 returning *;
-- -- Test that UPDATE/DELETE with inherited target works with row-level triggers
-- CREATE TRIGGER trig_row_before
-- BEFORE UPDATE OR DELETE ON bar2
-- FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- CREATE TRIGGER trig_row_after
-- AFTER UPDATE OR DELETE ON bar2
-- FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- explain (verbose, costs off)
-- update bar set f2 = f2 + 100;
-- update bar set f2 = f2 + 100;
-- explain (verbose, costs off)
-- delete from bar where f2 < 400;
-- delete from bar where f2 < 400;
-- -- cleanup
-- drop table foo cascade;
-- drop table bar cascade;
-- drop table loct1;
-- drop table loct2;
-- -- Test pushing down UPDATE/DELETE joins to the remote server
-- create table parent (a int, b text);
-- create table loct1 (a int, b text);
-- create table loct2 (a int, b text);
-- create foreign table remt1 (a int, b text)
--   server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct1');
-- create foreign table remt2 (a int, b text)
--   server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct2');
-- alter foreign table remt1 inherit parent;
-- insert into remt1 values (1, 'foo');
-- insert into remt1 values (2, 'bar');
-- insert into remt2 values (1, 'foo');
-- insert into remt2 values (2, 'bar');
-- -- analyze remt1;
-- -- analyze remt2;
-- explain (verbose, costs off)
-- update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
-- update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
-- explain (verbose, costs off)
-- delete from parent using remt2 where parent.a = remt2.a returning parent;
-- delete from parent using remt2 where parent.a = remt2.a returning parent;
-- -- cleanup
-- drop foreign table remt1;
-- drop foreign table remt2;
-- drop table loct1;
-- drop table loct2;
-- drop table parent;
-- PGSpider Extension does not support INSERT/UPDATE/DELETE directly on
-- parent table, so we skip these test cases.
-- -- ===================================================================
-- -- test tuple routing for foreign-table partitions
-- -- ===================================================================
-- Test insert tuple routing
-- --Testcase 586:
-- create table itrtest (id int, a int, b text) partition by list (a);
-- --Testcase 587:
-- create foreign table remp1 (id int, a int check (a in (1)), b text) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct5');
-- --Testcase 588:
-- create foreign table remp2 (id int, b text, a int check (a in (2))) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct6');
-- --Testcase 589:
-- alter table itrtest attach partition remp1 for values in (1);
-- --Testcase 590:
-- alter table itrtest attach partition remp2 for values in (2);
-- --Testcase 591:
-- insert into itrtest(a, b) values (1, 'foo');
-- --Testcase 592:
-- insert into itrtest(a, b) values (1, 'bar') returning a, b;
-- --Testcase 593:
-- insert into itrtest(a, b) values (2, 'baz');
-- --Testcase 594:
-- insert into itrtest(a, b) values (2, 'qux') returning a, b;
-- --Testcase 595:
-- insert into itrtest(a, b) values (1, 'test1'), (2, 'test2') returning a, b;
-- --Testcase 596:
-- select tableoid::regclass, a, b FROM itrtest;
-- --Testcase 597:
-- select tableoid::regclass, a, b FROM remp1;
-- --Testcase 598:
-- select tableoid::regclass, a, b FROM remp2;
-- --Testcase 599:
-- delete from itrtest;
-- -- DO NOTHING without an inference specification is supported
-- --Testcase 600:
-- insert into itrtest values (1, 1, 'foo') on conflict do nothing returning *;
-- --Testcase 601:
-- insert into itrtest values (1, 1, 'foo') on conflict do nothing returning *;
-- -- But other cases are not supported
-- --Testcase 602:
-- insert into itrtest values (1, 1, 'bar') on conflict (a) do nothing;
-- --Testcase 603:
-- insert into itrtest values (1, 1, 'bar') on conflict (a) do update set b = excluded.b;
-- --Testcase 604:
-- select tableoid::regclass, * FROM itrtest;
-- --Testcase 605:
-- delete from itrtest;
-- -- Test that remote triggers work with insert tuple routing
-- --Testcase 606:
-- create function br_insert_trigfunc() returns trigger as $$
-- begin
-- 	new.b := new.b || ' triggered !';
-- 	return new;
-- end
-- $$ language plpgsql;
-- --Testcase 607:
-- create trigger remp1_br_insert_trigger before insert on remp1
-- 	for each row execute procedure br_insert_trigfunc();
-- --Testcase 608:
-- create trigger remp2_br_insert_trigger before insert on remp2
-- 	for each row execute procedure br_insert_trigfunc();
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 609:
-- insert into itrtest(a, b) values (1, 'foo') returning *;
-- --Testcase 610:
-- insert into itrtest(a, b) values (2, 'qux') returning *;
-- --Testcase 611:
-- insert into itrtest(a, b) values (1, 'test1'), (2, 'test2') returning *;
-- --Testcase 612:
-- with result as (insert into itrtest(a, b) values (1, 'test1'), (2, 'test2') returning *) select * from result;
-- --Testcase 613:
-- drop trigger remp1_br_insert_trigger on remp1;
-- --Testcase 614:
-- drop trigger remp2_br_insert_trigger on remp2;
-- --Testcase 615:
-- drop foreign table remp1;
-- --Testcase 616:
-- drop foreign table remp2;
-- --Testcase 617:
-- drop table itrtest;
-- -- Test update tuple routing
-- --Testcase 618:
-- create table utrtest (id int, a int, b text) partition by list (a);
-- --Testcase 619:
-- create foreign table remp (id int, a int check (a in (1)), b text) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct10');
-- --Testcase 620:
-- create table locp (id int, a int check (a in (2)), b text);
-- --Testcase 621:
-- alter table utrtest attach partition remp for values in (1);
-- --Testcase 622:
-- alter table utrtest attach partition locp for values in (2);
-- --Testcase 623:
-- insert into utrtest values (1, 1, 'foo');
-- --Testcase 624:
-- insert into utrtest values (2, 2, 'qux');
-- --Testcase 625:
-- select tableoid::regclass, a, b FROM utrtest;
-- --Testcase 626:
-- select tableoid::regclass, a, b FROM remp;
-- --Testcase 627:
-- select tableoid::regclass, a, b FROM locp;
-- -- It's not allowed to move a row from a partition that is foreign to another
-- --Testcase 628:
-- update utrtest set a = 2 where b = 'foo';
-- -- But the reverse is allowed
-- --Testcase 629:
-- update utrtest set a = 1 where b = 'qux';
-- --Testcase 630:
-- select a, b from utrtest where b = 'qux';
-- --Testcase 631:
-- select tableoid::regclass, a, b FROM utrtest;
-- --Testcase 632:
-- select tableoid::regclass, a, b FROM remp;
-- --Testcase 633:
-- select tableoid::regclass, a, b FROM locp;
-- -- The executor should not let unexercised FDWs shut down
-- --Testcase 634:
-- update utrtest set a = 1 where b = 'foo';
-- -- Test that remote triggers work with update tuple routing
-- --Testcase 635:
-- create trigger remp_br_insert_trigger before insert on remp
-- 	for each row execute procedure br_insert_trigfunc();
-- --Testcase 636:
-- delete from utrtest;
-- --Testcase 637:
-- insert into utrtest values (1, 2, 'qux');
-- -- Check case where the foreign partition is a subplan target rel
-- --Testcase 638:
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 1 or a = 2;
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 639:
-- update utrtest set a = 1 where a = 1 or a = 2;
-- --Testcase 640:
-- select a, b from utrtest;
-- --Testcase 641:
-- delete from utrtest;
-- --Testcase 642:
-- insert into utrtest values (1, 2, 'qux');
-- -- Check case where the foreign partition isn't a subplan target rel
-- --Testcase 643:
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 2;
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 644:
-- update utrtest set a = 1 where a = 2;
-- --Testcase 645:
-- select a, b from utrtest;
-- --Testcase 646:
-- drop trigger remp_br_insert_trigger on remp;
-- -- We can move rows to a foreign partition that has been updated already,
-- -- but can't move rows to a foreign partition that hasn't been updated yet
-- --Testcase 647:
-- delete from utrtest;
-- --Testcase 648:
-- insert into utrtest values (1, 1, 'foo');
-- --Testcase 649:
-- insert into utrtest values (2, 2, 'qux');
-- -- Test the former case:
-- -- with a direct modification plan
-- --Testcase 650:
-- explain (verbose, costs off)
-- update utrtest set a = 1;
-- --Testcase 651:
-- update utrtest set a = 1;
-- --Testcase 652:
-- select a, b from utrtest;
-- --Testcase 653:
-- delete from utrtest;
-- --Testcase 654:
-- insert into utrtest(id, a, b) values (3, 1, 'foo');
-- --Testcase 655:
-- insert into utrtest(id, a, b) values (4, 2, 'qux');
-- -- with a non-direct modification plan
-- --Testcase 656:
-- explain (verbose, costs off)
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x;
-- --Testcase 657:
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x;
-- --Testcase 658:
-- select a, b from utrtest;
-- -- Change the definition of utrtest so that the foreign partition get updated
-- -- after the local partition
-- --Testcase 659:
-- delete from utrtest;
-- --Testcase 660:
-- alter table utrtest detach partition remp;
-- --Testcase 661:
-- drop foreign table remp;
-- --Testcase 662:
-- create foreign table remp (id int, a int check (a in (3)), b text) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct11');
-- --Testcase 663:
-- alter table utrtest attach partition remp for values in (3);
-- --Testcase 664:
-- insert into utrtest values (1, 2, 'qux');
-- --Testcase 665:
-- insert into utrtest values (2, 3, 'xyzzy');
-- -- Test the latter case:
-- -- with a direct modification plan
-- --Testcase 666:
-- explain (verbose, costs off)
-- update utrtest set a = 3;
-- --Testcase 667:
-- update utrtest set a = 3; -- ERROR
-- -- with a non-direct modification plan
-- --Testcase 668:
-- explain (verbose, costs off)
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x;
-- --Testcase 669:
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x; -- ERROR
-- --Testcase 670:
-- drop foreign table remp;
-- --Testcase 671:
-- drop table utrtest;
-- -- Test copy tuple routing
-- --Testcase 672:
-- create table ctrtest (id int, a int, b text) partition by list (a);
-- --Testcase 673:
-- create foreign table remp1 (id int, a int check (a in (1)), b text) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct12');
-- --Testcase 674:
-- create foreign table remp2 (id int, b text, a int check (a in (2))) server mysql_svr options (dbname 'mysql_fdw_post', table_name 'loct13');
-- --Testcase 675:
-- alter table ctrtest attach partition remp1 for values in (1);
-- --Testcase 676:
-- alter table ctrtest attach partition remp2 for values in (2);
-- copy ctrtest from stdin;
-- 1	1	foo
-- 2	2	qux
-- \.
-- --Testcase 677:
-- select tableoid::regclass, * FROM ctrtest;
-- --Testcase 678:
-- select tableoid::regclass, * FROM remp1;
-- --Testcase 679:
-- select tableoid::regclass, * FROM remp2;
-- -- Copying into foreign partitions directly should work as well
-- copy remp1 from stdin;
-- 3	1	bar
-- \.
-- --Testcase 680:
-- select tableoid::regclass, * FROM remp1;
-- delete from ctrtest;
-- -- Test copy tuple routing with the batch_size option enabled
-- alter server mysql_svr options (add batch_size '2');
-- copy ctrtest from stdin;
-- 1	1	foo
-- 2	1	bar
-- 3	2	baz
-- 4	2	qux
-- 5	1	test1
-- 6	2	test2
-- \.
-- select tableoid::regclass, * FROM ctrtest;
-- select tableoid::regclass, * FROM remp1;
-- select tableoid::regclass, * FROM remp2;
-- delete from ctrtest;
-- alter server mysql_svr options (drop batch_size);
-- --Testcase 681:
-- drop foreign table remp1;
-- --Testcase 682:
-- drop foreign table remp2;
-- --Testcase 683:
-- drop table ctrtest;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
--Testcase 795:
create foreign table rem2_a_child (id int, f1 int, f2 text) server mysql_svr options(dbname 'mysql_fdw_post', table_name 'loc2');
--Testcase 684:
create table rem2 (id int, f1 int, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 796:
CREATE FOREIGN TABLE rem2_a PARTITION OF rem2 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- Test basic functionality
copy rem2_a_child from stdin;
--Testcase 685:
select * from rem2;
 id | f1 | f2  | spdurl  
----+----+-----+---------
  1 |  1 | foo | /node1/
  2 |  2 | bar | /node1/
(2 rows)

--Testcase 686:
delete from rem2_a_child;
-- Test check constraints
--Testcase 797:
create foreign table rem4_a_child (id int, f1 int, f2 text) server mysql_svr options(dbname 'mysql_fdw_post', table_name 'loc4');
--Testcase 687:
create table rem4 (id int, f1 int, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 798:
CREATE FOREIGN TABLE rem4_a PARTITION OF rem4 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 688:
alter foreign table rem4_a_child add constraint rem4_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
copy rem4_a_child from stdin;
copy rem4_a_child from stdin; -- ERROR
ERROR:  mysql_fdw: failed to execute the MySQL query: 
Check constraint 'loc4_f1positive' is violated.
--Testcase 689:
select * from rem4;
 id | f1 | f2  | spdurl  
----+----+-----+---------
  1 |  1 | foo | /node1/
  2 |  2 | bar | /node1/
(2 rows)

--Testcase 690:
alter foreign table rem4_a_child drop constraint rem4_f1positive;
--Testcase 691:
drop foreign table rem4_a_child;
-- Test local triggers
--Testcase 692:
create trigger trig_stmt_before before insert on rem2_a_child
	for each statement execute procedure trigger_func();
--Testcase 693:
create trigger trig_stmt_after after insert on rem2_a_child
	for each statement execute procedure trigger_func();
--Testcase 694:
create trigger trig_row_before before insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 695:
create trigger trig_row_after after insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
copy rem2_a_child from stdin;
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2_a_child
NOTICE:  NEW: (1,1,foo)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2_a_child
NOTICE:  NEW: (2,2,bar)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2_a_child
NOTICE:  NEW: (1,1,foo)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2_a_child
NOTICE:  NEW: (2,2,bar)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--Testcase 696:
select * from rem2;
 id | f1 | f2  | spdurl  
----+----+-----+---------
  1 |  1 | foo | /node1/
  2 |  2 | bar | /node1/
(2 rows)

--Testcase 697:
drop trigger trig_row_before on rem2_a_child;
--Testcase 698:
drop trigger trig_row_after on rem2_a_child;
--Testcase 699:
drop trigger trig_stmt_before on rem2_a_child;
--Testcase 700:
drop trigger trig_stmt_after on rem2_a_child;
--Testcase 701:
delete from rem2_a_child;
--Testcase 702:
create trigger trig_row_before_insert before insert on rem2_a_child
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2_a_child from stdin;
--Testcase 703:
select * from rem2;
 id | f1 |       f2        | spdurl  
----+----+-----------------+---------
  1 |  1 | foo triggered ! | /node1/
  2 |  2 | bar triggered ! | /node1/
(2 rows)

--Testcase 704:
drop trigger trig_row_before_insert on rem2_a_child;
--Testcase 705:
delete from rem2_a_child;
--Testcase 706:
create trigger trig_null before insert on rem2_a_child
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2_a_child from stdin;
--Testcase 707:
select * from rem2;
 id | f1 | f2 | spdurl 
----+----+----+--------
(0 rows)

--Testcase 708:
drop trigger trig_null on rem2_a_child;
--Testcase 709:
delete from rem2_a_child;
-- Cannot create trigger on remote table at runtime
-- -- Test remote triggers
-- create trigger trig_row_before_insert before insert on loc2
-- 	for each row execute procedure trig_row_before_insupdate();
-- -- The new values are concatenated with ' triggered !'
-- copy rem2 from stdin;
-- 1	1	foo
-- 2	2	bar
-- \.
-- select * from rem2;
-- drop trigger trig_row_before_insert on loc2;
-- delete from rem2;
-- create trigger trig_null before insert on loc2
-- 	for each row execute procedure trig_null();
-- -- Nothing happens
-- copy rem2 from stdin;
-- 1	1	foo
-- 2	2	bar
-- \.
-- select * from rem2;
-- drop trigger trig_null on loc2;
-- delete from rem2;
-- Cannot create trigger on remote table at runtime
-- Test a combination of local and remote triggers
-- create trigger rem2_trig_row_before before insert on rem2
-- 	for each row execute procedure trigger_data(23,'skidoo');
-- create trigger rem2_trig_row_after after insert on rem2
-- 	for each row execute procedure trigger_data(23,'skidoo');
-- create trigger loc2_trig_row_before_insert before insert on loc2
-- 	for each row execute procedure trig_row_before_insupdate();
-- copy rem2 from stdin;
-- 1	1	foo
-- 2	2	bar
-- \.
-- select * from rem2;
-- drop trigger rem2_trig_row_before on rem2;
-- drop trigger rem2_trig_row_after on rem2;
-- drop trigger loc2_trig_row_before_insert on loc2;
-- delete from rem2;
-- test COPY FROM with foreign table created in the same transaction
begin;
--Testcase 799:
create foreign table rem3_a_child (id int, f1 int, f2 text)
	server mysql_svr options(dbname 'mysql_fdw_post', table_name 'loc3');
--Testcase 710:
create table rem3 (id int, f1 int, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 807:
CREATE FOREIGN TABLE rem3_a PARTITION OF rem3 FOR VALUES IN ('/node1/') SERVER spdsrv;
copy rem3_a_child from stdin;
commit;
--Testcase 711:
select * from rem3;
 id | f1 | f2  | spdurl  
----+----+-----+---------
  1 |  1 | foo | /node1/
  2 |  2 | bar | /node1/
(2 rows)

--Testcase 712:
drop foreign table rem3_a_child;
-- Test COPY FROM with the batch_size option enabled
alter server mysql_svr options (add batch_size '2');
-- Test basic functionality
copy rem2_a_child from stdin;
--Testcase 1034:
select * from rem2;
 id | f1 | f2  | spdurl  
----+----+-----+---------
  1 |  1 | foo | /node1/
  2 |  2 | bar | /node1/
  3 |  3 | baz | /node1/
(3 rows)

--Testcase 1035:
delete from rem2_a_child;
-- Cannot alter remote table at runtime.
-- Test check constraints
-- alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
-- alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
-- copy rem2 from stdin;
-- 1	1	foo
-- 2	2	bar
-- 3	3	baz
-- \.
-- copy rem2 from stdin; -- ERROR
-- 4	-1	xyzzy
-- \.
-- select * from rem2;
-- alter foreign table rem2 drop constraint rem2_f1positive;
-- alter table loc2 drop constraint loc2_f1positive;
-- delete from rem2;
-- Cannot create trigger on remote table at runtime.
-- Test remote triggers
-- create trigger trig_row_before_insert before insert on loc2
-- 	for each row execute procedure trig_row_before_insupdate();
-- -- The new values are concatenated with ' triggered !'
-- copy rem2 from stdin;
-- 1	foo
-- 2	bar
-- 3	baz
-- \.
-- select * from rem2;
-- drop trigger trig_row_before_insert on loc2;
-- delete from rem2;
-- create trigger trig_null before insert on loc2
-- 	for each row execute procedure trig_null();
-- -- Nothing happens
-- copy rem2 from stdin;
-- 1	foo
-- 2	bar
-- 3	baz
-- \.
-- select * from rem2;
-- drop trigger trig_null on loc2;
-- delete from rem2;
-- Cannot alter remote table at runtime.
-- Check with zero-column foreign table; batch insert will be disabled
-- alter table loc2 drop column f1;
-- alter table loc2 drop column f2;
-- alter table rem2 drop column f1;
-- alter table rem2 drop column f2;
-- copy rem2 from stdin;
-- \.
-- select * from rem2;
-- delete from rem2;
alter server mysql_svr options (drop batch_size);
-- ===================================================================
-- test for TRUNCATE
-- Mysql only support simple truncate, other options canot suport
-- ===================================================================
--CREATE TABLE tru_rtable0 (id int primary key);
-- CREATE FOREIGN TABLE tru_ftable (id int)
--        SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'tru_rtable', batch_size '10');
-- INSERT INTO tru_ftable (SELECT x FROM generate_series(1,10) x);
-- CREATE FOREIGN TABLE tru_ftable2 (id int)
--        SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'tru_rtable2', batch_size '10');
-- CREATE TABLE tru_ptable (id int) PARTITION BY HASH(id);
-- CREATE TABLE tru_ptable__p0 PARTITION OF tru_ptable
--                            FOR VALUES WITH (MODULUS 2, REMAINDER 0);
-- CREATE TABLE tru_rtable1 (id int primary key);
-- CREATE FOREIGN TABLE tru_ftable__p1 PARTITION OF tru_ptable
--                                    FOR VALUES WITH (MODULUS 2, REMAINDER 1)
--        SERVER mysql_svr OPTIONS (table_name 'tru_rtable1');
-- INSERT INTO tru_ptable (SELECT x FROM generate_series(11,20) x);
-- CREATE TABLE tru_pk_table(id int primary key);
-- CREATE TABLE tru_fk_table(fkey int references tru_pk_table(id));
-- INSERT INTO tru_pk_table (SELECT x FROM generate_series(1,10) x);
-- INSERT INTO tru_fk_table (SELECT x % 10 + 1 FROM generate_series(5,25) x);
-- CREATE FOREIGN TABLE tru_pk_ftable (id int)
--        SERVER mysql_svr OPTIONS (table_name 'tru_pk_table');
-- CREATE TABLE tru_rtable_parent (id int);
-- CREATE TABLE tru_rtable_child (id int);
-- CREATE FOREIGN TABLE tru_ftable_parent (id int)
--        SERVER mysql_svr OPTIONS (table_name 'tru_rtable_parent');
-- CREATE FOREIGN TABLE tru_ftable_child () INHERITS (tru_ftable_parent)
--        SERVER mysql_svr OPTIONS (table_name 'tru_rtable_child');
-- INSERT INTO tru_rtable_parent (SELECT x FROM generate_series(1,8) x);
-- INSERT INTO tru_rtable_child  (SELECT x FROM generate_series(10, 18) x);
-- normal truncate
-- SELECT sum(id) FROM tru_ftable;        -- 55
-- TRUNCATE tru_ftable;
-- -- SELECT count(*) FROM tru_rtable0;		-- 0
-- SELECT count(*) FROM tru_ftable;		-- 0
-- -- 'truncatable' option
-- ALTER SERVER mysql_svr OPTIONS (ADD truncatable 'false');
-- TRUNCATE tru_ftable;			-- error
-- ALTER FOREIGN TABLE tru_ftable OPTIONS (ADD truncatable 'true');
-- TRUNCATE tru_ftable;			-- accepted:
-- ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
-- TRUNCATE tru_ftable;			-- error
-- ALTER SERVER mysql_svr OPTIONS (DROP truncatable);
-- ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
-- TRUNCATE tru_ftable;			-- error
-- ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'true');
-- TRUNCATE tru_ftable;			-- accepted
-- partitioned table with both local and foreign tables as partitions
-- SELECT sum(id) FROM tru_ptable;        -- 155
-- TRUNCATE tru_ptable;
-- SELECT count(*) FROM tru_ptable;		-- 0
-- SELECT count(*) FROM tru_ptable__p0;	-- 0
-- SELECT count(*) FROM tru_ftable__p1;	-- 0
-- SELECT count(*) FROM tru_rtable1;		-- 0
-- 'CASCADE' option
--SELECT sum(id) FROM tru_pk_ftable;      -- 55
--TRUNCATE tru_pk_ftable;	-- failed by FK reference
--TRUNCATE tru_pk_ftable CASCADE;
--SELECT count(*) FROM tru_pk_ftable;    -- 0
--SELECT count(*) FROM tru_fk_table;		-- also truncated,0
-- truncate two tables at a command
-- INSERT INTO tru_ftable (SELECT x FROM generate_series(1,8) x);
-- INSERT INTO tru_ftable2 (SELECT x FROM generate_series(3,10) x);
-- SELECT count(*) from tru_ftable; -- 8
-- SELECT count(*) from tru_ftable2; -- 8
-- TRUNCATE tru_ftable, tru_ftable2; --CASCADE;
-- SELECT count(*) from tru_ftable; -- 0
-- SELECT count(*) from tru_ftable2; -- 0
-- truncate with ONLY clause
-- Since ONLY is specified, the table tru_ftable_child that inherits
-- tru_ftable_parent locally is not truncated.
-- TRUNCATE ONLY tru_ftable_parent;
-- SELECT sum(id) FROM tru_ftable_parent;  -- 126
-- TRUNCATE tru_ftable_parent;
-- SELECT count(*) FROM tru_ftable_parent; -- 0
-- in case when remote table has inherited children
-- CREATE TABLE tru_rtable0_child () INHERITS (tru_rtable0);
-- INSERT INTO tru_rtable0 (SELECT x FROM generate_series(5,9) x);
-- INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(10,14) x);
-- SELECT sum(id) FROM tru_ftable;   -- 95
-- Both parent and child tables in the foreign server are truncated
-- even though ONLY is specified because ONLY has no effect
-- when truncating a foreign table.
-- TRUNCATE ONLY tru_ftable;
-- SELECT count(*) FROM tru_ftable;   -- 0
-- INSERT INTO tru_rtable0 (SELECT x FROM generate_series(21,25) x);
-- INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(26,30) x);
-- SELECT sum(id) FROM tru_ftable;		-- 255
-- TRUNCATE tru_ftable;			-- truncate both of parent and child
-- SELECT count(*) FROM tru_ftable;    -- 0
-- cleanup
-- DROP FOREIGN TABLE tru_ftable;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
-- CREATE SCHEMA import_source;
-- CREATE TABLE import_source.t1 (c1 int, c2 varchar NOT NULL);
-- CREATE TABLE import_source.t2 (c1 int default 42, c2 varchar NULL, c3 text collate "POSIX");
-- CREATE TYPE typ1 AS (m1 int, m2 varchar);
-- CREATE TABLE import_source.t3 (c1 timestamptz default now(), c2 typ1);
-- CREATE TABLE import_source."x 4" (c1 float8, "C 2" text, c3 varchar(42));
-- CREATE TABLE import_source."x 5" (c1 float8);
-- ALTER TABLE import_source."x 5" DROP COLUMN c1;
-- CREATE TABLE import_source."x 6" (c1 int, c2 int generated always as (c1 * 2) stored);
-- CREATE TABLE import_source.t4 (c1 int) PARTITION BY RANGE (c1);
-- CREATE TABLE import_source.t4_part PARTITION OF import_source.t4
--   FOR VALUES FROM (1) TO (100);
--CREATE TABLE import_source.t4_part2 PARTITION OF import_source.t4
--  FOR VALUES FROM (100) TO (200);
-- CREATE SCHEMA import_dest1;
-- IMPORT FOREIGN SCHEMA import_source FROM SERVER mysql_svr INTO import_dest1;
-- \det+ import_dest1.*
-- \d import_dest1.*
-- -- Options
-- CREATE SCHEMA import_dest2;
-- IMPORT FOREIGN SCHEMA import_source FROM SERVER mysql_svr INTO import_dest2
--   OPTIONS (import_default 'true');
-- \det+ import_dest2.*
-- \d import_dest2.*
-- CREATE SCHEMA import_dest3;
-- IMPORT FOREIGN SCHEMA import_source FROM SERVER mysql_svr INTO import_dest3
--   OPTIONS (import_collate 'false', import_generated 'false', import_not_null 'false');
-- \det+ import_dest3.*
-- \d import_dest3.*
-- -- Check LIMIT TO and EXCEPT
-- CREATE SCHEMA import_dest4;
-- IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch, t4_part)
--   FROM SERVER mysql_svr INTO import_dest4;
-- \det+ import_dest4.*
-- IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch, t4_part)
--   FROM SERVER mysql_svr INTO import_dest4;
-- \det+ import_dest4.*
-- -- Assorted error cases
-- IMPORT FOREIGN SCHEMA import_source FROM SERVER mysql_svr INTO import_dest4;
-- IMPORT FOREIGN SCHEMA nonesuch FROM SERVER mysql_svr INTO import_dest4;
-- IMPORT FOREIGN SCHEMA nonesuch FROM SERVER mysql_svr INTO notthere;
-- IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
-- -- Check case of a type present only on the remote server.
-- -- We can fake this by dropping the type locally in our transaction.
-- CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
-- CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");
-- CREATE SCHEMA import_dest5;
-- BEGIN;
-- DROP TYPE "Colors" CASCADE;
-- IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
--   FROM SERVER mysql_svr INTO import_dest5;  -- ERROR
-- ROLLBACK;
-- mysql_fdw does not support fetch_size option.
-- BEGIN;
-- CREATE SERVER fetch101 FOREIGN DATA WRAPPER mysql_fdw OPTIONS( fetch_size '101' );
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=101'];
-- ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=101'];
-- SELECT count(*)
-- FROM pg_foreign_server
-- WHERE srvname = 'fetch101'
-- AND srvoptions @> array['fetch_size=202'];
-- CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=30000'];
-- ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=30000'];
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=60000'];
-- ROLLBACK;
-- mysql_fdw does not support PARTITION in local table.
-- -- ===================================================================
-- -- test partitionwise joins
-- -- ===================================================================
-- SET enable_partitionwise_join=on;
-- CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
-- CREATE TABLE fprt1_p1 (LIKE fprt1);
-- CREATE TABLE fprt1_p2 (LIKE fprt1);
-- ALTER TABLE fprt1_p1 SET (autovacuum_enabled = 'false');
-- ALTER TABLE fprt1_p2 SET (autovacuum_enabled = 'false');
-- INSERT INTO fprt1_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 2) i;
-- INSERT INTO fprt1_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 2) i;
-- CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
-- 	SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'fprt1_p1', use_remote_estimate 'true');
-- CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
-- 	SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', TABLE_NAME 'fprt1_p2');
-- ANALYZE fprt1;
-- ANALYZE fprt1_p1;
-- ANALYZE fprt1_p2;
-- CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
-- CREATE TABLE fprt2_p1 (LIKE fprt2);
-- CREATE TABLE fprt2_p2 (LIKE fprt2);
-- ALTER TABLE fprt2_p1 SET (autovacuum_enabled = 'false');
-- ALTER TABLE fprt2_p2 SET (autovacuum_enabled = 'false');
-- INSERT INTO fprt2_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 3) i;
-- INSERT INTO fprt2_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 3) i;
-- CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int)
-- 	SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'fprt2_p1', use_remote_estimate 'true');
-- ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
-- CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
-- 	SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'fprt2_p2', use_remote_estimate 'true');
-- ANALYZE fprt2;
-- ANALYZE fprt2_p1;
-- ANALYZE fprt2_p2;
-- -- inner join three tables
-- EXPLAIN (COSTS OFF)
-- SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
-- SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
-- -- left outer join + nullable clause
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
-- SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
-- -- with whole-row reference; partitionwise join does not apply
-- EXPLAIN (COSTS OFF)
-- SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
-- SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
-- -- join with lateral reference
-- EXPLAIN (COSTS OFF)
-- SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
-- SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
-- -- with PHVs, partitionwise join selected but no join pushdown
-- EXPLAIN (COSTS OFF)
-- SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
-- SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
-- -- test FOR UPDATE; partitionwise join does not apply
-- EXPLAIN (COSTS OFF)
-- SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
-- SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
-- RESET enable_partitionwise_join;
-- -- ===================================================================
-- -- test partitionwise aggregates
-- -- ===================================================================
-- CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);
-- CREATE TABLE pagg_tab_p1 (LIKE pagg_tab);
-- CREATE TABLE pagg_tab_p2 (LIKE pagg_tab);
-- CREATE TABLE pagg_tab_p3 (LIKE pagg_tab);
-- INSERT INTO pagg_tab_p1 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 10;
-- INSERT INTO pagg_tab_p2 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 20 and (i % 30) >= 10;
-- INSERT INTO pagg_tab_p3 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 30 and (i % 30) >= 20;
-- -- Create foreign partitions
-- CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'pagg_tab_p1');
-- CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'pagg_tab_p2');
-- CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'pagg_tab_p3');
-- ANALYZE pagg_tab;
-- ANALYZE fpagg_tab_p1;
-- ANALYZE fpagg_tab_p2;
-- ANALYZE fpagg_tab_p3;
-- -- When GROUP BY clause matches with PARTITION KEY.
-- -- Plan with partitionwise aggregates is disabled
-- SET enable_partitionwise_aggregate TO false;
-- EXPLAIN (COSTS OFF)
-- SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
-- -- Plan with partitionwise aggregates is enabled
-- SET enable_partitionwise_aggregate TO true;
-- EXPLAIN (COSTS OFF)
-- SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
-- SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
-- -- Check with whole-row reference
-- -- Should have all the columns in the target list for the given relation
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
-- SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
-- -- When GROUP BY clause does not match with PARTITION KEY.
-- EXPLAIN (COSTS OFF)
-- SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
-- -- ===================================================================
-- -- access rights and superuser
-- -- ===================================================================
-- -- Non-superuser cannot create a FDW without a password in the connstr
-- CREATE ROLE regress_nosuper NOSUPERUSER;
-- GRANT USAGE ON FOREIGN DATA WRAPPER mysql_fdw TO regress_nosuper;
-- SET ROLE regress_nosuper;
-- SHOW is_superuser;
-- -- This will be OK, we can create the FDW
-- DO $d$
--     BEGIN
--         EXECUTE $$CREATE SERVER mysql_svr_nopw FOREIGN DATA WRAPPER mysql_fdw
--             OPTIONS (dbname '$$||current_database()||$$',
--                      port '$$||current_setting('port')||$$'
--             )$$;
--     END;
-- $d$;
-- -- But creation of user mappings for non-superusers should fail
-- CREATE USER MAPPING FOR public SERVER mysql_svr_nopw;
-- CREATE USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw;
-- CREATE FOREIGN TABLE pg_temp.ft1_nopw (
-- 	c1 int NOT NULL,
-- 	c2 int NOT NULL,
-- 	c3 text,
-- 	c4 timestamptz,
-- 	c5 timestamp,
-- 	c6 varchar(10),
-- 	c7 char(10) default 'ft1',
-- 	c8 user_enum
-- ) SERVER mysql_svr_nopw OPTIONS (table_name 'ft1');
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- -- If we add a password to the connstr it'll fail, because we don't allow passwords
-- -- in connstrs only in user mappings.
-- ALTER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');
-- -- If we add a password for our user mapping instead, we should get a different
-- -- error because the password wasn't actually *used* when we run with trust auth.
-- --
-- -- This won't work with installcheck, but neither will most of the FDW checks.
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw OPTIONS (ADD password 'dummypw');
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- -- Unpriv user cannot make the mapping passwordless
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw OPTIONS (ADD password_required 'false');
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- RESET ROLE;
-- -- But the superuser can
-- ALTER USER MAPPING FOR regress_nosuper SERVER mysql_svr_nopw OPTIONS (ADD password_required 'false');
-- SET ROLE regress_nosuper;
-- -- Should finally work now
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- -- unpriv user also cannot set sslcert / sslkey on the user mapping
-- -- first set password_required so we see the right error messages
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw OPTIONS (SET password_required 'true');
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw OPTIONS (ADD sslcert 'foo.crt');
-- ALTER USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw OPTIONS (ADD sslkey 'foo.key');
-- -- We're done with the role named after a specific user and need to check the
-- -- changes to the public mapping.
-- DROP USER MAPPING FOR CURRENT_USER SERVER mysql_svr_nopw;
-- -- This will fail again as it'll resolve the user mapping for public, which
-- -- lacks password_required=false
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- RESET ROLE;
-- -- The user mapping for public is passwordless and lacks the password_required=false
-- -- mapping option, but will work because the current user is a superuser.
-- SELECT 1 FROM ft1_nopw LIMIT 1;
-- -- cleanup
-- DROP USER MAPPING FOR public SERVER mysql_svr_nopw;
-- DROP OWNED BY regress_nosuper;
-- DROP ROLE regress_nosuper;
-- -- Clean-up
-- RESET enable_partitionwise_aggregate;
-- -- Two-phase transactions are not supported.
-- BEGIN;
-- SELECT count(*) FROM ft1;
-- -- error here
-- PREPARE TRANSACTION 'fdw_tpc';
-- ROLLBACK;
-- ===================================================================
-- test connection invalidation cases
-- ===================================================================
-- This test case is for closing the connection in mysql_xact_callback
BEGIN;
-- Connection xact depth becomes 1 i.e. the connection is in midst of the xact.
--Testcase 800:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- Connection is not closed at the end of the alter statement in
-- mysql_xact_callback. That's because the connection is in midst of this
-- xact, it is just marked as invalid.
--Testcase 801:
ALTER SERVER mysql_svr OPTIONS (ADD use_remote_estimate 'off');
-- The invalid connection gets closed in mysql_xact_callback during commit.
COMMIT;
-- ===================================================================
-- reestablish new connection
-- ===================================================================
--Testcase 788:
SELECT * FROM ft1 LIMIT 10;
 c1 | c2  |      c3       |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+-----+---------------+------------------------------+--------------------------+----+------------+-----+---------
  1 |   2 | 00001         | Thu Jan 01 16:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  3 | 303 | 00003_update3 | Sat Jan 03 16:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |   4 | 00004         | Sun Jan 04 16:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  6 |   6 | 00006         | Tue Jan 06 16:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 | 407 | 00007_update7 | Wed Jan 07 16:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |   8 | 00008         | Thu Jan 08 16:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 | 509 | 00009_update9 | Fri Jan 09 16:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | ft2        | foo | /node1/
 10 |   0 | 00010         | Sat Jan 10 16:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
 11 |   1 | 00011         | Sun Jan 11 16:00:00 1970 PST | Mon Jan 12 00:00:00 1970 | 1  | 1          | foo | /node1/
 13 | 303 | 00013_update3 | Tue Jan 13 16:00:00 1970 PST | Wed Jan 14 00:00:00 1970 | 3  | 3          | foo | /node1/
(10 rows)

\! ./sql/init_data/mysql_fdw/mysql_restart_service.sh
mysql: [Warning] Using a password on the command line interface can be insecure.
mysql: [Warning] Using a password on the command line interface can be insecure.
mysql: [Warning] Using a password on the command line interface can be insecure.
mysql: [Warning] Using a password on the command line interface can be insecure.
--Testcase 789:
SELECT * FROM ft1 LIMIT 10;
 c1 | c2  |      c3       |              c4              |            c5            | c6 |     c7     | c8  | spdurl  
----+-----+---------------+------------------------------+--------------------------+----+------------+-----+---------
  1 |   2 | 00001         | Thu Jan 01 16:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  3 | 303 | 00003_update3 | Sat Jan 03 16:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |   4 | 00004         | Sun Jan 04 16:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  6 |   6 | 00006         | Tue Jan 06 16:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 | 407 | 00007_update7 | Wed Jan 07 16:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |   8 | 00008         | Thu Jan 08 16:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 | 509 | 00009_update9 | Fri Jan 09 16:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | ft2        | foo | /node1/
 10 |   0 | 00010         | Sat Jan 10 16:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
 11 |   1 | 00011         | Sun Jan 11 16:00:00 1970 PST | Mon Jan 12 00:00:00 1970 | 1  | 1          | foo | /node1/
 13 | 303 | 00013_update3 | Tue Jan 13 16:00:00 1970 PST | Wed Jan 14 00:00:00 1970 | 3  | 3          | foo | /node1/
(10 rows)

-- Change application_name of remote connection to special one
-- so that we can easily terminate the connection later.
-- ALTER SERVER mysql_svr OPTIONS (application_name 'fdw_retry_check');
-- Make sure we have a remote connection.
-- SELECT 1 FROM ft1 LIMIT 1;
-- -- Terminate the remote connection and wait for the termination to complete.
-- -- (If a cache flush happens, the remote connection might have already been
-- -- dropped; so code this step in a way that doesn't fail if no connection.)
-- DO $$ BEGIN
-- PERFORM pg_terminate_backend(pid, 180000) FROM pg_stat_activity
-- 	WHERE application_name = 'fdw_retry_check';
-- END $$;
-- -- This query should detect the broken connection when starting new remote
-- -- transaction, reestablish new connection, and then succeed.
-- BEGIN;
-- SELECT 1 FROM ft1 LIMIT 1;
-- -- If we detect the broken connection when starting a new remote
-- -- subtransaction, we should fail instead of establishing a new connection.
-- -- Terminate the remote connection and wait for the termination to complete.
-- DO $$ BEGIN
-- PERFORM pg_terminate_backend(pid, 180000) FROM pg_stat_activity
-- 	WHERE application_name = 'fdw_retry_check';
-- END $$;
-- SAVEPOINT s;
-- -- The text of the error might vary across platforms, so only show SQLSTATE.
-- \set VERBOSITY sqlstate
-- SELECT 1 FROM ft1 LIMIT 1;    -- should fail
-- \set VERBOSITY default
-- COMMIT;
-- =============================================================================
-- test connection invalidation cases and mysql_fdw_get_connections function
-- =============================================================================
-- Let's ensure to close all the existing cached connections.
--Testcase 790:
SELECT 1 FROM mysql_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
--Testcase 791:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- This test case is for closing the connection in pgfdw_xact_callback
BEGIN;
-- Connection xact depth becomes 1 i.e. the connection is in midst of the xact.
--Testcase 792:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

--Testcase 793:
SELECT 1 FROM ft7 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- List all the existing cached connections. mysql_svr and mysql_svr3 should be
-- output.
--Testcase 794:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 mysql_svr
 mysql_svr3
(2 rows)

-- Connections are not closed at the end of the alter and drop statements.
-- That's because the connections are in midst of this xact,
-- they are just marked as invalid in pgfdw_inval_callback.
--Testcase 795:
ALTER SERVER mysql_svr OPTIONS (SET use_remote_estimate 'off');
--Testcase 796:
DROP SERVER mysql_svr3 CASCADE;
NOTICE:  drop cascades to 2 other objects
-- List all the existing cached connections. mysql_svr and mysql_svr3
-- should be output as invalid connections. Also the server name for
-- mysql_svr3 should be NULL because the server was dropped.
--Testcase 797:
SELECT * FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name | valid 
-------------+-------
 mysql_svr   | f
             | f
(2 rows)

-- The invalid connection gets closed in mysql_xact_callback during commit.
COMMIT;
-- All cached connections were closed while committing above xact, so no
-- records should be output.
--Testcase 798:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- =======================================================================
-- test mysql_fdw_disconnect and mysql_fdw_disconnect_all functions
-- =======================================================================
BEGIN;
-- Ensure to cache mysql_svr connection.
--Testcase 799:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- Ensure to cache mysql_svr2 connection.
--Testcase 800:
SELECT 1 FROM ft6 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- List all the existing cached connections. mysql_svr and mysql_svr2 should be
-- output.
--Testcase 801:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 mysql_svr
 mysql_svr2
(2 rows)

-- Issue a warning and return false as mysql_svr connection is still in use and
-- can not be closed.
--Testcase 802:
SELECT mysql_fdw_disconnect('mysql_svr');
WARNING:  mysql_fdw cannot close connection for server "mysql_svr" because it is still in use
 mysql_fdw_disconnect 
----------------------
 f
(1 row)

-- List all the existing cached connections. mysql_svr and mysql_svr2 should be
-- output.
--Testcase 803:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 mysql_svr
 mysql_svr2
(2 rows)

-- Return false as connections are still in use, warnings are issued.
-- But disable warnings temporarily because the order of them is not stable.
--Testcase 804:
SET client_min_messages = 'ERROR';
--Testcase 805:
SELECT mysql_fdw_disconnect_all();
 mysql_fdw_disconnect_all 
--------------------------
 f
(1 row)

--Testcase 806:
RESET client_min_messages;
COMMIT;
-- Ensure that mysql_svr2 connection is closed.
--Testcase 807:
SELECT 1 FROM mysql_fdw_disconnect('mysql_svr2');
 ?column? 
----------
        1
(1 row)

--Testcase 808:
SELECT server_name FROM mysql_fdw_get_connections() WHERE server_name = 'mysql_svr2';
 server_name 
-------------
(0 rows)

-- Return false as mysql_svr2 connection is closed already.
--Testcase 809:
SELECT mysql_fdw_disconnect('mysql_svr2');
 mysql_fdw_disconnect 
----------------------
 f
(1 row)

-- Return an error as there is no foreign server with given name.
--Testcase 810:
SELECT mysql_fdw_disconnect('unknownserver');
ERROR:  server "unknownserver" does not exist
-- Let's ensure to close all the existing cached connections.
--Testcase 811:
SELECT 1 FROM mysql_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
--Testcase 812:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- =============================================================================
-- test case for having multiple cached connections for a foreign server
-- =============================================================================
--Testcase 813:
CREATE ROLE regress_multi_conn_user1 SUPERUSER;
--Testcase 814:
CREATE ROLE regress_multi_conn_user2 SUPERUSER;
--Testcase 815:
CREATE USER MAPPING FOR regress_multi_conn_user1 SERVER mysql_svr
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 893:
CREATE USER MAPPING FOR regress_multi_conn_user1 SERVER spdsrv;
--Testcase 816:
CREATE USER MAPPING FOR regress_multi_conn_user2 SERVER mysql_svr
  OPTIONS (username :MYSQL_USER_NAME, password :MYSQL_PASS);
--Testcase 894:
CREATE USER MAPPING FOR regress_multi_conn_user2 SERVER spdsrv;
BEGIN;
-- Will cache mysql_svr connection with user mapping for regress_multi_conn_user1
--Testcase 817:
SET ROLE regress_multi_conn_user1;
--Testcase 818:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

--Testcase 819:
RESET ROLE;
-- Will cache mysql_svr connection with user mapping for regress_multi_conn_user2
--Testcase 820:
SET ROLE regress_multi_conn_user2;
--Testcase 821:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

--Testcase 822:
RESET ROLE;
-- Should output two connections for mysql_svr server
--Testcase 823:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 mysql_svr
 mysql_svr
(2 rows)

COMMIT;
-- Let's ensure to close all the existing cached connections.
--Testcase 824:
SELECT 1 FROM mysql_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
--Testcase 825:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- Clean up
--Testcase 826:
DROP USER MAPPING FOR regress_multi_conn_user1 SERVER mysql_svr;
--Testcase 827:
DROP USER MAPPING FOR regress_multi_conn_user2 SERVER mysql_svr;
--Testcase 825:
DROP USER MAPPING FOR regress_multi_conn_user1 SERVER spdsrv;
--Testcase 826:
DROP USER MAPPING FOR regress_multi_conn_user2 SERVER spdsrv;
--Testcase 828:
DROP ROLE regress_multi_conn_user1;
--Testcase 829:
DROP ROLE regress_multi_conn_user2;
-- ===================================================================
-- Test foreign server level option keep_connections
-- ===================================================================
-- By default, the connections associated with foreign server are cached i.e.
-- keep_connections option is on. Set it to off.
--Testcase 830:
ALTER SERVER mysql_svr OPTIONS (keep_connections 'off');
-- connection to mysql_svr server is closed at the end of xact
-- as keep_connections was set to off.
--Testcase 831:
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
--Testcase 832:
SELECT server_name FROM mysql_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

--Testcase 833:
ALTER SERVER mysql_svr OPTIONS (SET keep_connections 'on');
-- ===================================================================
-- batch insert
-- ===================================================================
BEGIN;
--Testcase 834:
CREATE SERVER batch10 FOREIGN DATA WRAPPER mysql_fdw OPTIONS( batch_size '10' );
--Testcase 835:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     1
(1 row)

--Testcase 836:
ALTER SERVER batch10 OPTIONS( SET batch_size '20' );
--Testcase 837:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     0
(1 row)

--Testcase 838:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=20'];
 count 
-------
     1
(1 row)

--Testcase 839:
CREATE FOREIGN TABLE table30_a_child ( x int ) SERVER batch10 OPTIONS ( batch_size '30' );
--Testcase 897:
CREATE TABLE table30 ( x int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 898:
CREATE FOREIGN TABLE table30_a PARTITION OF table30 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 840:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30_a_child'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     1
(1 row)

--Testcase 841:
ALTER FOREIGN TABLE table30_a_child OPTIONS ( SET batch_size '40');
--Testcase 842:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30_a_child'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     0
(1 row)

--Testcase 843:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30_a_child'::regclass
AND ftoptions @> array['batch_size=40'];
 count 
-------
     1
(1 row)

ROLLBACK;
--Testcase 844:
CREATE FOREIGN TABLE ftable_a_child ( x int ) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'batch_table', batch_size '10' );
--Testcase 899:
CREATE TABLE ftable ( x int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 900:
CREATE FOREIGN TABLE ftable_a PARTITION OF ftable FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 845:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable_a_child SELECT * FROM generate_series(1, 10) i;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.ftable_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`batch_table`(`x`) VALUES (?)
   Batch Size: 10
   ->  Function Scan on pg_catalog.generate_series i
         Output: i.i
         Function Call: generate_series(1, 10)
(6 rows)

--Testcase 846:
INSERT INTO ftable_a_child SELECT * FROM generate_series(1, 10) i;
--Testcase 847:
INSERT INTO ftable_a_child SELECT * FROM generate_series(11, 31) i;
--Testcase 848:
INSERT INTO ftable_a_child VALUES (32);
--Testcase 849:
INSERT INTO ftable_a_child VALUES (33), (34);
--Testcase 854:
SELECT COUNT(*) FROM ftable;
 count 
-------
    34
(1 row)

TRUNCATE ftable_a_child;
--Testcase 855:
DROP FOREIGN TABLE ftable_a_child;
--Testcase 904:
DROP TABLE ftable;
-- Disable batch insert
--Testcase 856:
CREATE FOREIGN TABLE ftable_a_child ( x int ) SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'batch_table', batch_size '1' );
--Testcase 905:
CREATE TABLE ftable ( x int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 906:
CREATE FOREIGN TABLE ftable_a PARTITION OF ftable FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 857:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable_a_child VALUES (1), (2);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.ftable_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`batch_table`(`x`) VALUES (?)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

--Testcase 858:
INSERT INTO ftable_a_child VALUES (1), (2);
--Testcase 859:
SELECT COUNT(*) FROM ftable;
 count 
-------
     2
(1 row)

-- Disable batch inserting into foreign tables with BEFORE ROW INSERT triggers
-- even if the batch_size option is enabled.
ALTER FOREIGN TABLE ftable_a_child OPTIONS ( SET batch_size '10' );
--Testcase 885:
CREATE TRIGGER trig_row_before BEFORE INSERT ON ftable_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 886:
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable_a_child VALUES (3), (4);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.ftable_a_child
   Remote query: INSERT INTO `mysql_fdw_post`.`batch_table`(`x`) VALUES (?)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

--Testcase 887:
INSERT INTO ftable_a_child VALUES (3), (4);
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable_a_child
NOTICE:  NEW: (3)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable_a_child
NOTICE:  NEW: (4)
--Testcase 888:
SELECT COUNT(*) FROM ftable;
 count 
-------
     4
(1 row)

-- Clean up
--Testcase 889:
DROP TRIGGER trig_row_before ON ftable_a_child;
--Testcase 860:
DROP FOREIGN TABLE ftable_a_child;
--Testcase 907:
DROP TABLE ftable;
-- --Testcase 861:
-- DROP TABLE batch_table;
-- Use partitioning
--CREATE TABLE batch_table ( x int ) PARTITION BY HASH (x);
--CREATE TABLE batch_table_p0 (LIKE batch_table);
--CREATE FOREIGN TABLE batch_table_p0f
--	PARTITION OF batch_table
--	FOR VALUES WITH (MODULUS 3, REMAINDER 0)
--	SERVER mysql_svr
--	OPTIONS (table_name 'batch_table_p0', batch_size '10');
--CREATE TABLE batch_table_p1 (LIKE batch_table);
--CREATE FOREIGN TABLE batch_table_p1f
--	PARTITION OF batch_table
--	FOR VALUES WITH (MODULUS 3, REMAINDER 1)
--	SERVER mysql_svr
--	OPTIONS (table_name 'batch_table_p1', batch_size '1');
--CREATE TABLE batch_table_p2
--	PARTITION OF batch_table
--	FOR VALUES WITH (MODULUS 3, REMAINDER 2);
--INSERT INTO batch_table SELECT * FROM generate_series(1, 66) i;
--SELECT COUNT(*) FROM batch_table;
-- -- Clean up
-- DROP TABLE batch_table;
-- DROP TABLE batch_table_p0;
-- DROP TABLE batch_table_p1;
-- -- Check that batched mode also works for some inserts made during
-- -- cross-partition updates
-- CREATE TABLE batch_cp_upd_test (a int) PARTITION BY LIST (a);
-- CREATE TABLE batch_cp_upd_test1 (LIKE batch_cp_upd_test);
-- CREATE FOREIGN TABLE batch_cp_upd_test1_f
-- 	PARTITION OF batch_cp_upd_test
-- 	FOR VALUES IN (1)
-- 	SERVER loopback
-- 	OPTIONS (table_name 'batch_cp_upd_test1', batch_size '10');
-- CREATE TABLE batch_cp_upd_test2 PARTITION OF batch_cp_upd_test
-- 	FOR VALUES IN (2);
-- CREATE TABLE batch_cp_upd_test3 (LIKE batch_cp_upd_test);
-- CREATE FOREIGN TABLE batch_cp_upd_test3_f
-- 	PARTITION OF batch_cp_upd_test
-- 	FOR VALUES IN (3)
-- 	SERVER loopback
-- 	OPTIONS (table_name 'batch_cp_upd_test3', batch_size '1');
-- -- Create statement triggers on remote tables that "log" any INSERTs
-- -- performed on them.
-- CREATE TABLE cmdlog (cmd text);
-- CREATE FUNCTION log_stmt() RETURNS TRIGGER LANGUAGE plpgsql AS $$
-- 	BEGIN INSERT INTO public.cmdlog VALUES (TG_OP || ' on ' || TG_RELNAME); RETURN NULL; END;
-- $$;
-- CREATE TRIGGER stmt_trig AFTER INSERT ON batch_cp_upd_test1
-- 	FOR EACH STATEMENT EXECUTE FUNCTION log_stmt();
-- CREATE TRIGGER stmt_trig AFTER INSERT ON batch_cp_upd_test3
-- 	FOR EACH STATEMENT EXECUTE FUNCTION log_stmt();
-- -- This update moves rows from the local partition 'batch_cp_upd_test2' to the
-- -- foreign partition 'batch_cp_upd_test1', one that has insert batching
-- -- enabled, so a single INSERT for both rows.
-- INSERT INTO batch_cp_upd_test VALUES (2), (2);
-- UPDATE batch_cp_upd_test t SET a = 1 FROM (VALUES (1), (2)) s(a) WHERE t.a = s.a AND s.a = 2;
-- -- This one moves rows from the local partition 'batch_cp_upd_test2' to the
-- -- foreign partition 'batch_cp_upd_test2', one that has insert batching
-- -- disabled, so separate INSERTs for the two rows.
-- INSERT INTO batch_cp_upd_test VALUES (2), (2);
-- UPDATE batch_cp_upd_test t SET a = 3 FROM (VALUES (1), (2)) s(a) WHERE t.a = s.a AND s.a = 2;
-- SELECT tableoid::regclass, * FROM batch_cp_upd_test ORDER BY 1;
-- -- Should see 1 INSERT on batch_cp_upd_test1 and 2 on batch_cp_upd_test3 as
-- -- described above.
-- SELECT * FROM cmdlog ORDER BY 1;
-- -- Clean up
-- DROP TABLE batch_cp_upd_test;
-- DROP TABLE batch_cp_upd_test1;
-- DROP TABLE batch_cp_upd_test3;
-- DROP TABLE cmdlog;
-- DROP FUNCTION log_stmt();
-- Test that pending inserts are handled properly when needed
CREATE TABLE ftable (a text, b int, spdurl text) PARTITION BY LIST (spdurl);
CREATE FOREIGN TABLE ftable_a_child (a text, b int)
	SERVER mysql_svr
	OPTIONS (dbname 'mysql_fdw_post', table_name 'batch_table_2', batch_size '2');
CREATE FOREIGN TABLE ftable_a PARTITION OF ftable FOR VALUES IN ('/node1/') SERVER spdsrv;
CREATE TABLE ltable (a text, b int);
CREATE FUNCTION ftable_rowcount_trigf() RETURNS trigger LANGUAGE plpgsql AS
$$
begin
	raise notice '%: there are % rows in ftable',
		TG_NAME, (SELECT count(*) FROM ftable);
	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
CREATE TRIGGER ftable_rowcount_trigger
BEFORE INSERT OR UPDATE OR DELETE ON ltable
FOR EACH ROW EXECUTE PROCEDURE ftable_rowcount_trigf();
WITH t AS (
	INSERT INTO ltable VALUES ('AAA', 42), ('BBB', 42) RETURNING *
)
INSERT INTO ftable_a_child SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
  a  | b  
-----+----
 AAA | 42
 BBB | 42
(2 rows)

SELECT * FROM ftable;
  a  | b  | spdurl  
-----+----+---------
 AAA | 42 | /node1/
 BBB | 42 | /node1/
(2 rows)

DELETE FROM ftable_a_child;
WITH t AS (
	UPDATE ltable SET b = b + 100 RETURNING *
)
INSERT INTO ftable_a_child SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
  a  |  b  
-----+-----
 AAA | 142
 BBB | 142
(2 rows)

SELECT * FROM ftable;
  a  |  b  | spdurl  
-----+-----+---------
 AAA | 142 | /node1/
 BBB | 142 | /node1/
(2 rows)

DELETE FROM ftable_a_child;
WITH t AS (
	DELETE FROM ltable RETURNING *
)
INSERT INTO ftable_a_child SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
 a | b 
---+---
(0 rows)

SELECT * FROM ftable;
  a  |  b  | spdurl  
-----+-----+---------
 AAA | 142 | /node1/
 BBB | 142 | /node1/
(2 rows)

DELETE FROM ftable_a_child;
-- Clean up
DELETE FROM ftable_a_child;
DROP FOREIGN TABLE ftable_a_child;
DROP TABLE ftable;
DROP TRIGGER ftable_rowcount_trigger ON ltable;
DROP TABLE ltable;
CREATE TABLE parent (a text, b int) PARTITION BY LIST (a);
CREATE FOREIGN TABLE ftable
	PARTITION OF parent
	FOR VALUES IN ('AAA')
	SERVER mysql_svr
	OPTIONS (dbname 'mysql_fdw_post', table_name 'batch_table_2', batch_size '2');
CREATE TABLE ltable
	PARTITION OF parent
	FOR VALUES IN ('BBB');
CREATE TRIGGER ftable_rowcount_trigger
BEFORE INSERT ON ltable
FOR EACH ROW EXECUTE PROCEDURE ftable_rowcount_trigf();
INSERT INTO parent VALUES ('AAA', 42), ('BBB', 42), ('AAA', 42), ('BBB', 42);
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 2 rows in ftable
SELECT tableoid::regclass, * FROM parent;
 tableoid |  a  | b  
----------+-----+----
 ftable   | AAA | 42
 ftable   | AAA | 42
 ltable   | BBB | 42
 ltable   | BBB | 42
(4 rows)

-- Clean up
DROP FOREIGN TABLE ftable;
DROP TRIGGER ftable_rowcount_trigger ON ltable;
DROP TABLE ltable;
DROP TABLE parent;
DROP FUNCTION ftable_rowcount_trigf;
-- ===================================================================
-- test asynchronous execution
-- ===================================================================
-- ALTER SERVER mysql_svr OPTIONS (DROP extensions);
-- ALTER SERVER mysql_svr OPTIONS (ADD async_capable 'true');
-- ALTER SERVER mysql_svr2 OPTIONS (ADD async_capable 'true');
-- CREATE TABLE async_pt (a int, b int, c text) PARTITION BY RANGE (a);
-- CREATE TABLE base_tbl1 (a int, b int, c text);
-- CREATE TABLE base_tbl2 (a int, b int, c text);
-- CREATE FOREIGN TABLE async_p1 PARTITION OF async_pt FOR VALUES FROM (1000) TO (2000)
--   SERVER mysql_svr OPTIONS (table_name 'base_tbl1');
-- CREATE FOREIGN TABLE async_p2 PARTITION OF async_pt FOR VALUES FROM (2000) TO (3000)
--  SERVER mysql_svr2 OPTIONS (table_name 'base_tbl2');
-- INSERT INTO async_p1 SELECT 1000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
-- INSERT INTO async_p2 SELECT 2000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
-- ANALYZE async_pt;
-- simple queries
-- CREATE TABLE result_tbl (a int, b int, c text);
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
-- INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- Check case where multiple partitions use the same connection
-- CREATE TABLE base_tbl3 (a int, b int, c text);
-- CREATE FOREIGN TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000)
--   SERVER mysql_svr2 OPTIONS (table_name 'base_tbl3');
-- INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
-- ANALYZE async_pt;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- DROP FOREIGN TABLE async_p3;
-- DROP TABLE base_tbl3;
-- Check case where the partitioned table has local/remote partitions
-- CREATE TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000);
-- INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
-- ANALYZE async_pt;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- partitionwise joins
-- SET enable_partitionwise_join TO true;
-- CREATE TABLE join_tbl (a1 int, b1 int, c1 text, a2 int, b2 int, c2 text);
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
-- INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
-- SELECT * FROM join_tbl ORDER BY a1;
-- DELETE FROM join_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
-- INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
-- SELECT * FROM join_tbl ORDER BY a1;
-- DELETE FROM join_tbl;
-- RESET enable_partitionwise_join;
-- Test interaction of async execution with plan-time partition pruning
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM async_pt WHERE a < 3000;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM async_pt WHERE a < 2000;
-- Test interaction of async execution with run-time partition pruning
-- SET plan_cache_mode TO force_generic_plan;
-- PREPARE async_pt_query (int, int) AS
--   INSERT INTO result_tbl SELECT * FROM async_pt WHERE a < $1 AND b === $2;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- EXECUTE async_pt_query (3000, 505);
-- EXECUTE async_pt_query (3000, 505);
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- EXECUTE async_pt_query (2000, 505);
-- EXECUTE async_pt_query (2000, 505);
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- RESET plan_cache_mode;
-- CREATE TABLE local_tbl(a int, b int, c text);
-- INSERT INTO local_tbl VALUES (1505, 505, 'foo'), (2505, 505, 'bar');
-- ANALYZE local_tbl;
-- CREATE INDEX base_tbl1_idx ON base_tbl1 (a);
-- CREATE INDEX base_tbl2_idx ON base_tbl2 (a);
-- CREATE INDEX async_p3_idx ON async_p3 (a);
-- ANALYZE base_tbl1;
-- ANALYZE base_tbl2;
-- ANALYZE async_p3;
-- ALTER FOREIGN TABLE async_p1 OPTIONS (use_remote_estimate 'true');
-- ALTER FOREIGN TABLE async_p2 OPTIONS (use_remote_estimate 'true');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
-- EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
-- SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
-- SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
-- ALTER FOREIGN TABLE async_p1 OPTIONS (DROP use_remote_estimate);
-- ALTER FOREIGN TABLE async_p2 OPTIONS (DROP use_remote_estimate);
-- DROP TABLE local_tbl;
-- DROP INDEX base_tbl1_idx;
-- DROP INDEX base_tbl2_idx;
-- DROP INDEX async_p3_idx;
-- -- UNION queries
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl
-- (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
-- UNION
-- (SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
-- INSERT INTO result_tbl
-- (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
-- UNION
-- (SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO result_tbl
-- (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
-- UNION ALL
-- (SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
-- INSERT INTO result_tbl
-- (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
-- UNION ALL
-- (SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
-- SELECT * FROM result_tbl ORDER BY a;
-- DELETE FROM result_tbl;
-- -- Disable async execution if we use gating Result nodes for pseudoconstant
-- -- quals
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM async_pt WHERE CURRENT_USER = SESSION_USER;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- (SELECT * FROM async_p1 WHERE CURRENT_USER = SESSION_USER)
-- UNION ALL
-- (SELECT * FROM async_p2 WHERE CURRENT_USER = SESSION_USER);
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM ((SELECT * FROM async_p1 WHERE b < 10) UNION ALL (SELECT * FROM async_p2 WHERE b < 10)) s WHERE CURRENT_USER = SESSION_USER;
-- Test that pending requests are processed properly
-- SET enable_mergejoin TO false;
-- SET enable_hashjoin TO false;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
-- SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
-- CREATE TABLE local_tbl (a int, b int, c text);
-- INSERT INTO local_tbl VALUES (1505, 505, 'foo');
-- ANALYZE local_tbl;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
-- EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
-- SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
-- SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
-- EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
-- SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
-- SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
-- Check with foreign modify
-- CREATE TABLE base_tbl3 (a int, b int, c text);
-- CREATE FOREIGN TABLE remote_tbl (a int, b int, c text)
--   SERVER mysql_svr OPTIONS (table_name 'base_tbl3');
-- INSERT INTO remote_tbl VALUES (2505, 505, 'bar');
-- CREATE TABLE base_tbl4 (a int, b int, c text);
-- CREATE FOREIGN TABLE insert_tbl (a int, b int, c text)
--   SERVER mysql_svr OPTIONS (table_name 'base_tbl4');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
-- INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
-- SELECT * FROM insert_tbl ORDER BY a;
-- Check with direct modify
-- EXPLAIN (VERBOSE, COSTS OFF)
-- WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
-- INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
-- WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
-- INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
-- SELECT * FROM join_tbl ORDER BY a1;
-- DELETE FROM join_tbl;
-- DROP TABLE local_tbl;
-- DROP FOREIGN TABLE remote_tbl;
-- DROP FOREIGN TABLE insert_tbl;
-- DROP TABLE base_tbl3;
-- DROP TABLE base_tbl4;
-- RESET enable_mergejoin;
-- RESET enable_hashjoin;
-- Test that UPDATE/DELETE with inherited target works with async_capable enabled
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
-- UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
-- EXPLAIN (VERBOSE, COSTS OFF)
-- DELETE FROM async_pt WHERE b = 0 RETURNING *;
-- DELETE FROM async_pt WHERE b = 0 RETURNING *;
-- Check EXPLAIN ANALYZE for a query that scans empty partitions asynchronously
-- DELETE FROM async_p1;
-- DELETE FROM async_p2;
-- DELETE FROM async_p3;
-- EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
-- SELECT * FROM async_pt;
-- Clean up
-- DROP TABLE async_pt;
-- DROP TABLE base_tbl1;
-- DROP TABLE base_tbl2;
-- DROP TABLE result_tbl;
-- DROP TABLE join_tbl;
-- -- Test that an asynchronous fetch is processed before restarting the scan in
-- -- ReScanForeignScan
-- CREATE TABLE base_tbl (a int, b int);
-- INSERT INTO base_tbl VALUES (1, 11), (2, 22), (3, 33);
-- CREATE FOREIGN TABLE foreign_tbl (b int)
--   SERVER loopback OPTIONS (table_name 'base_tbl');
-- CREATE FOREIGN TABLE foreign_tbl2 () INHERITS (foreign_tbl)
--   SERVER loopback OPTIONS (table_name 'base_tbl');
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
-- SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
-- -- Clean up
-- DROP FOREIGN TABLE foreign_tbl CASCADE;
-- DROP TABLE base_tbl;
-- ALTER SERVER mysql_svr OPTIONS (DROP async_capable);
-- ALTER SERVER mysql_svr2 OPTIONS (DROP async_capable);
-- ===================================================================
-- test invalid server, foreign table and foreign data wrapper options
-- ===================================================================
-- Invalid fdw_startup_cost option
-- CREATE SERVER inv_scst FOREIGN DATA WRAPPER mysql_fdw
-- 	OPTIONS(fdw_startup_cost '100$%$#$#');
-- -- Invalid fdw_tuple_cost option
-- CREATE SERVER inv_scst FOREIGN DATA WRAPPER mysql_fdw
-- 	OPTIONS(fdw_tuple_cost '100$%$#$#');
-- -- Invalid fetch_size option
-- CREATE FOREIGN TABLE inv_fsz (c1 int )
-- 	SERVER mysql_svr OPTIONS (fetch_size '100$%$#$#');
-- -- Invalid batch_size option
-- CREATE FOREIGN TABLE inv_bsz (c1 int )
-- 	SERVER mysql_svr OPTIONS (batch_size '100$%$#$#');
-- -- No option is allowed to be specified at foreign data wrapper level
-- ALTER FOREIGN DATA WRAPPER mysql_fdw OPTIONS (nonexistent 'fdw');
-- -- ===================================================================
-- -- test postgres_fdw.application_name GUC
-- -- ===================================================================
-- -- To avoid race conditions in checking the remote session's application_name,
-- -- use this view to make the remote session itself read its application_name.
-- CREATE VIEW my_application_name AS
--   SELECT application_name FROM pg_stat_activity WHERE pid = pg_backend_pid();
-- CREATE FOREIGN TABLE remote_application_name (application_name text)
--   SERVER loopback2
--   OPTIONS (schema_name 'public', table_name 'my_application_name');
-- SELECT count(*) FROM remote_application_name;
-- -- Specify escape sequences in application_name option of a server
-- -- object so as to test that they are replaced with status information
-- -- expectedly.  Note that we are also relying on ALTER SERVER to force
-- -- the remote session to be restarted with its new application name.
-- --
-- -- Since pg_stat_activity.application_name may be truncated to less than
-- -- NAMEDATALEN characters, note that substring() needs to be used
-- -- at the condition of test query to make sure that the string consisting
-- -- of database name and process ID is also less than that.
-- ALTER SERVER loopback2 OPTIONS (application_name 'fdw_%d%p');
-- SELECT count(*) FROM remote_application_name
--   WHERE application_name =
--     substring('fdw_' || current_database() || pg_backend_pid() for
--       current_setting('max_identifier_length')::int);
-- -- postgres_fdw.application_name overrides application_name option
-- -- of a server object if both settings are present.
-- ALTER SERVER loopback2 OPTIONS (SET application_name 'fdw_wrong');
-- SET postgres_fdw.application_name TO 'fdw_%a%u%%';
-- SELECT count(*) FROM remote_application_name
--   WHERE application_name =
--     substring('fdw_' || current_setting('application_name') ||
--       CURRENT_USER || '%' for current_setting('max_identifier_length')::int);
-- RESET postgres_fdw.application_name;
-- -- Test %c (session ID) and %C (cluster name) escape sequences.
-- ALTER SERVER loopback2 OPTIONS (SET application_name 'fdw_%C%c');
-- SELECT count(*) FROM remote_application_name
--   WHERE application_name =
--     substring('fdw_' || current_setting('cluster_name') ||
--       to_hex(trunc(EXTRACT(EPOCH FROM (SELECT backend_start FROM
--       pg_stat_get_activity(pg_backend_pid()))))::integer) || '.' ||
--       to_hex(pg_backend_pid())
--       for current_setting('max_identifier_length')::int);
-- -- Clean up.
-- DROP FOREIGN TABLE remote_application_name;
-- DROP VIEW my_application_name;
-- ===================================================================
-- test parallel commit and parallel abort
-- ===================================================================
-- ALTER SERVER loopback OPTIONS (ADD parallel_commit 'true');
-- ALTER SERVER loopback OPTIONS (ADD parallel_abort 'true');
-- ALTER SERVER loopback2 OPTIONS (ADD parallel_commit 'true');
-- ALTER SERVER loopback2 OPTIONS (ADD parallel_abort 'true');
-- CREATE TABLE ploc1 (f1 int, f2 text);
-- CREATE FOREIGN TABLE prem1 (f1 int, f2 text)
--   SERVER loopback OPTIONS (table_name 'ploc1');
-- CREATE TABLE ploc2 (f1 int, f2 text);
-- CREATE FOREIGN TABLE prem2 (f1 int, f2 text)
--   SERVER loopback2 OPTIONS (table_name 'ploc2');
-- BEGIN;
-- INSERT INTO prem1 VALUES (101, 'foo');
-- INSERT INTO prem2 VALUES (201, 'bar');
-- COMMIT;
-- SELECT * FROM prem1;
-- SELECT * FROM prem2;
-- BEGIN;
-- SAVEPOINT s;
-- INSERT INTO prem1 VALUES (102, 'foofoo');
-- INSERT INTO prem2 VALUES (202, 'barbar');
-- RELEASE SAVEPOINT s;
-- COMMIT;
-- SELECT * FROM prem1;
-- SELECT * FROM prem2;
-- -- This tests executing DEALLOCATE ALL against foreign servers in parallel
-- -- during pre-commit
-- BEGIN;
-- SAVEPOINT s;
-- INSERT INTO prem1 VALUES (103, 'baz');
-- INSERT INTO prem2 VALUES (203, 'qux');
-- ROLLBACK TO SAVEPOINT s;
-- RELEASE SAVEPOINT s;
-- INSERT INTO prem1 VALUES (104, 'bazbaz');
-- INSERT INTO prem2 VALUES (204, 'quxqux');
-- COMMIT;
-- SELECT * FROM prem1;
-- SELECT * FROM prem2;
-- BEGIN;
-- INSERT INTO prem1 VALUES (105, 'test1');
-- INSERT INTO prem2 VALUES (205, 'test2');
-- ABORT;
-- SELECT * FROM prem1;
-- SELECT * FROM prem2;
-- -- This tests executing DEALLOCATE ALL against foreign servers in parallel
-- -- during post-abort
-- BEGIN;
-- SAVEPOINT s;
-- INSERT INTO prem1 VALUES (105, 'test1');
-- INSERT INTO prem2 VALUES (205, 'test2');
-- ROLLBACK TO SAVEPOINT s;
-- RELEASE SAVEPOINT s;
-- INSERT INTO prem1 VALUES (105, 'test1');
-- INSERT INTO prem2 VALUES (205, 'test2');
-- ABORT;
-- SELECT * FROM prem1;
-- SELECT * FROM prem2;
-- ALTER SERVER loopback OPTIONS (DROP parallel_commit);
-- ALTER SERVER loopback OPTIONS (DROP parallel_abort);
-- ALTER SERVER loopback2 OPTIONS (DROP parallel_commit);
-- ALTER SERVER loopback2 OPTIONS (DROP parallel_abort);
-- -- ===================================================================
-- -- test for ANALYZE sampling
-- -- ===================================================================
-- CREATE FOREIGN TABLE analyze_ftable (id int, a text, b bigint)
--        SERVER mysql_svr OPTIONS (dbname 'mysql_fdw_post', table_name 'analyze_table');
-- INSERT INTO analyze_ftable (SELECT x FROM generate_series(1,60000) x);
-- ANALYZE analyze_ftable;
-- SET default_statistics_target = 10;
-- ANALYZE analyze_ftable;
-- ALTER SERVER loopback OPTIONS (analyze_sampling 'invalid');
-- ALTER SERVER loopback OPTIONS (analyze_sampling 'auto');
-- ANALYZE analyze_table;
-- ALTER SERVER loopback OPTIONS (SET analyze_sampling 'system');
-- ANALYZE analyze_table;
-- ALTER SERVER loopback OPTIONS (SET analyze_sampling 'bernoulli');
-- ANALYZE analyze_table;
-- ALTER SERVER loopback OPTIONS (SET analyze_sampling 'random');
-- ANALYZE analyze_table;
-- ALTER SERVER loopback OPTIONS (SET analyze_sampling 'off');
-- ANALYZE analyze_table;
-- -- cleanup
-- DROP FOREIGN TABLE analyze_ftable;
--Testcase 802:
SET client_min_messages TO warning;
--Testcase 387:
DROP USER MAPPING FOR PUBLIC SERVER mysql_svr;
--Testcase 714:
DROP USER MAPPING FOR PUBLIC SERVER mysql_svr2;
--Testcase 389:
DROP SERVER mysql_svr CASCADE;
--Testcase 716:
DROP SERVER mysql_svr2 CASCADE;
--Testcase 391:
DROP SERVER spdsrv CASCADE;
--Testcase 805:
DROP EXTENSION pgspider_ext CASCADE;
--Testcase 806:
DROP EXTENSION mysql_fdw CASCADE;
DROP SCHEMA "S 1" CASCADE;
DROP TYPE user_enum CASCADE;
DROP TABLE ft1;
DROP TABLE ft1_constraint;
DROP TABLE ft2;
DROP TABLE ft3;
DROP TABLE ft4;
DROP TABLE ft5;
DROP TABLE ft6;
DROP TABLE ft7;
DROP TABLE ft_empty;
DROP TABLE loc1;
DROP TABLE foreign_tbl;
DROP TABLE rem1;
DROP TABLE rem2;
DROP TABLE rem3;
DROP TABLE rem4;
DROP TABLE grem1;
DROP TABLE foo CASCADE;
DROP TABLE bar CASCADE;
DROP TABLE foo2;
DROP TABLE bar2;
DROP TABLE b;
DROP FUNCTION trigger_func CASCADE;
DROP FUNCTION trig_row_before_insupdate CASCADE;
DROP FUNCTION trig_null CASCADE;
DROP FUNCTION row_before_insupd_trigfunc CASCADE;
DROP FUNCTION trigger_data CASCADE;
