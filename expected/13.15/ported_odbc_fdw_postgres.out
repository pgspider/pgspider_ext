\set ECHO none
show server_version \gset
\i sql/:server_version/ported_odbc_fdw.sql
-- SET consistant time zones;
--Testcase 1:
SET timezone = 'PST8PDT';
-- ===================================================================
-- create FDW objects
-- ===================================================================
--Testcase 979:
CREATE EXTENSION pgspider_ext;
--Testcase 980:
CREATE SERVER spdsrv FOREIGN DATA WRAPPER pgspider_ext;
--Testcase 981:
CREATE USER MAPPING FOR CURRENT_USER SERVER spdsrv;
--Testcase 2:
CREATE EXTENSION :DB_EXTENSIONNAME;
--Testcase 3:
CREATE SERVER :DB_SERVERNAME FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
            OPTIONS (odbc_DRIVER :DB_DRIVERNAME,
                    odbc_SERVER :DB_SERVER,
					odbc_PORT :DB_PORT,
					odbc_DATABASE :DB_DATABASE_PORT_TEST
			);
--Testcase 4:
CREATE SERVER :DB_SERVERNAME2 FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
            OPTIONS (odbc_DRIVER :DB_DRIVERNAME,
                    odbc_SERVER :DB_SERVER,
					odbc_PORT :DB_PORT,
					odbc_DATABASE :DB_DATABASE_PORT_TEST
			);
--Testcase 5:
CREATE USER MAPPING FOR public SERVER :DB_SERVERNAME OPTIONS(odbc_UID :DB_USER, odbc_PWD :DB_PASS);
--Testcase 6:
CREATE USER MAPPING FOR public SERVER :DB_SERVERNAME2 OPTIONS(odbc_UID :DB_USER, odbc_PWD :DB_PASS);
-- ===================================================================
-- create objects used through FDW postgres_svr server
-- ===================================================================
--Testcase 7:
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
--Testcase 8:
CREATE SCHEMA "S 1";
IMPORT FOREIGN SCHEMA :DB_SCHEMA_PORT_TEST2 FROM SERVER :DB_SERVERNAME INTO "S 1";
--Testcase 982:
\det+ "S 1".*
                                      List of foreign tables
 Schema |    Table     |     Server      |                FDW options                | Description 
--------+--------------+-----------------+-------------------------------------------+-------------
 S 1    | T1           | postgres_server | ("table" 'T1', schema 'public')           | 
 S 1    | T2           | postgres_server | ("table" 'T2', schema 'public')           | 
 S 1    | T3           | postgres_server | ("table" 'T3', schema 'public')           | 
 S 1    | T4           | postgres_server | ("table" 'T4', schema 'public')           | 
 S 1    | base_tbl     | postgres_server | ("table" 'base_tbl', schema 'public')     | 
 S 1    | child_tbl    | postgres_server | ("table" 'child_tbl', schema 'public')    | 
 S 1    | fprt1        | postgres_server | ("table" 'fprt1', schema 'public')        | 
 S 1    | fprt1_p1     | postgres_server | ("table" 'fprt1_p1', schema 'public')     | 
 S 1    | fprt1_p2     | postgres_server | ("table" 'fprt1_p2', schema 'public')     | 
 S 1    | fprt2        | postgres_server | ("table" 'fprt2', schema 'public')        | 
 S 1    | fprt2_p1     | postgres_server | ("table" 'fprt2_p1', schema 'public')     | 
 S 1    | fprt2_p2     | postgres_server | ("table" 'fprt2_p2', schema 'public')     | 
 S 1    | gloc1        | postgres_server | ("table" 'gloc1', schema 'public')        | 
 S 1    | loc1         | postgres_server | ("table" 'loc1', schema 'public')         | 
 S 1    | loc2         | postgres_server | ("table" 'loc2', schema 'public')         | 
 S 1    | loc3         | postgres_server | ("table" 'loc3', schema 'public')         | 
 S 1    | loct         | postgres_server | ("table" 'loct', schema 'public')         | 
 S 1    | loct1        | postgres_server | ("table" 'loct1', schema 'public')        | 
 S 1    | loct1_2      | postgres_server | ("table" 'loct1_2', schema 'public')      | 
 S 1    | loct1_3      | postgres_server | ("table" 'loct1_3', schema 'public')      | 
 S 1    | loct1_4      | postgres_server | ("table" 'loct1_4', schema 'public')      | 
 S 1    | loct1_rescan | postgres_server | ("table" 'loct1_rescan', schema 'public') | 
 S 1    | loct2        | postgres_server | ("table" 'loct2', schema 'public')        | 
 S 1    | loct2_2      | postgres_server | ("table" 'loct2_2', schema 'public')      | 
 S 1    | loct2_3      | postgres_server | ("table" 'loct2_3', schema 'public')      | 
 S 1    | loct2_4      | postgres_server | ("table" 'loct2_4', schema 'public')      | 
 S 1    | loct2_rescan | postgres_server | ("table" 'loct2_rescan', schema 'public') | 
 S 1    | loct3        | postgres_server | ("table" 'loct3', schema 'public')        | 
 S 1    | loct4        | postgres_server | ("table" 'loct4', schema 'public')        | 
 S 1    | loct_2       | postgres_server | ("table" 'loct_2', schema 'public')       | 
 S 1    | loct_empty   | postgres_server | ("table" 'loct_empty', schema 'public')   | 
 S 1    | pagg_tab     | postgres_server | ("table" 'pagg_tab', schema 'public')     | 
 S 1    | pagg_tab_p1  | postgres_server | ("table" 'pagg_tab_p1', schema 'public')  | 
 S 1    | pagg_tab_p2  | postgres_server | ("table" 'pagg_tab_p2', schema 'public')  | 
 S 1    | pagg_tab_p3  | postgres_server | ("table" 'pagg_tab_p3', schema 'public')  | 
 S 1    | parent       | postgres_server | ("table" 'parent', schema 'public')       | 
(36 rows)

--Testcase 983:
\d+ "S 1".*
                                                    Foreign table "S 1.T1"
 Column |            Type             | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
--------+-----------------------------+-----------+----------+---------+--------------+----------+--------------+-------------
 C_1    | integer                     |           |          |         | (key 'true') | plain    |              | 
 c2     | integer                     |           |          |         |              | plain    |              | 
 c3     | text                        |           |          |         |              | extended |              | 
 c4     | timestamp without time zone |           |          |         |              | plain    |              | 
 c5     | timestamp without time zone |           |          |         |              | plain    |              | 
 c6     | character varying(10)       |           |          |         |              | extended |              | 
 c7     | character(10)               |           |          |         |              | extended |              | 
 c8     | character varying(255)      |           |          |         |              | extended |              | 
Server: postgres_server
FDW options: ("table" 'T1', schema 'public')

                                          Foreign table "S 1.T2"
 Column |  Type   | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+--------------+----------+--------------+-------------
 c1     | integer |           |          |         | (key 'true') | plain    |              | 
 c2     | text    |           |          |         |              | extended |              | 
Server: postgres_server
FDW options: ("table" 'T2', schema 'public')

                                          Foreign table "S 1.T3"
 Column |  Type   | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+--------------+----------+--------------+-------------
 c1     | integer |           |          |         | (key 'true') | plain    |              | 
 c2     | integer |           |          |         |              | plain    |              | 
 c3     | text    |           |          |         |              | extended |              | 
Server: postgres_server
FDW options: ("table" 'T3', schema 'public')

                                          Foreign table "S 1.T4"
 Column |  Type   | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+--------------+----------+--------------+-------------
 c1     | integer |           |          |         | (key 'true') | plain    |              | 
 c2     | integer |           |          |         |              | plain    |              | 
 c3     | text    |           |          |         |              | extended |              | 
Server: postgres_server
FDW options: ("table" 'T4', schema 'public')

                                      Foreign table "S 1.base_tbl"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 a      | integer |           |          |         |             | plain   |              | 
 b      | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'base_tbl', schema 'public')

                                     Foreign table "S 1.child_tbl"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 a      | integer |           |          |         |             | plain   |              | 
 b      | integer |           |          |         |             | plain   |              | 
 id     | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'child_tbl', schema 'public')

                                               Foreign table "S 1.fprt1"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt1', schema 'public')

                                              Foreign table "S 1.fprt1_p1"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt1_p1', schema 'public')

                                              Foreign table "S 1.fprt1_p2"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt1_p2', schema 'public')

                                               Foreign table "S 1.fprt2"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt2', schema 'public')

                                              Foreign table "S 1.fprt2_p1"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt2_p1', schema 'public')

                                              Foreign table "S 1.fprt2_p2"
 Column |          Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+------------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer                |           |          |         |             | plain    |              | 
 b      | integer                |           |          |         |             | plain    |              | 
 c      | character varying(255) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'fprt2_p2', schema 'public')

                                       Foreign table "S 1.gloc1"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 a      | integer |           |          |         |             | plain   |              | 
 b      | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'gloc1', schema 'public')

                                        Foreign table "S 1.loc1"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 f1     | integer |           |          |         |             | plain    |              | 
 f2     | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loc1', schema 'public')

                                        Foreign table "S 1.loc2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 f1     | integer |           |          |         |             | plain    |              | 
 f2     | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loc2', schema 'public')

                                        Foreign table "S 1.loc3"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 f1     | integer |           |          |         |             | plain    |              | 
 f2     | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loc3', schema 'public')

                                         Foreign table "S 1.loct"
 Column |  Type   | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+--------------+----------+--------------+-------------
 aa     | text    |           |          |         |              | extended |              | 
 bb     | text    |           |          |         |              | extended |              | 
 id     | integer |           |          |         | (key 'true') | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct', schema 'public')

                                       Foreign table "S 1.loct1"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 f1     | integer |           |          |         |             | plain   |              | 
 f2     | integer |           |          |         |             | plain   |              | 
 f3     | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'loct1', schema 'public')

                                       Foreign table "S 1.loct1_2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct1_2', schema 'public')

                                       Foreign table "S 1.loct1_3"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct1_3', schema 'public')

                                       Foreign table "S 1.loct1_4"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct1_4', schema 'public')

                                    Foreign table "S 1.loct1_rescan"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 c1     | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'loct1_rescan', schema 'public')

                                       Foreign table "S 1.loct2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 f1     | integer |           |          |         |             | plain   |              | 
 f2     | integer |           |          |         |             | plain   |              | 
 f3     | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'loct2', schema 'public')

                                       Foreign table "S 1.loct2_2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct2_2', schema 'public')

                                       Foreign table "S 1.loct2_3"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct2_3', schema 'public')

                                       Foreign table "S 1.loct2_4"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct2_4', schema 'public')

                                    Foreign table "S 1.loct2_rescan"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 c1     | integer |           |          |         |             | plain    |              | 
 c2     | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'loct2_rescan', schema 'public')

                                               Foreign table "S 1.loct3"
 Column |         Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 f1     | text                  |           |          |         |             | extended |              | 
 f2     | text                  |           |          |         |             | extended |              | 
 f3     | character varying(10) |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'loct3', schema 'public')

                                       Foreign table "S 1.loct4"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+---------+--------------+-------------
 f1     | integer |           |          |         |             | plain   |              | 
 f2     | integer |           |          |         |             | plain   |              | 
 f3     | integer |           |          |         |             | plain   |              | 
Server: postgres_server
FDW options: ("table" 'loct4', schema 'public')

                                       Foreign table "S 1.loct_2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'loct_2', schema 'public')

                                     Foreign table "S 1.loct_empty"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 c1     | integer |           |          |         |             | plain    |              | 
 c2     | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'loct_empty', schema 'public')

                                      Foreign table "S 1.pagg_tab"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | integer |           |          |         |             | plain    |              | 
 c      | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'pagg_tab', schema 'public')

                                     Foreign table "S 1.pagg_tab_p1"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | integer |           |          |         |             | plain    |              | 
 c      | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'pagg_tab_p1', schema 'public')

                                     Foreign table "S 1.pagg_tab_p2"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | integer |           |          |         |             | plain    |              | 
 c      | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'pagg_tab_p2', schema 'public')

                                     Foreign table "S 1.pagg_tab_p3"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | integer |           |          |         |             | plain    |              | 
 c      | text    |           |          |         |             | extended |              | 
Server: postgres_server
FDW options: ("table" 'pagg_tab_p3', schema 'public')

                                       Foreign table "S 1.parent"
 Column |  Type   | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+-------------+----------+--------------+-------------
 a      | integer |           |          |         |             | plain    |              | 
 b      | text    |           |          |         |             | extended |              | 
 id     | integer |           |          |         |             | plain    |              | 
Server: postgres_server
FDW options: ("table" 'parent', schema 'public')

--Testcase 9:
INSERT INTO "S 1"."T1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'
	FROM generate_series(1, 1000) id;
--Testcase 10:
INSERT INTO "S 1"."T2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 11:
INSERT INTO "S 1"."T3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 12:
DELETE FROM "S 1"."T3" WHERE c1 % 2 != 0;	-- delete for outer join tests
--Testcase 13:
INSERT INTO "S 1"."T4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
--Testcase 14:
DELETE FROM "S 1"."T4" WHERE c1 % 3 != 0;	-- delete for outer join tests
-- ===================================================================
-- create foreign tables
-- ===================================================================
--Testcase 15:
CREATE FOREIGN TABLE ft1_a_child (
	-- c0 int,
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER :DB_SERVERNAME;
-- ALTER FOREIGN TABLE ft1 DROP COLUMN c0;  --ODBC can not work with it
-- BUG
--Testcase 984:
CREATE TABLE ft1 (
	-- c0 int,
	c1 int,
	c2 int NOT NULL,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text,
    spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 985:
CREATE FOREIGN TABLE ft1_a PARTITION OF ft1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 16:
CREATE FOREIGN TABLE ft2_a_child (
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	-- cx int,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 text
) SERVER :DB_SERVERNAME;
-- ALTER FOREIGN TABLE ft2 DROP COLUMN cx; --ODBC can not work with it
--Testcase 986:
CREATE TABLE ft2 (
	c1 int,
	c2 int NOT NULL,
	-- cx int,
	c3 text,
	c4 timestamp,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 text,
  spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 987:
CREATE FOREIGN TABLE ft2_a PARTITION OF ft2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 17:
CREATE FOREIGN TABLE ft4_a_child (
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	c3 text
) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'T3');
--Testcase 988:
CREATE TABLE ft4 (
	c1 int,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 989:
CREATE FOREIGN TABLE ft4_a PARTITION OF ft4 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 18:
CREATE FOREIGN TABLE ft5_a_child (
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	c3 text
) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'T4');
--Testcase 990:
CREATE TABLE ft5 (
	c1 int,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 991:
CREATE FOREIGN TABLE ft5_a PARTITION OF ft5 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 19:
CREATE FOREIGN TABLE ft6_a_child (
	c1 int OPTIONS (key 'true'),
	c2 int NOT NULL,
	c3 text
) SERVER :DB_SERVERNAME2 OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'T4');
--Testcase 992:
CREATE TABLE ft6 (
	c1 int,
	c2 int NOT NULL,
	c3 text,
	spdurl text
) PARTITION BY LIST (spdurl);
--Testcase 993:
CREATE FOREIGN TABLE ft6_a PARTITION OF ft6 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- Enable to pushdown aggregate
--Testcase 994:
SET enable_partitionwise_aggregate TO on;
-- Turn off leader node participation to avoid duplicate data error when executing
-- parallel query
--Testcase 995:
SET parallel_leader_participation TO off;
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl and some other parameters are omitted because
-- valid values for them depend on configure options
-- ALTER SERVER :DB_SERVERNAME OPTIONS (
-- 	use_remote_estimate 'false',
-- 	updatable 'true',
-- 	fdw_startup_cost '123.456',
-- 	fdw_tuple_cost '0.123',
-- 	service 'value',
-- 	connect_timeout 'value',
-- 	dbname 'value',
-- 	host 'value',
-- 	hostaddr 'value',
-- 	port 'value',
-- 	--client_encoding 'value',
-- 	application_name 'value',
-- 	--fallback_application_name 'value',
-- 	keepalives 'value',
-- 	keepalives_idle 'value',
-- 	keepalives_interval 'value',
-- 	tcp_user_timeout 'value',
-- 	-- requiressl 'value',
-- 	sslcompression 'value',
-- 	sslmode 'value',
-- 	sslcert 'value',
-- 	sslkey 'value',
-- 	sslrootcert 'value',
-- 	sslcrl 'value',
-- 	--requirepeer 'value',
-- 	krbsrvname 'value',
-- 	gsslib 'value'
-- 	--replication 'value'
-- );
-- Error, invalid list syntax
--Testcase 20:
ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions 'foo; bar');
psql:sql/13.15/ported_odbc_fdw.sql:255: ERROR:  invalid option "extensions"
HINT:  Valid options in this context are: odbc_driver, odbc_server, odbc_port, odbc_database, updatable
-- OK but gets a warning
--Testcase 21:
ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions 'foo, bar');
psql:sql/13.15/ported_odbc_fdw.sql:259: ERROR:  invalid option "extensions"
HINT:  Valid options in this context are: odbc_driver, odbc_server, odbc_port, odbc_database, updatable
--Testcase 22:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (DROP extensions);
--Testcase 23:
-- Option user, password is not supported
-- ALTER USER MAPPING FOR public SERVER :DB_SERVERNAME
-- 	OPTIONS (DROP user, DROP password);
-- Attempt to add a valid option that's not allowed in a user mapping
--Testcase 24:
-- Option sslmode is not supported
-- ALTER USER MAPPING FOR public SERVER :DB_SERVERNAME
-- 	OPTIONS (ADD sslmode 'require');
-- But we can add valid ones fine
--Testcase 25:
-- Option sslpassword is not supported
-- ALTER USER MAPPING FOR public SERVER :DB_SERVERNAME
-- 	OPTIONS (ADD sslpassword 'dummy');
-- Ensure valid options we haven't used in a user mapping yet are
-- permitted to check validation.
--Testcase 26:
-- Option sslkey, sslcert are not supported
-- ALTER USER MAPPING FOR public SERVER :DB_SERVERNAME
-- 	OPTIONS (ADD sslkey 'value', ADD sslcert 'value');
--Testcase 27:
ALTER FOREIGN TABLE ft1_a_child OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'T1');
--Testcase 28:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'T1');
--Testcase 29:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c1 OPTIONS (column 'C_1');
--Testcase 30:
ALTER FOREIGN TABLE ft2_a_child ALTER COLUMN c1 OPTIONS (column 'C_1');
--Testcase 31:
\det+
                                 List of foreign tables
 Schema |    Table    |      Server      |           FDW options           | Description 
--------+-------------+------------------+---------------------------------+-------------
 public | ft1_a       | spdsrv           |                                 | 
 public | ft1_a_child | postgres_server  | (schema 'public', "table" 'T1') | 
 public | ft2_a       | spdsrv           |                                 | 
 public | ft2_a_child | postgres_server  | (schema 'public', "table" 'T1') | 
 public | ft4_a       | spdsrv           |                                 | 
 public | ft4_a_child | postgres_server  | (schema 'public', "table" 'T3') | 
 public | ft5_a       | spdsrv           |                                 | 
 public | ft5_a_child | postgres_server  | (schema 'public', "table" 'T4') | 
 public | ft6_a       | spdsrv           |                                 | 
 public | ft6_a_child | postgres_server2 | (schema 'public', "table" 'T4') | 
(10 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
--Testcase 32:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |            c4            
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

--Testcase 33:
ALTER SERVER :DB_SERVERNAME OPTIONS (SET odbc_DATABASE 'no such database');
--Testcase 34:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
psql:sql/13.15/ported_odbc_fdw.sql:306: ERROR:  Connecting to driver
--Testcase 35:
ALTER SERVER :DB_SERVERNAME OPTIONS (SET odbc_DATABASE :DB_DATABASE_PORT_TEST);
--Testcase 36:
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |            c4            
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

-- Test that alteration of user mapping options causes reconnection
-- Option 'user' is not supported
-- ALTER USER MAPPING FOR CURRENT_USER SERVER :DB_SERVERNAME
--    OPTIONS (ADD user 'no such user');
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
-- ALTER USER MAPPING FOR CURRENT_USER SERVER :DB_SERVERNAME
--    OPTIONS (DROP user);
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
--Testcase 37:
ALTER FOREIGN TABLE ft2_a_child OPTIONS (use_remote_estimate 'true');
psql:sql/13.15/ported_odbc_fdw.sql:326: ERROR:  invalid option "use_remote_estimate"
HINT:  Valid options in this context are: schema, table, prefix, sql_query, sql_count, updatable
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
--Testcase 38:
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
              QUERY PLAN               
---------------------------------------
 Limit
   ->  Sort
         Sort Key: ft1.c3, ft1.c1
         ->  Foreign Scan on ft1_a ft1
(4 rows)

--Testcase 39:
SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
--Testcase 40:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
   ->  Sort
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.tableoid
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(8 rows)

--Testcase 41:
SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- whole-row reference
--Testcase 42:
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: ((t1.*)::ft1), t1.c3, t1.c1
   ->  Sort
         Output: ((t1.*)::ft1), t1.c3, t1.c1
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.*, t1.c3, t1.c1
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(8 rows)

--Testcase 43:
SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                               t1                                               
------------------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970","Fri Jan 02 00:00:00 1970",1,"1         ",foo,/node1/)
 (102,2,00102,"Sat Jan 03 00:00:00 1970","Sat Jan 03 00:00:00 1970",2,"2         ",foo,/node1/)
 (103,3,00103,"Sun Jan 04 00:00:00 1970","Sun Jan 04 00:00:00 1970",3,"3         ",foo,/node1/)
 (104,4,00104,"Mon Jan 05 00:00:00 1970","Mon Jan 05 00:00:00 1970",4,"4         ",foo,/node1/)
 (105,5,00105,"Tue Jan 06 00:00:00 1970","Tue Jan 06 00:00:00 1970",5,"5         ",foo,/node1/)
 (106,6,00106,"Wed Jan 07 00:00:00 1970","Wed Jan 07 00:00:00 1970",6,"6         ",foo,/node1/)
 (107,7,00107,"Thu Jan 08 00:00:00 1970","Thu Jan 08 00:00:00 1970",7,"7         ",foo,/node1/)
 (108,8,00108,"Fri Jan 09 00:00:00 1970","Fri Jan 09 00:00:00 1970",8,"8         ",foo,/node1/)
 (109,9,00109,"Sat Jan 10 00:00:00 1970","Sat Jan 10 00:00:00 1970",9,"9         ",foo,/node1/)
 (110,0,00110,"Sun Jan 11 00:00:00 1970","Sun Jan 11 00:00:00 1970",0,"0         ",foo,/node1/)
(10 rows)

-- empty result
--Testcase 44:
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

-- with WHERE clause
--Testcase 45:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: ((t1.c6)::text = '1'::text)
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c7 >= '1')) AND (("C_1" = 101))
(4 rows)

--Testcase 46:
SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- with FOR UPDATE/SHARE
--Testcase 47:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, ((t1.*)::ft1), t1.tableoid
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, t1.*, t1.tableoid
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 101))
(5 rows)

--Testcase 48:
SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 49:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, ((t1.*)::ft1), t1.tableoid
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl, t1.ctid, t1.*, t1.tableoid
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 102))
(5 rows)

--Testcase 50:
SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
(1 row)

-- aggregate
--Testcase 51:
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
--Testcase 52:
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /node1/
(10 rows)

-- subquery+MAX
--Testcase 53:
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
  c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
------+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 1000 |  0 | 01000 | Thu Jan 01 00:00:00 1970 | Thu Jan 01 00:00:00 1970 | 0  | 0          | foo | /node1/
(1 row)

-- used in CTE
--Testcase 54:
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |            c4            
----+----+-------+--------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970
(10 rows)

-- fixed values
--Testcase 55:
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
--Testcase 56:
SET enable_hashjoin TO false;
--Testcase 57:
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 58:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C_1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C_1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C_1"
   ->  Merge Join
         Output: t1.c1, t2."C_1"
         Merge Cond: (t1.c1 = t2."C_1")
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Sort
               Output: t2."C_1"
               Sort Key: t2."C_1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C_1"
                     Remote SQL: SELECT "C_1" FROM public."T1"
(17 rows)

--Testcase 59:
SELECT t1.c1, t2."C_1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C_1") OFFSET 100 LIMIT 10;
 c1  | C_1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 60:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C_1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C_1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C_1"
   ->  Merge Left Join
         Output: t1.c1, t2."C_1"
         Merge Cond: (t1.c1 = t2."C_1")
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Sort
               Output: t2."C_1"
               Sort Key: t2."C_1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C_1"
                     Remote SQL: SELECT "C_1" FROM public."T1"
(17 rows)

--Testcase 61:
SELECT t1.c1, t2."C_1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C_1") OFFSET 100 LIMIT 10;
 c1  | C_1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
--Testcase 62:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C_1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C_1"
   ->  Merge Left Join
         Output: t1."C_1"
         Merge Cond: (t1."C_1" = t3.c1)
         ->  Sort
               Output: t1."C_1"
               Sort Key: t1."C_1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C_1"
                     Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Materialize
               Output: t3.c1
               ->  Merge Join
                     Output: t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2_a t3
                                 Output: t3.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
(28 rows)

--Testcase 63:
SELECT t1."C_1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
 C_1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
--Testcase 64:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C_1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C_1", t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1."C_1", t2.c1, t3.c1
         Merge Cond: (t1."C_1" = t3.c1)
         ->  Sort
               Output: t1."C_1"
               Sort Key: t1."C_1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C_1"
                     Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Materialize
               Output: t3.c1, t2.c1
               ->  Merge Left Join
                     Output: t3.c1, t2.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2_a t3
                                 Output: t3.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
(28 rows)

--Testcase 65:
SELECT t1."C_1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
 C_1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
--Testcase 66:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C_1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C_1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C_1", t2.c1, t3.c1
         Merge Cond: (t1."C_1" = t3.c1)
         ->  Sort
               Output: t1."C_1"
               Sort Key: t1."C_1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C_1"
                     Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2_a t3
                                 Output: t3.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
(29 rows)

--Testcase 67:
SELECT t1."C_1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C_1") OFFSET 100 LIMIT 10;
 C_1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

--Testcase 68:
RESET enable_hashjoin;
--Testcase 69:
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
--Testcase 70:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

--Testcase 71:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 100)) AND ((c2 = 0))
(3 rows)

--Testcase 72:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" IS NULL))
(3 rows)

--Testcase 73:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" IS NOT NULL))
(3 rows)

--Testcase 74:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((round(abs("C_1"), 0) = 1))
(3 rows)

--Testcase 75:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = (- "C_1")))
(3 rows)

--Testcase 76:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: ('1'::numeric = ((t1.c1)::bigint !))
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 77:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: ((t1.c1 IS NOT NULL) IS DISTINCT FROM (t1.c1 IS NOT NULL))
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 78:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ("C_1" IN (c2, 1, ("C_1" + 0)))
(3 rows)

--Testcase 79:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, 3])[1])
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 80:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: ((t1.c6)::text = 'foo''s\bar'::text)
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 81:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo'))
(3 rows)

-- parameterized remote path for foreign table
--Testcase 82:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T1" a, ft2 b WHERE a."C_1" = 47 AND b.c1 = a.c2;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."C_1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
   Hash Cond: (a.c2 = b.c1)
   ->  Foreign Scan on "S 1"."T1" a
         Output: a."C_1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 47))
   ->  Hash
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
         ->  Foreign Scan on public.ft2_a b
               Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(11 rows)

--Testcase 83:
SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  | c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------+----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/ |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
(1 row)

-- check both safe and unsafe join conditions
--Testcase 84:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Merge Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
   Merge Cond: ((a.c1 = b.c1) AND ((upper((a.c7)::text)) = ((b.c7)::text)))
   ->  Sort
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl, (upper((a.c7)::text))
         Sort Key: a.c1, (upper((a.c7)::text))
         ->  Result
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl, upper((a.c7)::text)
               ->  Foreign Scan on public.ft2_a a
                     Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.spdurl
                       Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c2 = 6)) AND ((c8 = 'foo'))
   ->  Sort
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl, ((b.c7)::text)
         Sort Key: b.c1, ((b.c7)::text)
         ->  Result
               Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl, b.c7
               ->  Foreign Scan on public.ft2_a b
                     Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.spdurl
                       Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(19 rows)

--Testcase 85:
SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  | c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------+-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ |  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ |  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ |  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ |  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ |  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ |  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ |  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ |  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/
 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/
 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/
 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/
 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/
 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/
 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/
 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
--Testcase 86:
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
(4 rows)

--Testcase 87:
SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
--Testcase 88:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, random()
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(6 rows)

--Testcase 89:
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ((ft2.c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.c3
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(6 rows)

-- user-defined operator/function
--Testcase 90:
CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
--Testcase 91:
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
--Testcase 92:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan
         Output: (PARTIAL count(t1.c3))
           Remote SQL: SELECT count(c3) FROM public."T1" WHERE (("C_1" = abs(c2)))
(5 rows)

--Testcase 93:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 94:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan
         Output: (PARTIAL count(t1.c3))
           Remote SQL: SELECT count(c3) FROM public."T1" WHERE (("C_1" = c2))
(5 rows)

--Testcase 95:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
--Testcase 96:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 97:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 98:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 99:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
--Testcase 100:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Sort
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
               Filter: (t1.c1 === t1.c2)
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(9 rows)

--Testcase 101:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- but let's put them in an extension ...
--Testcase 102:
ALTER EXTENSION :DB_EXTENSIONNAME ADD FUNCTION postgres_fdw_abs(int);
--Testcase 103:
ALTER EXTENSION :DB_EXTENSIONNAME ADD OPERATOR === (int, int);
--Testcase 104:
-- Option 'extensions' is not supported
-- ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions :DB_EXTENSIONNAME);
-- ... now they can be shipped
--Testcase 105:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 106:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

--Testcase 107:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 108:
SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
--Testcase 109:
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Sort
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
               Filter: (t1.c1 === t1.c2)
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(9 rows)

--Testcase 110:
SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
-- ANALYZE ft4;
-- ANALYZE ft5;
-- join two tables
--Testcase 111:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1, t1.c3
                       Remote SQL: SELECT "C_1", c3 FROM public."T1"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1
                             Remote SQL: SELECT "C_1" FROM public."T1"
(16 rows)

--Testcase 112:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
--Testcase 113:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
               ->  Hash
                     Output: t1.c1, t1.c3, t3.c3, t3.c1
                     ->  Hash Join
                           Output: t1.c1, t1.c3, t3.c3, t3.c1
                           Hash Cond: (t1.c1 = t3.c1)
                           ->  Foreign Scan on public.ft1_a t1
                                 Output: t1.c1, t1.c3
                                   Remote SQL: SELECT "C_1", c3 FROM public."T1"
                           ->  Hash
                                 Output: t3.c3, t3.c1
                                 ->  Foreign Scan on public.ft4_a t3
                                       Output: t3.c3, t3.c1
                                         Remote SQL: SELECT c1, c3 FROM public."T3"
(24 rows)

--Testcase 114:
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
--Testcase 115:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(16 rows)

--Testcase 116:
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
--Testcase 117:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 118:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
--Testcase 119:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   ->  Foreign Scan on public.ft4_a t1
         Output: t1.c1, t1.c2
           Remote SQL: SELECT c1, c2 FROM public."T3" WHERE ((c1 < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5_a ft5
               Output: ft5.c1, ft5.c2
                 Remote SQL: SELECT c1, c2 FROM public."T4" WHERE ((c1 < 10))
(11 rows)

--Testcase 120:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
--Testcase 121:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Foreign Scan on public.ft4_a t1
         Output: t1.c1, t1.c2
           Remote SQL: SELECT c1, c2 FROM public."T3" WHERE ((c1 < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5_a ft5
               Output: ft5.c1, ft5.c2
                 Remote SQL: SELECT c1, c2 FROM public."T4" WHERE ((c1 < 10))
(12 rows)

--Testcase 122:
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
--Testcase 123:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft4_a t2
                     Output: t2.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t1.c1
                     ->  Foreign Scan on public.ft5_a t1
                           Output: t1.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(16 rows)

--Testcase 124:
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
--Testcase 125:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
(21 rows)

--Testcase 126:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
--Testcase 127:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(16 rows)

--Testcase 128:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
--Testcase 129:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c1
                       Remote SQL: SELECT c1 FROM public."T4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(14 rows)

--Testcase 130:
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

--Testcase 131:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4_a ft4
                 Remote SQL: SELECT NULL FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Materialize
               ->  Foreign Scan on public.ft5_a ft5
                       Remote SQL: SELECT NULL FROM public."T4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(9 rows)

--Testcase 132:
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
--Testcase 133:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (ft4.c1 = t2.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: t2.c1, t3.c1
               ->  Hash Left Join
                     Output: t2.c1, t3.c1
                     Hash Cond: (t2.c1 = t3.c1)
                     ->  Foreign Scan on public.ft4_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                     ->  Hash
                           Output: t3.c1
                           ->  Foreign Scan on public.ft5_a t3
                                 Output: t3.c1
                                   Remote SQL: SELECT c1 FROM public."T4"
(22 rows)

--Testcase 134:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
--Testcase 135:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4_1.c1 = ft4.c1)
         ->  Hash Full Join
               Output: ft4_1.c1, ft5.c1
               Hash Cond: (ft4_1.c1 = ft5.c1)
               Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
               ->  Foreign Scan on public.ft4_a ft4_1
                     Output: ft4_1.c1
                       Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
               ->  Hash
                     Output: ft5.c1
                     ->  Foreign Scan on public.ft5_a ft5
                           Output: ft5.c1
                             Remote SQL: SELECT c1 FROM public."T4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(23 rows)

--Testcase 136:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
--Testcase 137:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
   ->  Sort
         Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
               ->  Hash Full Join
                     Output: ft4.c1, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, ft5.c1, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Hash Cond: (ft4.c1 = ft5.c1)
                     Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.c1, ft4.ctid, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                     ->  Hash
                           Output: ft5.c1, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.c1, ft5.ctid, ft5.*, ft5.tableoid
                                   Remote SQL: SELECT c1, c2, c3 FROM public."T4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
               ->  Foreign Scan on "S 1"."T3"
                     Output: "T3".c1, "T3".*
                     Remote SQL: SELECT c1, c2, c3 FROM public."T3" WHERE ((c1 = 50))
(22 rows)

--Testcase 138:
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
--Testcase 139:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t2.c1 = t3.c1)
               ->  Hash Join
                     Output: t1.c1, t2.c1
                     Hash Cond: (t1.c1 = (t2.c1 + 1))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT c1 FROM public."T4"
               ->  Hash
                     Output: t3.c1
                     ->  Foreign Scan on public.ft4_a t3
                           Output: t3.c1
                             Remote SQL: SELECT c1 FROM public."T3"
(24 rows)

--Testcase 140:
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
--Testcase 141:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 142:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
--Testcase 143:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
(21 rows)

--Testcase 144:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
--Testcase 145:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2_a t1
                           Output: t1.c1
                             Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 146:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
--Testcase 147:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 148:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
--Testcase 149:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 150:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
--Testcase 151:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t3.c3
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
               ->  Materialize
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4_a t3
                           Output: t3.c3, t3.c1
                             Remote SQL: SELECT c1, c3 FROM public."T3"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
(21 rows)

--Testcase 152:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
--Testcase 153:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4_a t3
                     Output: t3.c3, t3.c1
                       Remote SQL: SELECT c1, c3 FROM public."T3"
(21 rows)

--Testcase 154:
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
--Testcase 155:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(17 rows)

--Testcase 156:
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
--Testcase 157:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c3
                 Remote SQL: SELECT "C_1", c3 FROM public."T1"
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
(14 rows)

--Testcase 158:
-- Option 'extensions' is not supported
-- ALTER SERVER :DB_SERVERNAME OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
--Testcase 159:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c3
                 Remote SQL: SELECT "C_1", c3 FROM public."T1"
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
(14 rows)

--Testcase 160:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions :DB_EXTENSIONNAME);
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
--Testcase 161:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                             Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
                     ->  Hash
                           Output: t2.c1, t2.ctid, ((t2.*)::ft2), t2.tableoid
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                                   Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(18 rows)

--Testcase 162:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 163:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                             Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
                     ->  Hash
                           Output: t2.c1, t2.ctid, ((t2.*)::ft2), t2.tableoid
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                                   Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(18 rows)

--Testcase 164:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
--Testcase 165:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                             Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
                     ->  Hash
                           Output: t2.c1, t2.ctid, ((t2.*)::ft2), t2.tableoid
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                                   Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(18 rows)

--Testcase 166:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

--Testcase 167:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.ctid, t2.ctid, ((t1.*)::ft1), t1.tableoid, ((t2.*)::ft2), t2.tableoid
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.ctid, t1.*, t1.tableoid
                             Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
                     ->  Hash
                           Output: t2.c1, t2.ctid, ((t2.*)::ft2), t2.tableoid
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1, t2.ctid, t2.*, t2.tableoid
                                   Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(18 rows)

--Testcase 168:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
--Testcase 169:
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Hash Join
           Output: t1.c1, t1.c3, t2.c1
           Hash Cond: (t1.c1 = t2.c1)
           ->  Foreign Scan on public.ft1_a t1
                 Output: t1.c1, t1.c3
                   Remote SQL: SELECT "C_1", c3 FROM public."T1"
           ->  Hash
                 Output: t2.c1
                 ->  Foreign Scan on public.ft2_a t2
                       Output: t2.c1
                         Remote SQL: SELECT "C_1" FROM public."T1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(19 rows)

--Testcase 170:
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
--Testcase 171:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.ctid, ((t1.*)::ft1), ((t2.*)::ft2), t1.c1, t1.c3
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.ctid, t1.*, t1.c1, t1.c3
                       Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
               ->  Hash
                     Output: ((t2.*)::ft2), t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.*, t2.c1
                             Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(16 rows)

-- SEMI JOIN, not pushed down
--Testcase 172:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1
               Inner Unique: true
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Hash
                     Output: t2.c1
                     ->  HashAggregate
                           Output: t2.c1
                           Group Key: t2.c1
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
(20 rows)

--Testcase 173:
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
--Testcase 174:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c2
                             Remote SQL: SELECT c2 FROM public."T1"
(16 rows)

--Testcase 175:
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
--Testcase 176:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Incremental Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         Presorted Key: t1.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Gather Merge
                     Output: t1.c1
                     Workers Planned: 1
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Parallel Append
                                 ->  Foreign Scan on public.ft1_a t1_1
                                       Output: t1_1.c1
                                         Remote SQL: SELECT "C_1" FROM public."T1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1
                             Remote SQL: SELECT "C_1" FROM public."T1"
(23 rows)

--Testcase 177:
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
--Testcase 178:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft5_a t1
                     Output: t1.c1
                       Remote SQL: SELECT c1 FROM public."T4"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft6_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(16 rows)

--Testcase 179:
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
--Testcase 180:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c8 = t2.c8)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1, t1.c8
                       Remote SQL: SELECT "C_1", c8 FROM public."T1"
               ->  Hash
                     Output: t2.c1, t2.c8
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.c8
                             Remote SQL: SELECT "C_1", c8 FROM public."T1"
(16 rows)

--Testcase 181:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
--Testcase 182:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1_a t1
                     Output: t1.c1, t1.c3
                       Remote SQL: SELECT "C_1", c3 FROM public."T1" WHERE ((c8 = 'foo'))
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1
                             Remote SQL: SELECT "C_1" FROM public."T1"
(16 rows)

--Testcase 183:
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
--Testcase 184:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: ((t1.c1 = t2.c1) AND (t1.c8 = t2.c8))
               ->  Sort
                     Output: t1.c1, t1.c3, t1.c8
                     Sort Key: t1.c1, t1.c8
                     ->  Foreign Scan on public.ft1_a t1
                           Output: t1.c1, t1.c3, t1.c8
                             Remote SQL: SELECT "C_1", c3, c8 FROM public."T1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c1, t2.c8
                     ->  Foreign Scan on public.ft2_a t2
                           Output: t2.c1, t2.c8
                             Remote SQL: SELECT "C_1", c8 FROM public."T1"
(20 rows)

--Testcase 185:
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
--Testcase 186:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  Sort
         Output: t1.c1, (avg((t1.c1 + t2.c1)))
         Sort Key: t1.c1
         ->  HashAggregate
               Output: t1.c1, avg((t1.c1 + t2.c1))
               Group Key: t1.c1
               ->  HashAggregate
                     Output: t1.c1, t2.c1
                     Group Key: t1.c1, t2.c1
                     ->  Append
                           ->  Hash Join
                                 Output: t1.c1, t2.c1
                                 Hash Cond: (t1.c1 = t2.c1)
                                 ->  Foreign Scan on public.ft1_a t1
                                       Output: t1.c1
                                         Remote SQL: SELECT "C_1" FROM public."T1"
                                 ->  Hash
                                       Output: t2.c1
                                       ->  Foreign Scan on public.ft2_a t2
                                             Output: t2.c1
                                               Remote SQL: SELECT "C_1" FROM public."T1"
                           ->  Hash Join
                                 Output: t1_1.c1, t2_1.c1
                                 Hash Cond: (t1_1.c1 = t2_1.c1)
                                 ->  Foreign Scan on public.ft1_a t1_1
                                       Output: t1_1.c1
                                         Remote SQL: SELECT "C_1" FROM public."T1"
                                 ->  Hash
                                       Output: t2_1.c1
                                       ->  Foreign Scan on public.ft2_a t2_1
                                             Output: t2_1.c1
                                               Remote SQL: SELECT "C_1" FROM public."T1"
(34 rows)

--Testcase 187:
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
--Testcase 188:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C_1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C_1" OFFSET 10 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: t1."C_1"
   ->  Sort
         Output: t1."C_1"
         Sort Key: t1."C_1"
         ->  Nested Loop
               Output: t1."C_1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C_1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
                     Remote SQL: SELECT "C_1", c2 FROM public."T1"
               ->  Unique
                     Output: t2.c1, t3.c1
                     ->  Merge Join
                           Output: t2.c1, t3.c1
                           Merge Cond: (t2.c1 = t3.c1)
                           ->  Sort
                                 Output: t2.c1
                                 Sort Key: t2.c1
                                 ->  Foreign Scan on public.ft1_a t2
                                       Output: t2.c1
                                       Filter: (t2.c2 = t1.c2)
                                         Remote SQL: SELECT "C_1", c2 FROM public."T1"
                           ->  Sort
                                 Output: t3.c1
                                 Sort Key: t3.c1
                                 ->  Foreign Scan on public.ft2_a t3
                                       Output: t3.c1
                                         Remote SQL: SELECT "C_1" FROM public."T1"
(28 rows)

--Testcase 189:
SELECT t1."C_1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C_1" OFFSET 10 LIMIT 10;
 C_1 
-----
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
--Testcase 190:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Gather
         Output: ft2.c1
         Workers Planned: 1
         ->  Parallel Append
               ->  Foreign Scan on public.ft2_a ft2_1
                     Output: ft2_1.c1
                       Remote SQL: SELECT "C_1" FROM public."T1" WHERE (("C_1" >= 10)) AND (("C_1" <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1_a ft1
               Output: 13
                 Remote SQL: SELECT NULL FROM public."T1" WHERE (("C_1" = 13))
(15 rows)

--Testcase 191:
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
--Testcase 192:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Join Filter: (ft4.c1 = ft1.c1)
   ->  Foreign Scan on public.ft4_a ft4
         Output: ft4.c1
           Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 10)) AND ((c1 <= 15))
   ->  Materialize
         Output: ft1.c1, ft2.c1, (13)
         ->  Nested Loop
               Output: ft1.c1, ft2.c1, 13
               ->  Gather
                     Output: ft1.c1
                     Workers Planned: 1
                     ->  Parallel Append
                           ->  Foreign Scan on public.ft1_a ft1_1
                                 Output: ft1_1.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1" WHERE (("C_1" = 12))
               ->  Materialize
                     Output: ft2.c1
                     ->  Foreign Scan on public.ft2_a ft2
                           Output: ft2.c1
                             Remote SQL: SELECT "C_1" FROM public."T1" WHERE (("C_1" = 12))
(22 rows)

--Testcase 193:
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15 ORDER BY ft4.c1;
 c1 | a  | b  | c  
----+----+----+----
 10 |    |    |   
 12 | 13 | 12 | 12
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
--Testcase 194:
UPDATE ft5_a_child SET c3 = null where c1 % 9 = 0;
--Testcase 195:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: ((ft5.*)::ft5), ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ((ft5.*)::ft5), ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1, ft4.c2
                 Remote SQL: SELECT c1, c2 FROM public."T3" WHERE ((c1 >= 10)) AND ((c1 <= 30))
         ->  Hash
               Output: ((ft5.*)::ft5), ft5.c1, ft5.c2, ft5.c3
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                       Remote SQL: SELECT c1, c2, c3 FROM public."T4"
(14 rows)

--Testcase 196:
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
          ft5           | c1 | c2 |   c3   | c1 | c2 
------------------------+----+----+--------+----+----
 (12,13,AAA012,/node1/) | 12 | 13 | AAA012 | 12 | 13
 (18,19,,/node1/)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024,/node1/) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030,/node1/) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
--Testcase 197:
CREATE TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
--Testcase 198:
INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
ANALYZE local_tbl;
--Testcase 199:
SET enable_nestloop TO false;
--Testcase 200:
SET enable_hashjoin TO false;
--Testcase 201:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.ctid, ft2.ctid, ft4.ctid, ft5.ctid, local_tbl.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
   ->  Merge Join
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.ctid, ft2.ctid, ft4.ctid, ft5.ctid, local_tbl.ctid, ((ft1.*)::ft1), ft1.tableoid, ((ft2.*)::ft2), ft2.tableoid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Inner Unique: true
         Merge Cond: (ft1.c2 = local_tbl.c1)
         ->  Merge Join
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid, ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
               Merge Cond: (ft1.c2 = ft4.c1)
               ->  Sort
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Sort Key: ft1.c2
                     ->  Merge Join
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                           Merge Cond: (ft1.c1 = ft2.c1)
                           ->  Sort
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                                 Sort Key: ft1.c1
                                 ->  Merge Join
                                       Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid, ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                                       Merge Cond: (ft5.c1 = ft1.c2)
                                       ->  Sort
                                             Output: ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                                             Sort Key: ft5.c1
                                             ->  Foreign Scan on public.ft5_a ft5
                                                   Output: ft5.c1, ft5.c2, ft5.c3, ft5.spdurl, ft5.ctid, ft5.*, ft5.tableoid
                                                     Remote SQL: SELECT c1, c2, c3 FROM public."T4"
                                       ->  Sort
                                             Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
                                             Sort Key: ft1.c2
                                             ->  Foreign Scan on public.ft1_a ft1
                                                   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl, ft1.ctid, ft1.*, ft1.tableoid
                                                     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" < 100))
                           ->  Sort
                                 Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ((ft2.*)::ft2), ft2.tableoid
                                 Sort Key: ft2.c1
                                 ->  Foreign Scan on public.ft2_a ft2
                                       Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.spdurl, ft2.ctid, ft2.*, ft2.tableoid
                                         Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" < 100))
               ->  Sort
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ((ft4.*)::ft4), ft4.tableoid
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.spdurl, ft4.ctid, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3"
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
(47 rows)

--Testcase 202:
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 ORDER BY ft1.c1 FOR UPDATE;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  | c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |  c3  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------+----+----+-------+--------------------------+--------------------------+----+------------+-----+---------+----+----+--------+---------+----+----+--------+---------+----+----+------
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ | 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ | 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ | 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ | 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ | 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ | 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ | 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ | 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ | 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  6 | 0006
(10 rows)

--Testcase 203:
RESET enable_nestloop;
--Testcase 204:
RESET enable_hashjoin;
--Testcase 205:
DROP TABLE local_tbl;
-- check join pushdown in situations where multiple userids are involved
--Testcase 206:
CREATE ROLE regress_view_owner SUPERUSER;
--Testcase 207:
CREATE USER MAPPING FOR regress_view_owner SERVER :DB_SERVERNAME;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
--Testcase 208:
CREATE VIEW v4 AS SELECT * FROM ft4;
--Testcase 209:
CREATE VIEW v5 AS SELECT * FROM ft5;
--Testcase 210:
ALTER VIEW v5 OWNER TO regress_view_owner;
--Testcase 211:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Hash Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Hash Cond: (ft4.c1 = ft5.c1)
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: ft5.c2, ft5.c1
                     ->  Foreign Scan on public.ft5_a ft5
                           Output: ft5.c2, ft5.c1
                             Remote SQL: SELECT c1, c2 FROM public."T4"
(16 rows)

--Testcase 212:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 213:
ALTER VIEW v4 OWNER TO regress_view_owner;
--Testcase 214:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Hash Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Hash Cond: (ft4.c1 = ft5.c1)
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: ft5.c2, ft5.c1
                     ->  Foreign Scan on public.ft5_a ft5
                           Output: ft5.c2, ft5.c1
                             Remote SQL: SELECT c1, c2 FROM public."T4"
(16 rows)

--Testcase 215:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 216:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Hash Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Hash Cond: (ft4.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT c1, c2 FROM public."T4"
(16 rows)

--Testcase 217:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 218:
ALTER VIEW v4 OWNER TO CURRENT_USER;
--Testcase 219:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Hash Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Hash Cond: (ft4.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a ft4
                     Output: ft4.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c2, t2.c1
                             Remote SQL: SELECT c1, c2 FROM public."T4"
(16 rows)

--Testcase 220:
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

--Testcase 221:
ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
--Testcase 222:
DROP OWNED BY regress_view_owner;
--Testcase 223:
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
--Testcase 224:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer), ft1.c2
   ->  Sort
         Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ft1.c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  Finalize GroupAggregate
               Output: count(ft1.c6), sum(ft1.c1), avg(ft1.c1), min(ft1.c2), max(ft1.c1), stddev(ft1.c2), ft1.c2
               Group Key: ft1.c2
               ->  Sort
                     Output: ft1.c2, (PARTIAL count(ft1.c6)), (PARTIAL sum(ft1.c1)), (PARTIAL avg(ft1.c1)), (PARTIAL min(ft1.c2)), (PARTIAL max(ft1.c1)), (PARTIAL stddev(ft1.c2))
                     Sort Key: ft1.c2
                     ->  Partial HashAggregate
                           Output: ft1.c2, PARTIAL count(ft1.c6), PARTIAL sum(ft1.c1), PARTIAL avg(ft1.c1), PARTIAL min(ft1.c2), PARTIAL max(ft1.c1), PARTIAL stddev(ft1.c2)
                           Group Key: ft1.c2
                           ->  Foreign Scan on public.ft1_a ft1
                                 Output: ft1.c2, ft1.c6, ft1.c1
                                   Remote SQL: SELECT "C_1", c2, c6 FROM public."T1" WHERE ((c2 < 5))
(17 rows)

--Testcase 225:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

--Testcase 226:
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), (((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer)), ft1.c2
   ->  Result
         Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ((sum(ft1.c1)) * ((random() <= '1'::double precision))::integer), ft1.c2
         ->  Sort
               Output: (count(ft1.c6)), (sum(ft1.c1)), (avg(ft1.c1)), (min(ft1.c2)), (max(ft1.c1)), (stddev(ft1.c2)), ft1.c2
               Sort Key: (count(ft1.c6)), (sum(ft1.c1))
               ->  Finalize GroupAggregate
                     Output: count(ft1.c6), sum(ft1.c1), avg(ft1.c1), min(ft1.c2), max(ft1.c1), stddev(ft1.c2), ft1.c2
                     Group Key: ft1.c2
                     ->  Sort
                           Output: ft1.c2, (PARTIAL count(ft1.c6)), (PARTIAL sum(ft1.c1)), (PARTIAL avg(ft1.c1)), (PARTIAL min(ft1.c2)), (PARTIAL max(ft1.c1)), (PARTIAL stddev(ft1.c2))
                           Sort Key: ft1.c2
                           ->  Partial HashAggregate
                                 Output: ft1.c2, PARTIAL count(ft1.c6), PARTIAL sum(ft1.c1), PARTIAL avg(ft1.c1), PARTIAL min(ft1.c2), PARTIAL max(ft1.c1), PARTIAL stddev(ft1.c2)
                                 Group Key: ft1.c2
                                 ->  Foreign Scan on public.ft1_a ft1
                                       Output: ft1.c2, ft1.c6, ft1.c1
                                         Remote SQL: SELECT "C_1", c2, c6 FROM public."T1" WHERE ((c2 < 5))
(19 rows)

--Testcase 227:
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
--Testcase 228:
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Aggregate
   Output: sum((ft1.c1 * ((random() <= '1'::double precision))::integer)), avg(ft1.c1)
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c1
           Remote SQL: SELECT "C_1" FROM public."T1"
(5 rows)

-- Aggregate over join query
--Testcase 229:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Gather
               Output: t1.c1, t1.c2
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft1_a t1_1
                           Output: t1_1.c1, t1_1.c2
                             Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 = 6))
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1_a t2
                     Output: t2.c1, t2.c2
                       Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 = 6))
(16 rows)

--Testcase 230:
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
--Testcase 231:
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Hash Join
         Output: t1.c1, t2.c1
         Hash Cond: (t1.c1 = t2.c1)
         Join Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1
                 Remote SQL: SELECT "C_1" FROM public."T1"
         ->  Hash
               Output: t2.c1
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c1
                       Remote SQL: SELECT "C_1" FROM public."T1"
(14 rows)

-- GROUP BY clause having expressions
--Testcase 232:
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Output: ((ft1.c2 / 2)), ((sum(ft1.c2) * ((ft1.c2 / 2))))
   Sort Key: ((ft1.c2 / 2))
   ->  HashAggregate
         Output: ((ft1.c2 / 2)), (sum(ft1.c2) * ((ft1.c2 / 2)))
         Group Key: (ft1.c2 / 2)
         ->  Foreign Scan on public.ft1_a ft1
               Output: (ft1.c2 / 2), ft1.c2
                 Remote SQL: SELECT c2 FROM public."T1"
(9 rows)

--Testcase 233:
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
--Testcase 234:
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  HashAggregate
               Output: ft1.c2, sum(ft1.c1), (sqrt((ft1.c1)::double precision))
               Group Key: ft1.c2, sqrt((ft1.c1)::double precision)
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c2, sqrt((ft1.c1)::double precision), ft1.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
(11 rows)

--Testcase 235:
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
--Testcase 236:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort
   Output: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2)), ft1.c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  HashAggregate
         Output: (ft1.c2 * ((random() <= '1'::double precision))::integer), (sum(ft1.c1) * ft1.c2), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(9 rows)

--Testcase 237:
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2  
------+--------
    0 |      0
    1 |  49600
    2 |  99400
    3 | 149400
    4 | 199600
    5 | 250000
    6 | 300600
    7 | 351400
    8 | 402400
    9 | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
--Testcase 238:
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2_a ft2
               Output: (ft2.c2 * ((random() <= '1'::double precision))::integer)
                 Remote SQL: SELECT c2 FROM public."T1"
(9 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
--Testcase 239:
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Output: (count(ft1.c2)), ft1.c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: count(ft1.c2), ft1.c2, (5), 7.0, (9)
         Group Key: ft1.c2, 5, 9
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, 5, 9
                 Remote SQL: SELECT c2 FROM public."T1"
(9 rows)

--Testcase 240:
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
--Testcase 241:
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, ft1.c2, (sum(ft1.c1))
   Sort Key: (sum(ft1.c1))
   ->  Finalize GroupAggregate
         Output: ft1.c2, ft1.c2, sum(ft1.c1)
         Group Key: ft1.c2, ft1.c2
         ->  Sort
               Output: ft1.c2, ft1.c2, (PARTIAL sum(ft1.c1))
               Sort Key: ft1.c2
               ->  Partial HashAggregate
                     Output: ft1.c2, ft1.c2, PARTIAL sum(ft1.c1)
                     Group Key: ft1.c2, ft1.c2
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c2, ft1.c2, ft1.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 > 6))
(15 rows)

--Testcase 242:
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2 
----+----
  7 |  7
  8 |  8
  9 |  9
(3 rows)

-- Testing HAVING clause shippability
--Testcase 243:
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: ft2.c2, sum(ft2.c1)
   Group Key: ft2.c2
   Filter: ((avg(ft2.c1) < '500'::numeric) AND (sum(ft2.c1) < 49800))
   ->  Sort
         Output: ft2.c2, (PARTIAL sum(ft2.c1)), (PARTIAL avg(ft2.c1))
         Sort Key: ft2.c2
         ->  Partial HashAggregate
               Output: ft2.c2, PARTIAL sum(ft2.c1), PARTIAL avg(ft2.c1)
               Group Key: ft2.c2
               ->  Foreign Scan on public.ft2_a ft2
                     Output: ft2.c2, ft2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1"
(13 rows)

--Testcase 244:
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
--Testcase 245:
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Finalize GroupAggregate
         Output: ft1.c5, NULL::bigint, (sqrt((ft1.c2)::double precision))
         Group Key: ft1.c5, (sqrt((ft1.c2)::double precision))
         Filter: ((avg(ft1.c1) < '500'::numeric) AND ((((avg(ft1.c1) / avg(ft1.c1)))::double precision * random()) <= '1'::double precision))
         ->  Sort
               Output: ft1.c5, (sqrt((ft1.c2)::double precision)), (PARTIAL avg(ft1.c1))
               Sort Key: ft1.c5, (sqrt((ft1.c2)::double precision))
               ->  Partial HashAggregate
                     Output: ft1.c5, (sqrt((ft1.c2)::double precision)), PARTIAL avg(ft1.c1)
                     Group Key: ft1.c5, sqrt((ft1.c2)::double precision)
                     ->  Foreign Scan on public.ft1_a ft1
                           Output: ft1.c5, sqrt((ft1.c2)::double precision), ft1.c1
                             Remote SQL: SELECT "C_1", c2, c5 FROM public."T1"
(15 rows)

--Testcase 246:
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
--Testcase 247:
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1)), ft1.c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(ft1.c1), ft1.c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(10 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
--Testcase 248:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                        QUERY PLAN                        
----------------------------------------------------------
 Finalize Aggregate
   Output: $0, sum(ft1.c1)
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan
         Output: (PARTIAL sum(ft1.c1))
           Remote SQL: SELECT sum("C_1") FROM public."T1"
(7 rows)

--Testcase 249:
select exists(select 1 from pg_enum), sum(c1) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

--Testcase 250:
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                     QUERY PLAN                      
-----------------------------------------------------
 GroupAggregate
   Output: ($0), sum(ft1.c1)
   Group Key: $0
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1_a ft1
         Output: $0, ft1.c1
           Remote SQL: SELECT "C_1" FROM public."T1"
(8 rows)

--Testcase 251:
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
--Testcase 252:
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(ft1.c1 ORDER BY ft1.c1)), ft1.c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  GroupAggregate
         Output: array_agg(ft1.c1 ORDER BY ft1.c1), ft1.c2
         Group Key: ft1.c2
         ->  Sort
               Output: ft1.c2, ft1.c1
               Sort Key: ft1.c2
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c2, ft1.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" < 100))
(12 rows)

--Testcase 253:
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
--Testcase 254:
explain (verbose, costs off)
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Aggregate
   Output: array_agg(ft2.c5 ORDER BY ft2.c1 DESC)
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c5, ft2.c1
           Remote SQL: SELECT "C_1", c5 FROM public."T1" WHERE (("C_1" < 50)) AND ((c2 = 6))
(5 rows)

--Testcase 255:
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
--Testcase 256:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote SQL: SELECT c1 FROM public."T3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT c1 FROM public."T4"
(21 rows)

--Testcase 257:
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
--Testcase 258:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote SQL: SELECT c1 FROM public."T3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT c1 FROM public."T4"
(21 rows)

--Testcase 259:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

--Testcase 260:
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Hash Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Foreign Scan on public.ft4_a t1
                           Output: t1.c1
                             Remote SQL: SELECT c1 FROM public."T3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT c1 FROM public."T4"
(21 rows)

--Testcase 261:
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
--Testcase 262:
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5)))), ft1.c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))))
   ->  HashAggregate
         Output: sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(9 rows)

--Testcase 263:
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
--Testcase 264:
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((ft1.c1 % 3)), sum(DISTINCT (ft1.c1 % 3) ORDER BY (ft1.c1 % 3)) FILTER (WHERE ((ft1.c1 % 3) < 2)), ft1.c2
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2, ft1.c1
           Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 = 6))
(6 rows)

--Testcase 265:
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
--Testcase 266:
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2, t2.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (((c2 % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1_a t1
                       Output: count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                         Remote SQL: SELECT NULL FROM public."T1" WHERE (("C_1" = 6))
(14 rows)

--Testcase 267:
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
--Testcase 268:
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Gather
               Output: (SubPlan 1)
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft2_a t2_1
                           Output: t2_1.c2, t2_1.c1
                             Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (((c2 % 6) = 0))
               SubPlan 1
                 ->  Aggregate
                       Output: count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       ->  Foreign Scan on public.ft1_a t1
                             Output: t1.c1
                               Remote SQL: SELECT "C_1" FROM public."T1" WHERE (("C_1" = 6))
(18 rows)

--Testcase 269:
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
--Testcase 270:
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision))), ft1.c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)), ft1.c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(9 rows)

--Testcase 271:
explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1_a ft1
         Output: ft1.c2
           Remote SQL: SELECT c2 FROM public."T1"
   SubPlan 1
     ->  Foreign Scan on public.ft1_a ft1_1
           Output: ft1_1.c2
             Remote SQL: SELECT c2 FROM public."T1" WHERE ((c2 < 5))
(9 rows)

-- Ordered-sets within aggregate
--Testcase 272:
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, rank('10'::character varying) WITHIN GROUP (ORDER BY ft1.c6), percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision))
   Group Key: ft1.c2
   Filter: (percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision)) < '500'::double precision)
   ->  Sort
         Output: ft1.c2, ft1.c6, ft1.c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c6, ft1.c1
                 Remote SQL: SELECT "C_1", c2, c6 FROM public."T1" WHERE ((c2 < 10))
(10 rows)

--Testcase 273:
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
--Testcase 274:
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c1, rank(ft1.c1, ft1.c2) WITHIN GROUP (ORDER BY ft1.c1, ft1.c2), ft1.c2
   Group Key: ft1.c1, ft1.c2
   ->  Sort
         Output: ft1.c1, ft1.c2
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c1, ft1.c2
                 Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" = 6))
(9 rows)

--Testcase 275:
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
--Testcase 276:
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
--Testcase 277:
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
--Testcase 278:
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
--Testcase 279:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Sort
         Output: ft1.c2, ft1.c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(9 rows)

-- Add function and aggregate into extension
--Testcase 280:
alter extension :DB_EXTENSIONNAME add function least_accum(anyelement, variadic anyarray);
--Testcase 281:
alter extension :DB_EXTENSIONNAME add aggregate least_agg(variadic items anyarray);
--Testcase 282:
-- alter server :DB_SERVERNAME options (set extensions :DB_EXTENSIONNAME);
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
--Testcase 283:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Sort
         Output: ft1.c2, ft1.c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 100))
(9 rows)

--Testcase 284:
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg 
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
--Testcase 285:
alter extension :DB_EXTENSIONNAME drop function least_accum(anyelement, variadic anyarray);
--Testcase 286:
alter extension :DB_EXTENSIONNAME drop aggregate least_agg(variadic items anyarray);
--Testcase 287:
-- alter server :DB_SERVERNAME options (set extensions :DB_EXTENSIONNAME);
-- Not pushed down as we have dropped objects from extension.
--Testcase 288:
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: ft1.c2, least_agg(VARIADIC ARRAY[ft1.c1])
   Group Key: ft1.c2
   ->  Sort
         Output: ft1.c2, ft1.c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1"
(9 rows)

-- Cleanup
--Testcase 289:
reset enable_hashagg;
--Testcase 290:
drop aggregate least_agg(variadic items anyarray);
--Testcase 291:
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
--Testcase 292:
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
--Testcase 293:
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
--Testcase 294:
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
--Testcase 295:
create operator family my_op_family using btree;
--Testcase 296:
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
--Testcase 297:
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
--Testcase 298:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c2, ft2.c1
           Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" < 100)) AND ((c2 = 6))
(6 rows)

-- Update local stats on ft2
ANALYZE ft2;
psql:sql/13.15/ported_odbc_fdw.sql:1205: WARNING:  skipping "ft2_a" --- cannot analyze this foreign table
-- Add into extension
--Testcase 299:
alter extension :DB_EXTENSIONNAME add operator class my_op_class using btree;
--Testcase 300:
alter extension :DB_EXTENSIONNAME add function my_op_cmp(a int, b int);
--Testcase 301:
alter extension :DB_EXTENSIONNAME add operator family my_op_family using btree;
--Testcase 302:
alter extension :DB_EXTENSIONNAME add operator public.<^(int, int);
--Testcase 303:
alter extension :DB_EXTENSIONNAME add operator public.=^(int, int);
--Testcase 304:
alter extension :DB_EXTENSIONNAME add operator public.>^(int, int);
--Testcase 305:
-- alter server :DB_SERVERNAME options (set extensions :DB_EXTENSIONNAME);
-- Now this will be pushed as sort operator is part of the extension.
--Testcase 306:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c2, ft2.c1
           Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" < 100)) AND ((c2 = 6))
(6 rows)

--Testcase 307:
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- Remove from extension
--Testcase 308:
alter extension :DB_EXTENSIONNAME drop operator class my_op_class using btree;
--Testcase 309:
alter extension :DB_EXTENSIONNAME drop function my_op_cmp(a int, b int);
--Testcase 310:
alter extension :DB_EXTENSIONNAME drop operator family my_op_family using btree;
--Testcase 311:
alter extension :DB_EXTENSIONNAME drop operator public.<^(int, int);
--Testcase 312:
alter extension :DB_EXTENSIONNAME drop operator public.=^(int, int);
--Testcase 313:
alter extension :DB_EXTENSIONNAME drop operator public.>^(int, int);
--Testcase 314:
-- alter server :DB_SERVERNAME options (set extensions :DB_EXTENSIONNAME);
-- This will not be pushed as sort operator is now removed from the extension.
--Testcase 315:
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(ft2.c1 ORDER BY ft2.c1 USING <^ NULLS LAST), ft2.c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2_a ft2
         Output: ft2.c2, ft2.c1
           Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" < 100)) AND ((c2 = 6))
(6 rows)

-- Cleanup
--Testcase 316:
drop operator class my_op_class using btree;
--Testcase 317:
drop function my_op_cmp(a int, b int);
--Testcase 318:
drop operator family my_op_family using btree;
--Testcase 319:
drop operator public.>^(int, int);
--Testcase 320:
drop operator public.=^(int, int);
--Testcase 321:
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
--Testcase 322:
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2_a t1
               Output: t1.c3, t1.c1
                 Remote SQL: SELECT "C_1", c3 FROM public."T1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2_a t2
                     Output: t2.c2
                       Remote SQL: SELECT c2 FROM public."T1"
(13 rows)

-- Subquery in FROM clause having aggregate
--Testcase 323:
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  HashAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Hash Join
               Output: x.b
               Inner Unique: true
               Hash Cond: (ft1.c2 = x.a)
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c2
                       Remote SQL: SELECT c2 FROM public."T1"
               ->  Hash
                     Output: x.b, x.a
                     ->  Subquery Scan on x
                           Output: x.b, x.a
                           ->  HashAggregate
                                 Output: ft1_1.c2, sum(ft1_1.c1)
                                 Group Key: ft1_1.c2
                                 ->  Foreign Scan on public.ft1_a ft1_1
                                       Output: ft1_1.c2, ft1_1.c1
                                         Remote SQL: SELECT "C_1", c2 FROM public."T1"
(23 rows)

--Testcase 324:
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
--Testcase 325:
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  HashAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < 10)) OR (sum(t2.c1) IS NULL))
         ->  Hash Full Join
               Output: t2.c1, t1.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4_a t1
                     Output: t1.c1
                       Remote SQL: SELECT c1 FROM public."T3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5_a t2
                           Output: t2.c1
                             Remote SQL: SELECT c1 FROM public."T4"
(18 rows)

--Testcase 326:
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
--Testcase 327:
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote SQL: SELECT c1 FROM public."T3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5_a ft5
                     Output: ft5.c1
                       Remote SQL: SELECT c1 FROM public."T4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(13 rows)

--Testcase 328:
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
--Testcase 329:
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: ((sum(ft1.c2) * ((random() <= '1'::double precision))::integer))
   Sort Key: ((sum(ft1.c2) * ((random() <= '1'::double precision))::integer))
   ->  Finalize Aggregate
         Output: (sum(ft1.c2) * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan
               Output: (PARTIAL sum(ft1.c2))
                 Remote SQL: SELECT sum(c2) FROM public."T1"
(8 rows)

--Testcase 330:
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
--Testcase 331:
set enable_hashagg to false;
--Testcase 332:
explain (verbose, costs off)
select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C_1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C_1" < 100 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c2, qry.sum
   Sort Key: t1.c2
   ->  Nested Loop
         Output: t1.c2, qry.sum
         ->  Foreign Scan on "S 1"."T1" t1
               Output: t1."C_1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 3)) AND (("C_1" < 100))
         ->  Subquery Scan on qry
               Output: qry.sum, t2.c1
               Filter: ((t1.c2 * 2) = qry.sum)
               ->  GroupAggregate
                     Output: sum((t2.c1 + t1."C_1")), t2.c1
                     Group Key: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c1
                                   Remote SQL: SELECT "C_1" FROM public."T1"
(20 rows)

--Testcase 333:
select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C_1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C_1" < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

--Testcase 334:
reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
--Testcase 335:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T1" AS ref_0,
    LATERAL (
        SELECT ref_0."C_1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C_1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C_1";
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ref_0.c2, ref_0."C_1", (ref_0.c2), ref_1.c3, ref_0."C_1"
   Sort Key: ref_0."C_1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C_1", (ref_0.c2), ref_1.c3, ref_0."C_1"
         ->  Gather
               Output: ref_3.c3
               Workers Planned: 1
               ->  Parallel Append
                     ->  Foreign Scan on public.ft2_a ref_3_1
                           Output: ref_3_1.c3
                             Remote SQL: SELECT c3 FROM public."T1" WHERE ((c3 = '00001'))
         ->  Materialize
               Output: ref_0.c2, ref_0."C_1", ref_1.c3, (ref_0.c2)
               ->  Nested Loop
                     Output: ref_0.c2, ref_0."C_1", ref_1.c3, (ref_0.c2)
                     ->  Foreign Scan on "S 1"."T1" ref_0
                           Output: ref_0."C_1", ref_0.c2, ref_0.c3, ref_0.c4, ref_0.c5, ref_0.c6, ref_0.c7, ref_0.c8
                           Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" < 10))
                     ->  Foreign Scan on public.ft1_a ref_1
                           Output: ref_1.c3, ref_0.c2
                             Remote SQL: SELECT c3 FROM public."T1" WHERE ((c3 = '00001'))
(22 rows)

--Testcase 336:
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T1" AS ref_0,
    LATERAL (
        SELECT ref_0."C_1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C_1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C_1";
 c2 | c1 | c2 |  c3   
----+----+----+-------
  1 |  1 |  1 | 00001
  2 |  2 |  2 | 00001
  3 |  3 |  3 | 00001
  4 |  4 |  4 | 00001
  5 |  5 |  5 | 00001
  6 |  6 |  6 | 00001
  7 |  7 |  7 | 00001
  8 |  8 |  8 | 00001
  9 |  9 |  9 | 00001
(9 rows)

-- Check with placeHolderVars
--Testcase 337:
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4_a ft4
               Output: ft4.c1
                 Remote SQL: SELECT c1 FROM public."T3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::bigint
                           ->  Hash Left Join
                                 Output: ft1.c1
                                 Hash Cond: (ft2.c1 = ft1.c1)
                                 ->  Foreign Scan on public.ft2_a ft2
                                       Output: ft2.c1
                                         Remote SQL: SELECT "C_1" FROM public."T1"
                                 ->  Hash
                                       Output: ft1.c1
                                       ->  Foreign Scan on public.ft1_a ft1
                                             Output: ft1.c1
                                               Remote SQL: SELECT "C_1" FROM public."T1"
(26 rows)

--Testcase 338:
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
--Testcase 339:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (sum(ft1.c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: ft1.c2, sum(ft1.c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 3))
(10 rows)

--Testcase 340:
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 341:
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (sum(ft1.c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: ft1.c2, sum(ft1.c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c1
                 Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 3))
(10 rows)

--Testcase 342:
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

--Testcase 343:
explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, ft1.c6, (sum(ft1.c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: ft1.c2, ft1.c6, sum(ft1.c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c2, ft1.c6, ft1.c1
                 Remote SQL: SELECT "C_1", c2, c6 FROM public."T1" WHERE ((c2 < 3))
(10 rows)

--Testcase 344:
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

--Testcase 345:
explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: ft1.c2, sum(ft1.c1), (GROUPING(ft1.c2))
   Group Key: ft1.c2
   ->  Sort
         Output: ft1.c2, (PARTIAL sum(ft1.c1)), (GROUPING(ft1.c2))
         Sort Key: ft1.c2
         ->  Partial HashAggregate
               Output: ft1.c2, PARTIAL sum(ft1.c1), GROUPING(ft1.c2)
               Group Key: ft1.c2
               ->  Foreign Scan on public.ft1_a ft1
                     Output: ft1.c2, ft1.c1
                       Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 3))
(12 rows)

--Testcase 346:
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
--Testcase 347:
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Unique
   Output: ((sum(ft2.c1) / 1000)), ft2.c2
   ->  Sort
         Output: ((sum(ft2.c1) / 1000)), ft2.c2
         Sort Key: ((sum(ft2.c1) / 1000))
         ->  Finalize GroupAggregate
               Output: (sum(ft2.c1) / 1000), ft2.c2
               Group Key: ft2.c2
               ->  Sort
                     Output: ft2.c2, (PARTIAL sum(ft2.c1))
                     Sort Key: ft2.c2
                     ->  Partial HashAggregate
                           Output: ft2.c2, PARTIAL sum(ft2.c1)
                           Group Key: ft2.c2
                           ->  Foreign Scan on public.ft2_a ft2
                                 Output: ft2.c2, ft2.c1
                                   Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE ((c2 < 6))
(17 rows)

--Testcase 348:
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
 s  
----
 49
 50
(2 rows)

-- WindowAgg
--Testcase 349:
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: ft2.c2, (sum(ft2.c2)), (count(ft2.c2) OVER (?)), ((ft2.c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: ft2.c2, (sum(ft2.c2)), count(ft2.c2) OVER (?), ((ft2.c2 % 2))
         ->  Sort
               Output: ft2.c2, ((ft2.c2 % 2)), (sum(ft2.c2))
               Sort Key: ((ft2.c2 % 2))
               ->  Finalize GroupAggregate
                     Output: ft2.c2, (ft2.c2 % 2), sum(ft2.c2)
                     Group Key: ft2.c2
                     ->  Sort
                           Output: ft2.c2, (PARTIAL sum(ft2.c2))
                           Sort Key: ft2.c2
                           ->  Partial HashAggregate
                                 Output: ft2.c2, PARTIAL sum(ft2.c2)
                                 Group Key: ft2.c2
                                 ->  Foreign Scan on public.ft2_a ft2
                                       Output: ft2.c2
                                         Remote SQL: SELECT c2 FROM public."T1" WHERE ((c2 < 10))
(20 rows)

--Testcase 350:
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count 
----+-----+-------
  0 |   0 |     5
  1 | 100 |     5
  2 | 200 |     5
  3 | 300 |     5
  4 | 400 |     5
  5 | 500 |     5
  6 | 600 |     5
  7 | 700 |     5
  8 | 800 |     5
  9 | 900 |     5
(10 rows)

--Testcase 351:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (array_agg(ft1.c2) OVER (?)), ((ft1.c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: ft1.c2, array_agg(ft1.c2) OVER (?), ((ft1.c2 % 2))
         ->  Sort
               Output: ft1.c2, ((ft1.c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  Group
                     Output: ft1.c2, (ft1.c2 % 2)
                     Group Key: ft1.c2
                     ->  Sort
                           Output: ft1.c2
                           Sort Key: ft1.c2
                           ->  Partial HashAggregate
                                 Output: ft1.c2
                                 Group Key: ft1.c2
                                 ->  Foreign Scan on public.ft1_a ft1
                                       Output: ft1.c2
                                         Remote SQL: SELECT c2 FROM public."T1" WHERE ((c2 < 10))
(20 rows)

--Testcase 352:
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {8,6,4,2,0}
  1 | {9,7,5,3,1}
  2 | {8,6,4,2}
  3 | {9,7,5,3}
  4 | {8,6,4}
  5 | {9,7,5}
  6 | {8,6}
  7 | {9,7}
  8 | {8}
  9 | {9}
(10 rows)

--Testcase 353:
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: ft1.c2, (array_agg(ft1.c2) OVER (?)), ((ft1.c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: ft1.c2, array_agg(ft1.c2) OVER (?), ((ft1.c2 % 2))
         ->  Sort
               Output: ft1.c2, ((ft1.c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  Group
                     Output: ft1.c2, (ft1.c2 % 2)
                     Group Key: ft1.c2
                     ->  Sort
                           Output: ft1.c2
                           Sort Key: ft1.c2
                           ->  Partial HashAggregate
                                 Output: ft1.c2
                                 Group Key: ft1.c2
                                 ->  Foreign Scan on public.ft1_a ft1
                                       Output: ft1.c2
                                         Remote SQL: SELECT c2 FROM public."T1" WHERE ((c2 < 10))
(20 rows)

--Testcase 354:
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
  0 | {0,2,4,6,8}
  1 | {1,3,5,7,9}
  2 | {2,4,6,8}
  3 | {3,5,7,9}
  4 | {4,6,8}
  5 | {5,7,9}
  6 | {6,8}
  7 | {7,9}
  8 | {8}
  9 | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
--Testcase 355:
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
--Testcase 356:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Gather
         Output: t1.c3
         Workers Planned: 1
         ->  Parallel Append
               ->  Foreign Scan on public.ft1_a t1_1
                     Output: t1_1.c3
                       Remote SQL: SELECT c3 FROM public."T1" WHERE (("C_1" = 1))
   ->  Materialize
         Output: t2.c3
         ->  Foreign Scan on public.ft2_a t2
               Output: t2.c3
                 Remote SQL: SELECT c3 FROM public."T1" WHERE (("C_1" = 2))
(14 rows)

--Testcase 357:
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

--Testcase 358:
EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
--Testcase 359:
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
--Testcase 360:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Sort Key: t1.c1
   ->  Hash Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Inner Unique: true
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Unique
                     Output: t2.c3
                     ->  Sort
                           Output: t2.c3
                           Sort Key: t2.c3
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c3
                                   Remote SQL: SELECT c3 FROM public."T1" WHERE (("C_1" > 10)) AND ((date(c4) = '1970-01-17'))
(20 rows)

--Testcase 361:
EXECUTE st2(10, 20);
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
(1 row)

--Testcase 362:
EXECUTE st2(101, 121);
 c1  | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
-----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
(1 row)

-- subquery using immutable function (can be sent to remote)
--Testcase 363:
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
--Testcase 364:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Sort Key: t1.c1
   ->  Hash Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Inner Unique: true
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1_a t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Unique
                     Output: t2.c3
                     ->  Sort
                           Output: t2.c3
                           Sort Key: t2.c3
                           ->  Foreign Scan on public.ft2_a t2
                                 Output: t2.c3
                                   Remote SQL: SELECT c3 FROM public."T1" WHERE (("C_1" > 10)) AND ((date(c5) = '1970-01-17'))
(20 rows)

--Testcase 365:
EXECUTE st3(10, 20);
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /node1/
(1 row)

--Testcase 366:
EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

-- custom plan should be chosen initially
--Testcase 367:
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
--Testcase 368:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

--Testcase 369:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

--Testcase 370:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

--Testcase 371:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

--Testcase 372:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
--Testcase 373:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.c1 = $1)
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

-- value of $1 should not be sent to remote
--Testcase 374:
PREPARE st5(text,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
--Testcase 375:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo')) AND (("C_1" = 1))
(3 rows)

--Testcase 376:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo')) AND (("C_1" = 1))
(3 rows)

--Testcase 377:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo')) AND (("C_1" = 1))
(3 rows)

--Testcase 378:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo')) AND (("C_1" = 1))
(3 rows)

--Testcase 379:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((c8 = 'foo')) AND (("C_1" = 1))
(3 rows)

--Testcase 380:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: ((t1.c8 = $1) AND (t1.c1 = $2))
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 381:
EXECUTE st5('foo', 1);
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- altering FDW options requires replanning
--Testcase 382:
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
--Testcase 383:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = c2))
(3 rows)

--Testcase 384:
PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
--Testcase 385:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: 1001, 101, 'foo'::text, NULL::timestamp without time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::text, NULL::text
(3 rows)

-- ALTER TABLE "S 1"."T1" RENAME TO "T 0";
-- ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T 0');
--Testcase 386:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = c2))
(3 rows)

--Testcase 387:
EXECUTE st6;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /node1/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /node1/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /node1/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /node1/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /node1/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /node1/
(9 rows)

--Testcase 388:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: 1001, 101, 'foo'::text, NULL::timestamp without time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::text, NULL::text
(3 rows)

-- ALTER TABLE "S 1"."T 0" RENAME TO T1;
-- ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T1');
--Testcase 389:
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
--Testcase 390:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 391:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (DROP extensions);
--Testcase 392:
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c3
         Filter: (t1.c1 === t1.c2)
           Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(6 rows)

--Testcase 393:
EXECUTE st8;
 count 
-------
     9
(1 row)

--Testcase 394:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions :DB_EXTENSIONNAME);
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
--Testcase 395:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
         Filter: (t1.tableoid = '1259'::oid)
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(6 rows)

--Testcase 396:
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1_a'::regclass LIMIT 1;
 c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 397:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: ((t1.tableoid)::regclass), t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: (t1.tableoid)::regclass, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(5 rows)

--Testcase 398:
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----------+----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 ft1_a    |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

--Testcase 399:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.ft1_a t1
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   Filter: (t1.ctid = '(0,2)'::tid)
     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(4 rows)

--Testcase 400:
-- Does not support system column ctid
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | spdurl 
----+----+----+----+----+----+----+----+--------
(0 rows)

--Testcase 401:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
   ->  Foreign Scan on public.ft1_a t1
         Output: t1.ctid, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8, t1.spdurl
           Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(5 rows)

--Testcase 402:
SELECT ctid, * FROM ft1 t1 LIMIT 1;
      ctid      | c1 | c2 |  c3   |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
----------------+----+----+-------+--------------------------+--------------------------+----+------------+-----+---------
 (4294967295,0) |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /node1/
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
--Testcase 403:
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
--Testcase 404:
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
--Testcase 405:
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

--Testcase 406:
DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
--Testcase 407:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c8 TYPE int;
--Testcase 408:
SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
psql:sql/13.15/ported_odbc_fdw.sql:1551: ERROR:  invalid input syntax for type integer: "foo"
--Testcase 409:
SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
psql:sql/13.15/ported_odbc_fdw.sql:1553: ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  parallel worker
--Testcase 410:
SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
psql:sql/13.15/ported_odbc_fdw.sql:1555: ERROR:  invalid input syntax for type integer: "foo"
CONTEXT:  parallel worker
--Testcase 411:
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
psql:sql/13.15/ported_odbc_fdw.sql:1557: ERROR:  invalid input syntax for type integer: "foo"
--Testcase 412:
ALTER FOREIGN TABLE ft1_a_child ALTER COLUMN c8 TYPE text;
-- does not support savepoint
-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
-- BEGIN;
-- DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
-- FETCH c;
-- SAVEPOINT s;
-- ERROR OUT;          -- ERROR
-- ROLLBACK TO s;
-- FETCH c;
-- SAVEPOINT s;
-- SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
-- ROLLBACK TO s;
-- FETCH c;
-- SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
-- COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
--Testcase 413:
-- create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
--Testcase 414:
create foreign table ft3_a_child (f1 text collate "C", f2 text, f3 varchar(10))
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct3');
--Testcase 997:
create table ft3 (f1 text collate "C", f2 text, f3 varchar(10), spdurl text) PARTITION BY LIST (spdurl);
--Testcase 998:
CREATE FOREIGN TABLE ft3_a PARTITION OF ft3 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- can be sent to remote
--Testcase 415:
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(3 rows)

--Testcase 416:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(3 rows)

--Testcase 417:
explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
(3 rows)

--Testcase 418:
explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: ((ft3.f3)::text = 'foo'::text)
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

--Testcase 419:
explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.spdurl, l.f1, l.f2, l.f3, l.spdurl
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3_a f
         Output: f.f1, f.f2, f.f3, f.spdurl
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3, l.spdurl
         ->  Foreign Scan on public.ft3_a l
               Output: l.f1, l.f2, l.f3, l.spdurl
                 Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(11 rows)

-- can't be sent to remote
--Testcase 420:
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: ((ft3.f1)::text = 'foo'::text)
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

--Testcase 421:
explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

--Testcase 422:
explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: ((ft3.f2)::text = 'foo'::text)
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

--Testcase 423:
explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan on public.ft3_a ft3
   Output: ft3.f1, ft3.f2, ft3.f3, ft3.spdurl
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

--Testcase 424:
explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.spdurl, l.f1, l.f2, l.f3, l.spdurl
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3_a f
         Output: f.f1, f.f2, f.f3, f.spdurl
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3, l.spdurl
         ->  Foreign Scan on public.ft3_a l
               Output: l.f1, l.f2, l.f3, l.spdurl
                 Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(11 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
--Testcase 425:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_a_child (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_a_child
   Remote SQL: INSERT INTO public."T1"("C_1", c2, c3, c4, c5, c6, c7, c8) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", "*SELECT*"."?column?_2", NULL::timestamp without time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::text
         ->  Limit
               Output: ((ft2.c1 + 1000)), ((ft2.c2 + 100)), ((ft2.c3 || ft2.c3))
               ->  Foreign Scan on public.ft2_a ft2
                     Output: (ft2.c1 + 1000), (ft2.c2 + 100), (ft2.c3 || ft2.c3)
                       Remote SQL: SELECT "C_1", c2, c3 FROM public."T1"
(9 rows)

--Testcase 426:
INSERT INTO ft2_a_child (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
--Testcase 427:
INSERT INTO ft2_a_child (c1,c2,c3)
  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc');
--Testcase 999:
SELECT * FROM ft2 WHERE c1 >= 1101 and c1 <= 1103;
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  
------+-----+-----+----+----+----+------------+----+---------
 1101 | 201 | aaa |    |    |    | ft2        |    | /node1/
 1102 | 202 | bbb |    |    |    | ft2        |    | /node1/
 1103 | 203 | ccc |    |    |    | ft2        |    | /node1/
(3 rows)

--Testcase 428:
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
--Testcase 429:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c2 = ?, c3 = ? WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1, (c2 + 300), (c3 || '_update3'::text), c4, c5, c6, c7, c8, c1
         Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((("C_1" % 10) = 3))
(5 rows)

--Testcase 430:
UPDATE ft2_a_child SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
--Testcase 431:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7;  -- can be pushed down
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c2 = ?, c3 = ? WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1, (c2 + 400), (c3 || '_update7'::text), c4, c5, c6, c7, c8, c1
         Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((("C_1" % 10) = 7))
(5 rows)

--Testcase 432:
UPDATE ft2_a_child SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7;
--Testcase 1000:
SELECT * FROM ft2 WHERE c1 % 10 = 7 ORDER BY c1;
  c1  | c2  |         c3         |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
------+-----+--------------------+--------------------------+--------------------------+----+------------+-----+---------
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /node1/
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo | /node1/
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo | /node1/
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo | /node1/
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /node1/
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo | /node1/
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo | /node1/
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo | /node1/
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo | /node1/
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo | /node1/
 1007 | 507 | 0000700007_update7 |                          |                          |    | ft2        |     | /node1/
 1017 | 507 | 0001700017_update7 |                          |                          |    | ft2        |     | /node1/
(102 rows)

--Testcase 433:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c2 = ft2_a_child.c2 + 500, c3 = ft2_a_child.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
                                                                                                                    QUERY PLAN                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c2 = ?, c3 = ?, c7 = ? WHERE "C_1" = ?
   ->  Hash Join
         Output: ft2_a_child.c1, (ft2_a_child.c2 + 500), (ft2_a_child.c3 || '_update9'::text), ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, 'ft2       '::character(10), ft2_a_child.c8, ft2_a_child.c1, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
         Hash Cond: (ft1.c1 = ft2_a_child.c2)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.ctid, ft1.c1, ft1.*, ft1.tableoid
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((("C_1" % 10) = 9))
         ->  Hash
               Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c8
               ->  Foreign Scan on public.ft2_a_child
                     Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c8
                     Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c8 FROM public."T1"
(13 rows)

--Testcase 434:
UPDATE ft2_a_child SET c2 = ft2_a_child.c2 + 500, c3 = ft2_a_child.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 9;
--Testcase 435:
EXPLAIN (verbose, costs off)
  DELETE FROM ft2_a_child WHERE c1 % 10 = 5;                               -- can be pushed down
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote SQL: DELETE FROM public."T1" WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1
         Remote SQL: SELECT "C_1" FROM public."T1" WHERE ((("C_1" % 10) = 5))
(5 rows)

--Testcase 436:
SELECT c1, c4 FROM ft2 WHERE c1 % 10 = 5;
  c1  |            c4            
------+--------------------------
    5 | Tue Jan 06 00:00:00 1970
   15 | Fri Jan 16 00:00:00 1970
   25 | Mon Jan 26 00:00:00 1970
   35 | Thu Feb 05 00:00:00 1970
   45 | Sun Feb 15 00:00:00 1970
   55 | Wed Feb 25 00:00:00 1970
   65 | Sat Mar 07 00:00:00 1970
   75 | Tue Mar 17 00:00:00 1970
   85 | Fri Mar 27 00:00:00 1970
   95 | Mon Apr 06 00:00:00 1970
  105 | Tue Jan 06 00:00:00 1970
  115 | Fri Jan 16 00:00:00 1970
  125 | Mon Jan 26 00:00:00 1970
  135 | Thu Feb 05 00:00:00 1970
  145 | Sun Feb 15 00:00:00 1970
  155 | Wed Feb 25 00:00:00 1970
  165 | Sat Mar 07 00:00:00 1970
  175 | Tue Mar 17 00:00:00 1970
  185 | Fri Mar 27 00:00:00 1970
  195 | Mon Apr 06 00:00:00 1970
  205 | Tue Jan 06 00:00:00 1970
  215 | Fri Jan 16 00:00:00 1970
  225 | Mon Jan 26 00:00:00 1970
  235 | Thu Feb 05 00:00:00 1970
  245 | Sun Feb 15 00:00:00 1970
  255 | Wed Feb 25 00:00:00 1970
  265 | Sat Mar 07 00:00:00 1970
  275 | Tue Mar 17 00:00:00 1970
  285 | Fri Mar 27 00:00:00 1970
  295 | Mon Apr 06 00:00:00 1970
  305 | Tue Jan 06 00:00:00 1970
  315 | Fri Jan 16 00:00:00 1970
  325 | Mon Jan 26 00:00:00 1970
  335 | Thu Feb 05 00:00:00 1970
  345 | Sun Feb 15 00:00:00 1970
  355 | Wed Feb 25 00:00:00 1970
  365 | Sat Mar 07 00:00:00 1970
  375 | Tue Mar 17 00:00:00 1970
  385 | Fri Mar 27 00:00:00 1970
  395 | Mon Apr 06 00:00:00 1970
  405 | Tue Jan 06 00:00:00 1970
  415 | Fri Jan 16 00:00:00 1970
  425 | Mon Jan 26 00:00:00 1970
  435 | Thu Feb 05 00:00:00 1970
  445 | Sun Feb 15 00:00:00 1970
  455 | Wed Feb 25 00:00:00 1970
  465 | Sat Mar 07 00:00:00 1970
  475 | Tue Mar 17 00:00:00 1970
  485 | Fri Mar 27 00:00:00 1970
  495 | Mon Apr 06 00:00:00 1970
  505 | Tue Jan 06 00:00:00 1970
  515 | Fri Jan 16 00:00:00 1970
  525 | Mon Jan 26 00:00:00 1970
  535 | Thu Feb 05 00:00:00 1970
  545 | Sun Feb 15 00:00:00 1970
  555 | Wed Feb 25 00:00:00 1970
  565 | Sat Mar 07 00:00:00 1970
  575 | Tue Mar 17 00:00:00 1970
  585 | Fri Mar 27 00:00:00 1970
  595 | Mon Apr 06 00:00:00 1970
  605 | Tue Jan 06 00:00:00 1970
  615 | Fri Jan 16 00:00:00 1970
  625 | Mon Jan 26 00:00:00 1970
  635 | Thu Feb 05 00:00:00 1970
  645 | Sun Feb 15 00:00:00 1970
  655 | Wed Feb 25 00:00:00 1970
  665 | Sat Mar 07 00:00:00 1970
  675 | Tue Mar 17 00:00:00 1970
  685 | Fri Mar 27 00:00:00 1970
  695 | Mon Apr 06 00:00:00 1970
  705 | Tue Jan 06 00:00:00 1970
  715 | Fri Jan 16 00:00:00 1970
  725 | Mon Jan 26 00:00:00 1970
  735 | Thu Feb 05 00:00:00 1970
  745 | Sun Feb 15 00:00:00 1970
  755 | Wed Feb 25 00:00:00 1970
  765 | Sat Mar 07 00:00:00 1970
  775 | Tue Mar 17 00:00:00 1970
  785 | Fri Mar 27 00:00:00 1970
  795 | Mon Apr 06 00:00:00 1970
  805 | Tue Jan 06 00:00:00 1970
  815 | Fri Jan 16 00:00:00 1970
  825 | Mon Jan 26 00:00:00 1970
  835 | Thu Feb 05 00:00:00 1970
  845 | Sun Feb 15 00:00:00 1970
  855 | Wed Feb 25 00:00:00 1970
  865 | Sat Mar 07 00:00:00 1970
  875 | Tue Mar 17 00:00:00 1970
  885 | Fri Mar 27 00:00:00 1970
  895 | Mon Apr 06 00:00:00 1970
  905 | Tue Jan 06 00:00:00 1970
  915 | Fri Jan 16 00:00:00 1970
  925 | Mon Jan 26 00:00:00 1970
  935 | Thu Feb 05 00:00:00 1970
  945 | Sun Feb 15 00:00:00 1970
  955 | Wed Feb 25 00:00:00 1970
  965 | Sat Mar 07 00:00:00 1970
  975 | Tue Mar 17 00:00:00 1970
  985 | Fri Mar 27 00:00:00 1970
  995 | Mon Apr 06 00:00:00 1970
 1005 | 
 1015 | 
 1105 | 
(103 rows)

--Testcase 1001:
DELETE FROM ft2_a_child WHERE c1 % 10 = 5;
--Testcase 437:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child USING ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote SQL: DELETE FROM public."T1" WHERE "C_1" = ?
   ->  Hash Join
         Output: ft2_a_child.c1, ft1.ctid, ((ft1.*)::ft1), ft1.tableoid
         Hash Cond: (ft1.c1 = ft2_a_child.c2)
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.ctid, ft1.c1, ft1.*, ft1.tableoid
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1" WHERE ((("C_1" % 10) = 2))
         ->  Hash
               Output: ft2_a_child.c1, ft2_a_child.c2
               ->  Foreign Scan on public.ft2_a_child
                     Output: ft2_a_child.c1, ft2_a_child.c2
                     Remote SQL: SELECT "C_1", c2 FROM public."T1"
(13 rows)

--Testcase 438:
DELETE FROM ft2_a_child USING ft1 WHERE ft1.c1 = ft2_a_child.c2 AND ft1.c1 % 10 = 2;
--Testcase 439:
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |         c3         |            c4            
------+-----+--------------------+--------------------------
    1 |   1 | 00001              | Fri Jan 02 00:00:00 1970
    3 | 303 | 00003_update3      | Sun Jan 04 00:00:00 1970
    4 |   4 | 00004              | Mon Jan 05 00:00:00 1970
    6 |   6 | 00006              | Wed Jan 07 00:00:00 1970
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970
    8 |   8 | 00008              | Fri Jan 09 00:00:00 1970
    9 | 509 | 00009_update9      | Sat Jan 10 00:00:00 1970
   10 |   0 | 00010              | Sun Jan 11 00:00:00 1970
   11 |   1 | 00011              | Mon Jan 12 00:00:00 1970
   13 | 303 | 00013_update3      | Wed Jan 14 00:00:00 1970
   14 |   4 | 00014              | Thu Jan 15 00:00:00 1970
   16 |   6 | 00016              | Sat Jan 17 00:00:00 1970
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970
   18 |   8 | 00018              | Mon Jan 19 00:00:00 1970
   19 | 509 | 00019_update9      | Tue Jan 20 00:00:00 1970
   20 |   0 | 00020              | Wed Jan 21 00:00:00 1970
   21 |   1 | 00021              | Thu Jan 22 00:00:00 1970
   23 | 303 | 00023_update3      | Sat Jan 24 00:00:00 1970
   24 |   4 | 00024              | Sun Jan 25 00:00:00 1970
   26 |   6 | 00026              | Tue Jan 27 00:00:00 1970
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970
   28 |   8 | 00028              | Thu Jan 29 00:00:00 1970
   29 | 509 | 00029_update9      | Fri Jan 30 00:00:00 1970
   30 |   0 | 00030              | Sat Jan 31 00:00:00 1970
   31 |   1 | 00031              | Sun Feb 01 00:00:00 1970
   33 | 303 | 00033_update3      | Tue Feb 03 00:00:00 1970
   34 |   4 | 00034              | Wed Feb 04 00:00:00 1970
   36 |   6 | 00036              | Fri Feb 06 00:00:00 1970
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970
   38 |   8 | 00038              | Sun Feb 08 00:00:00 1970
   39 | 509 | 00039_update9      | Mon Feb 09 00:00:00 1970
   40 |   0 | 00040              | Tue Feb 10 00:00:00 1970
   41 |   1 | 00041              | Wed Feb 11 00:00:00 1970
   43 | 303 | 00043_update3      | Fri Feb 13 00:00:00 1970
   44 |   4 | 00044              | Sat Feb 14 00:00:00 1970
   46 |   6 | 00046              | Mon Feb 16 00:00:00 1970
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970
   48 |   8 | 00048              | Wed Feb 18 00:00:00 1970
   49 | 509 | 00049_update9      | Thu Feb 19 00:00:00 1970
   50 |   0 | 00050              | Fri Feb 20 00:00:00 1970
   51 |   1 | 00051              | Sat Feb 21 00:00:00 1970
   53 | 303 | 00053_update3      | Mon Feb 23 00:00:00 1970
   54 |   4 | 00054              | Tue Feb 24 00:00:00 1970
   56 |   6 | 00056              | Thu Feb 26 00:00:00 1970
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970
   58 |   8 | 00058              | Sat Feb 28 00:00:00 1970
   59 | 509 | 00059_update9      | Sun Mar 01 00:00:00 1970
   60 |   0 | 00060              | Mon Mar 02 00:00:00 1970
   61 |   1 | 00061              | Tue Mar 03 00:00:00 1970
   63 | 303 | 00063_update3      | Thu Mar 05 00:00:00 1970
   64 |   4 | 00064              | Fri Mar 06 00:00:00 1970
   66 |   6 | 00066              | Sun Mar 08 00:00:00 1970
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970
   68 |   8 | 00068              | Tue Mar 10 00:00:00 1970
   69 | 509 | 00069_update9      | Wed Mar 11 00:00:00 1970
   70 |   0 | 00070              | Thu Mar 12 00:00:00 1970
   71 |   1 | 00071              | Fri Mar 13 00:00:00 1970
   73 | 303 | 00073_update3      | Sun Mar 15 00:00:00 1970
   74 |   4 | 00074              | Mon Mar 16 00:00:00 1970
   76 |   6 | 00076              | Wed Mar 18 00:00:00 1970
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970
   78 |   8 | 00078              | Fri Mar 20 00:00:00 1970
   79 | 509 | 00079_update9      | Sat Mar 21 00:00:00 1970
   80 |   0 | 00080              | Sun Mar 22 00:00:00 1970
   81 |   1 | 00081              | Mon Mar 23 00:00:00 1970
   83 | 303 | 00083_update3      | Wed Mar 25 00:00:00 1970
   84 |   4 | 00084              | Thu Mar 26 00:00:00 1970
   86 |   6 | 00086              | Sat Mar 28 00:00:00 1970
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970
   88 |   8 | 00088              | Mon Mar 30 00:00:00 1970
   89 | 509 | 00089_update9      | Tue Mar 31 00:00:00 1970
   90 |   0 | 00090              | Wed Apr 01 00:00:00 1970
   91 |   1 | 00091              | Thu Apr 02 00:00:00 1970
   93 | 303 | 00093_update3      | Sat Apr 04 00:00:00 1970
   94 |   4 | 00094              | Sun Apr 05 00:00:00 1970
   96 |   6 | 00096              | Tue Apr 07 00:00:00 1970
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970
   98 |   8 | 00098              | Thu Apr 09 00:00:00 1970
   99 | 509 | 00099_update9      | Fri Apr 10 00:00:00 1970
  100 |   0 | 00100              | Thu Jan 01 00:00:00 1970
  101 |   1 | 00101              | Fri Jan 02 00:00:00 1970
  103 | 303 | 00103_update3      | Sun Jan 04 00:00:00 1970
  104 |   4 | 00104              | Mon Jan 05 00:00:00 1970
  106 |   6 | 00106              | Wed Jan 07 00:00:00 1970
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970
  108 |   8 | 00108              | Fri Jan 09 00:00:00 1970
  109 | 509 | 00109_update9      | Sat Jan 10 00:00:00 1970
  110 |   0 | 00110              | Sun Jan 11 00:00:00 1970
  111 |   1 | 00111              | Mon Jan 12 00:00:00 1970
  113 | 303 | 00113_update3      | Wed Jan 14 00:00:00 1970
  114 |   4 | 00114              | Thu Jan 15 00:00:00 1970
  116 |   6 | 00116              | Sat Jan 17 00:00:00 1970
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970
  118 |   8 | 00118              | Mon Jan 19 00:00:00 1970
  119 | 509 | 00119_update9      | Tue Jan 20 00:00:00 1970
  120 |   0 | 00120              | Wed Jan 21 00:00:00 1970
  121 |   1 | 00121              | Thu Jan 22 00:00:00 1970
  123 | 303 | 00123_update3      | Sat Jan 24 00:00:00 1970
  124 |   4 | 00124              | Sun Jan 25 00:00:00 1970
  126 |   6 | 00126              | Tue Jan 27 00:00:00 1970
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970
  128 |   8 | 00128              | Thu Jan 29 00:00:00 1970
  129 | 509 | 00129_update9      | Fri Jan 30 00:00:00 1970
  130 |   0 | 00130              | Sat Jan 31 00:00:00 1970
  131 |   1 | 00131              | Sun Feb 01 00:00:00 1970
  133 | 303 | 00133_update3      | Tue Feb 03 00:00:00 1970
  134 |   4 | 00134              | Wed Feb 04 00:00:00 1970
  136 |   6 | 00136              | Fri Feb 06 00:00:00 1970
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970
  138 |   8 | 00138              | Sun Feb 08 00:00:00 1970
  139 | 509 | 00139_update9      | Mon Feb 09 00:00:00 1970
  140 |   0 | 00140              | Tue Feb 10 00:00:00 1970
  141 |   1 | 00141              | Wed Feb 11 00:00:00 1970
  143 | 303 | 00143_update3      | Fri Feb 13 00:00:00 1970
  144 |   4 | 00144              | Sat Feb 14 00:00:00 1970
  146 |   6 | 00146              | Mon Feb 16 00:00:00 1970
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970
  148 |   8 | 00148              | Wed Feb 18 00:00:00 1970
  149 | 509 | 00149_update9      | Thu Feb 19 00:00:00 1970
  150 |   0 | 00150              | Fri Feb 20 00:00:00 1970
  151 |   1 | 00151              | Sat Feb 21 00:00:00 1970
  153 | 303 | 00153_update3      | Mon Feb 23 00:00:00 1970
  154 |   4 | 00154              | Tue Feb 24 00:00:00 1970
  156 |   6 | 00156              | Thu Feb 26 00:00:00 1970
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970
  158 |   8 | 00158              | Sat Feb 28 00:00:00 1970
  159 | 509 | 00159_update9      | Sun Mar 01 00:00:00 1970
  160 |   0 | 00160              | Mon Mar 02 00:00:00 1970
  161 |   1 | 00161              | Tue Mar 03 00:00:00 1970
  163 | 303 | 00163_update3      | Thu Mar 05 00:00:00 1970
  164 |   4 | 00164              | Fri Mar 06 00:00:00 1970
  166 |   6 | 00166              | Sun Mar 08 00:00:00 1970
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970
  168 |   8 | 00168              | Tue Mar 10 00:00:00 1970
  169 | 509 | 00169_update9      | Wed Mar 11 00:00:00 1970
  170 |   0 | 00170              | Thu Mar 12 00:00:00 1970
  171 |   1 | 00171              | Fri Mar 13 00:00:00 1970
  173 | 303 | 00173_update3      | Sun Mar 15 00:00:00 1970
  174 |   4 | 00174              | Mon Mar 16 00:00:00 1970
  176 |   6 | 00176              | Wed Mar 18 00:00:00 1970
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970
  178 |   8 | 00178              | Fri Mar 20 00:00:00 1970
  179 | 509 | 00179_update9      | Sat Mar 21 00:00:00 1970
  180 |   0 | 00180              | Sun Mar 22 00:00:00 1970
  181 |   1 | 00181              | Mon Mar 23 00:00:00 1970
  183 | 303 | 00183_update3      | Wed Mar 25 00:00:00 1970
  184 |   4 | 00184              | Thu Mar 26 00:00:00 1970
  186 |   6 | 00186              | Sat Mar 28 00:00:00 1970
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970
  188 |   8 | 00188              | Mon Mar 30 00:00:00 1970
  189 | 509 | 00189_update9      | Tue Mar 31 00:00:00 1970
  190 |   0 | 00190              | Wed Apr 01 00:00:00 1970
  191 |   1 | 00191              | Thu Apr 02 00:00:00 1970
  193 | 303 | 00193_update3      | Sat Apr 04 00:00:00 1970
  194 |   4 | 00194              | Sun Apr 05 00:00:00 1970
  196 |   6 | 00196              | Tue Apr 07 00:00:00 1970
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970
  198 |   8 | 00198              | Thu Apr 09 00:00:00 1970
  199 | 509 | 00199_update9      | Fri Apr 10 00:00:00 1970
  200 |   0 | 00200              | Thu Jan 01 00:00:00 1970
  201 |   1 | 00201              | Fri Jan 02 00:00:00 1970
  203 | 303 | 00203_update3      | Sun Jan 04 00:00:00 1970
  204 |   4 | 00204              | Mon Jan 05 00:00:00 1970
  206 |   6 | 00206              | Wed Jan 07 00:00:00 1970
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970
  208 |   8 | 00208              | Fri Jan 09 00:00:00 1970
  209 | 509 | 00209_update9      | Sat Jan 10 00:00:00 1970
  210 |   0 | 00210              | Sun Jan 11 00:00:00 1970
  211 |   1 | 00211              | Mon Jan 12 00:00:00 1970
  213 | 303 | 00213_update3      | Wed Jan 14 00:00:00 1970
  214 |   4 | 00214              | Thu Jan 15 00:00:00 1970
  216 |   6 | 00216              | Sat Jan 17 00:00:00 1970
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970
  218 |   8 | 00218              | Mon Jan 19 00:00:00 1970
  219 | 509 | 00219_update9      | Tue Jan 20 00:00:00 1970
  220 |   0 | 00220              | Wed Jan 21 00:00:00 1970
  221 |   1 | 00221              | Thu Jan 22 00:00:00 1970
  223 | 303 | 00223_update3      | Sat Jan 24 00:00:00 1970
  224 |   4 | 00224              | Sun Jan 25 00:00:00 1970
  226 |   6 | 00226              | Tue Jan 27 00:00:00 1970
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970
  228 |   8 | 00228              | Thu Jan 29 00:00:00 1970
  229 | 509 | 00229_update9      | Fri Jan 30 00:00:00 1970
  230 |   0 | 00230              | Sat Jan 31 00:00:00 1970
  231 |   1 | 00231              | Sun Feb 01 00:00:00 1970
  233 | 303 | 00233_update3      | Tue Feb 03 00:00:00 1970
  234 |   4 | 00234              | Wed Feb 04 00:00:00 1970
  236 |   6 | 00236              | Fri Feb 06 00:00:00 1970
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970
  238 |   8 | 00238              | Sun Feb 08 00:00:00 1970
  239 | 509 | 00239_update9      | Mon Feb 09 00:00:00 1970
  240 |   0 | 00240              | Tue Feb 10 00:00:00 1970
  241 |   1 | 00241              | Wed Feb 11 00:00:00 1970
  243 | 303 | 00243_update3      | Fri Feb 13 00:00:00 1970
  244 |   4 | 00244              | Sat Feb 14 00:00:00 1970
  246 |   6 | 00246              | Mon Feb 16 00:00:00 1970
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970
  248 |   8 | 00248              | Wed Feb 18 00:00:00 1970
  249 | 509 | 00249_update9      | Thu Feb 19 00:00:00 1970
  250 |   0 | 00250              | Fri Feb 20 00:00:00 1970
  251 |   1 | 00251              | Sat Feb 21 00:00:00 1970
  253 | 303 | 00253_update3      | Mon Feb 23 00:00:00 1970
  254 |   4 | 00254              | Tue Feb 24 00:00:00 1970
  256 |   6 | 00256              | Thu Feb 26 00:00:00 1970
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970
  258 |   8 | 00258              | Sat Feb 28 00:00:00 1970
  259 | 509 | 00259_update9      | Sun Mar 01 00:00:00 1970
  260 |   0 | 00260              | Mon Mar 02 00:00:00 1970
  261 |   1 | 00261              | Tue Mar 03 00:00:00 1970
  263 | 303 | 00263_update3      | Thu Mar 05 00:00:00 1970
  264 |   4 | 00264              | Fri Mar 06 00:00:00 1970
  266 |   6 | 00266              | Sun Mar 08 00:00:00 1970
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970
  268 |   8 | 00268              | Tue Mar 10 00:00:00 1970
  269 | 509 | 00269_update9      | Wed Mar 11 00:00:00 1970
  270 |   0 | 00270              | Thu Mar 12 00:00:00 1970
  271 |   1 | 00271              | Fri Mar 13 00:00:00 1970
  273 | 303 | 00273_update3      | Sun Mar 15 00:00:00 1970
  274 |   4 | 00274              | Mon Mar 16 00:00:00 1970
  276 |   6 | 00276              | Wed Mar 18 00:00:00 1970
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970
  278 |   8 | 00278              | Fri Mar 20 00:00:00 1970
  279 | 509 | 00279_update9      | Sat Mar 21 00:00:00 1970
  280 |   0 | 00280              | Sun Mar 22 00:00:00 1970
  281 |   1 | 00281              | Mon Mar 23 00:00:00 1970
  283 | 303 | 00283_update3      | Wed Mar 25 00:00:00 1970
  284 |   4 | 00284              | Thu Mar 26 00:00:00 1970
  286 |   6 | 00286              | Sat Mar 28 00:00:00 1970
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970
  288 |   8 | 00288              | Mon Mar 30 00:00:00 1970
  289 | 509 | 00289_update9      | Tue Mar 31 00:00:00 1970
  290 |   0 | 00290              | Wed Apr 01 00:00:00 1970
  291 |   1 | 00291              | Thu Apr 02 00:00:00 1970
  293 | 303 | 00293_update3      | Sat Apr 04 00:00:00 1970
  294 |   4 | 00294              | Sun Apr 05 00:00:00 1970
  296 |   6 | 00296              | Tue Apr 07 00:00:00 1970
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970
  298 |   8 | 00298              | Thu Apr 09 00:00:00 1970
  299 | 509 | 00299_update9      | Fri Apr 10 00:00:00 1970
  300 |   0 | 00300              | Thu Jan 01 00:00:00 1970
  301 |   1 | 00301              | Fri Jan 02 00:00:00 1970
  303 | 303 | 00303_update3      | Sun Jan 04 00:00:00 1970
  304 |   4 | 00304              | Mon Jan 05 00:00:00 1970
  306 |   6 | 00306              | Wed Jan 07 00:00:00 1970
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970
  308 |   8 | 00308              | Fri Jan 09 00:00:00 1970
  309 | 509 | 00309_update9      | Sat Jan 10 00:00:00 1970
  310 |   0 | 00310              | Sun Jan 11 00:00:00 1970
  311 |   1 | 00311              | Mon Jan 12 00:00:00 1970
  313 | 303 | 00313_update3      | Wed Jan 14 00:00:00 1970
  314 |   4 | 00314              | Thu Jan 15 00:00:00 1970
  316 |   6 | 00316              | Sat Jan 17 00:00:00 1970
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970
  318 |   8 | 00318              | Mon Jan 19 00:00:00 1970
  319 | 509 | 00319_update9      | Tue Jan 20 00:00:00 1970
  320 |   0 | 00320              | Wed Jan 21 00:00:00 1970
  321 |   1 | 00321              | Thu Jan 22 00:00:00 1970
  323 | 303 | 00323_update3      | Sat Jan 24 00:00:00 1970
  324 |   4 | 00324              | Sun Jan 25 00:00:00 1970
  326 |   6 | 00326              | Tue Jan 27 00:00:00 1970
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970
  328 |   8 | 00328              | Thu Jan 29 00:00:00 1970
  329 | 509 | 00329_update9      | Fri Jan 30 00:00:00 1970
  330 |   0 | 00330              | Sat Jan 31 00:00:00 1970
  331 |   1 | 00331              | Sun Feb 01 00:00:00 1970
  333 | 303 | 00333_update3      | Tue Feb 03 00:00:00 1970
  334 |   4 | 00334              | Wed Feb 04 00:00:00 1970
  336 |   6 | 00336              | Fri Feb 06 00:00:00 1970
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970
  338 |   8 | 00338              | Sun Feb 08 00:00:00 1970
  339 | 509 | 00339_update9      | Mon Feb 09 00:00:00 1970
  340 |   0 | 00340              | Tue Feb 10 00:00:00 1970
  341 |   1 | 00341              | Wed Feb 11 00:00:00 1970
  343 | 303 | 00343_update3      | Fri Feb 13 00:00:00 1970
  344 |   4 | 00344              | Sat Feb 14 00:00:00 1970
  346 |   6 | 00346              | Mon Feb 16 00:00:00 1970
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970
  348 |   8 | 00348              | Wed Feb 18 00:00:00 1970
  349 | 509 | 00349_update9      | Thu Feb 19 00:00:00 1970
  350 |   0 | 00350              | Fri Feb 20 00:00:00 1970
  351 |   1 | 00351              | Sat Feb 21 00:00:00 1970
  353 | 303 | 00353_update3      | Mon Feb 23 00:00:00 1970
  354 |   4 | 00354              | Tue Feb 24 00:00:00 1970
  356 |   6 | 00356              | Thu Feb 26 00:00:00 1970
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970
  358 |   8 | 00358              | Sat Feb 28 00:00:00 1970
  359 | 509 | 00359_update9      | Sun Mar 01 00:00:00 1970
  360 |   0 | 00360              | Mon Mar 02 00:00:00 1970
  361 |   1 | 00361              | Tue Mar 03 00:00:00 1970
  363 | 303 | 00363_update3      | Thu Mar 05 00:00:00 1970
  364 |   4 | 00364              | Fri Mar 06 00:00:00 1970
  366 |   6 | 00366              | Sun Mar 08 00:00:00 1970
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970
  368 |   8 | 00368              | Tue Mar 10 00:00:00 1970
  369 | 509 | 00369_update9      | Wed Mar 11 00:00:00 1970
  370 |   0 | 00370              | Thu Mar 12 00:00:00 1970
  371 |   1 | 00371              | Fri Mar 13 00:00:00 1970
  373 | 303 | 00373_update3      | Sun Mar 15 00:00:00 1970
  374 |   4 | 00374              | Mon Mar 16 00:00:00 1970
  376 |   6 | 00376              | Wed Mar 18 00:00:00 1970
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970
  378 |   8 | 00378              | Fri Mar 20 00:00:00 1970
  379 | 509 | 00379_update9      | Sat Mar 21 00:00:00 1970
  380 |   0 | 00380              | Sun Mar 22 00:00:00 1970
  381 |   1 | 00381              | Mon Mar 23 00:00:00 1970
  383 | 303 | 00383_update3      | Wed Mar 25 00:00:00 1970
  384 |   4 | 00384              | Thu Mar 26 00:00:00 1970
  386 |   6 | 00386              | Sat Mar 28 00:00:00 1970
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970
  388 |   8 | 00388              | Mon Mar 30 00:00:00 1970
  389 | 509 | 00389_update9      | Tue Mar 31 00:00:00 1970
  390 |   0 | 00390              | Wed Apr 01 00:00:00 1970
  391 |   1 | 00391              | Thu Apr 02 00:00:00 1970
  393 | 303 | 00393_update3      | Sat Apr 04 00:00:00 1970
  394 |   4 | 00394              | Sun Apr 05 00:00:00 1970
  396 |   6 | 00396              | Tue Apr 07 00:00:00 1970
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970
  398 |   8 | 00398              | Thu Apr 09 00:00:00 1970
  399 | 509 | 00399_update9      | Fri Apr 10 00:00:00 1970
  400 |   0 | 00400              | Thu Jan 01 00:00:00 1970
  401 |   1 | 00401              | Fri Jan 02 00:00:00 1970
  403 | 303 | 00403_update3      | Sun Jan 04 00:00:00 1970
  404 |   4 | 00404              | Mon Jan 05 00:00:00 1970
  406 |   6 | 00406              | Wed Jan 07 00:00:00 1970
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970
  408 |   8 | 00408              | Fri Jan 09 00:00:00 1970
  409 | 509 | 00409_update9      | Sat Jan 10 00:00:00 1970
  410 |   0 | 00410              | Sun Jan 11 00:00:00 1970
  411 |   1 | 00411              | Mon Jan 12 00:00:00 1970
  413 | 303 | 00413_update3      | Wed Jan 14 00:00:00 1970
  414 |   4 | 00414              | Thu Jan 15 00:00:00 1970
  416 |   6 | 00416              | Sat Jan 17 00:00:00 1970
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970
  418 |   8 | 00418              | Mon Jan 19 00:00:00 1970
  419 | 509 | 00419_update9      | Tue Jan 20 00:00:00 1970
  420 |   0 | 00420              | Wed Jan 21 00:00:00 1970
  421 |   1 | 00421              | Thu Jan 22 00:00:00 1970
  423 | 303 | 00423_update3      | Sat Jan 24 00:00:00 1970
  424 |   4 | 00424              | Sun Jan 25 00:00:00 1970
  426 |   6 | 00426              | Tue Jan 27 00:00:00 1970
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970
  428 |   8 | 00428              | Thu Jan 29 00:00:00 1970
  429 | 509 | 00429_update9      | Fri Jan 30 00:00:00 1970
  430 |   0 | 00430              | Sat Jan 31 00:00:00 1970
  431 |   1 | 00431              | Sun Feb 01 00:00:00 1970
  433 | 303 | 00433_update3      | Tue Feb 03 00:00:00 1970
  434 |   4 | 00434              | Wed Feb 04 00:00:00 1970
  436 |   6 | 00436              | Fri Feb 06 00:00:00 1970
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970
  438 |   8 | 00438              | Sun Feb 08 00:00:00 1970
  439 | 509 | 00439_update9      | Mon Feb 09 00:00:00 1970
  440 |   0 | 00440              | Tue Feb 10 00:00:00 1970
  441 |   1 | 00441              | Wed Feb 11 00:00:00 1970
  443 | 303 | 00443_update3      | Fri Feb 13 00:00:00 1970
  444 |   4 | 00444              | Sat Feb 14 00:00:00 1970
  446 |   6 | 00446              | Mon Feb 16 00:00:00 1970
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970
  448 |   8 | 00448              | Wed Feb 18 00:00:00 1970
  449 | 509 | 00449_update9      | Thu Feb 19 00:00:00 1970
  450 |   0 | 00450              | Fri Feb 20 00:00:00 1970
  451 |   1 | 00451              | Sat Feb 21 00:00:00 1970
  453 | 303 | 00453_update3      | Mon Feb 23 00:00:00 1970
  454 |   4 | 00454              | Tue Feb 24 00:00:00 1970
  456 |   6 | 00456              | Thu Feb 26 00:00:00 1970
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970
  458 |   8 | 00458              | Sat Feb 28 00:00:00 1970
  459 | 509 | 00459_update9      | Sun Mar 01 00:00:00 1970
  460 |   0 | 00460              | Mon Mar 02 00:00:00 1970
  461 |   1 | 00461              | Tue Mar 03 00:00:00 1970
  463 | 303 | 00463_update3      | Thu Mar 05 00:00:00 1970
  464 |   4 | 00464              | Fri Mar 06 00:00:00 1970
  466 |   6 | 00466              | Sun Mar 08 00:00:00 1970
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970
  468 |   8 | 00468              | Tue Mar 10 00:00:00 1970
  469 | 509 | 00469_update9      | Wed Mar 11 00:00:00 1970
  470 |   0 | 00470              | Thu Mar 12 00:00:00 1970
  471 |   1 | 00471              | Fri Mar 13 00:00:00 1970
  473 | 303 | 00473_update3      | Sun Mar 15 00:00:00 1970
  474 |   4 | 00474              | Mon Mar 16 00:00:00 1970
  476 |   6 | 00476              | Wed Mar 18 00:00:00 1970
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970
  478 |   8 | 00478              | Fri Mar 20 00:00:00 1970
  479 | 509 | 00479_update9      | Sat Mar 21 00:00:00 1970
  480 |   0 | 00480              | Sun Mar 22 00:00:00 1970
  481 |   1 | 00481              | Mon Mar 23 00:00:00 1970
  483 | 303 | 00483_update3      | Wed Mar 25 00:00:00 1970
  484 |   4 | 00484              | Thu Mar 26 00:00:00 1970
  486 |   6 | 00486              | Sat Mar 28 00:00:00 1970
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970
  488 |   8 | 00488              | Mon Mar 30 00:00:00 1970
  489 | 509 | 00489_update9      | Tue Mar 31 00:00:00 1970
  490 |   0 | 00490              | Wed Apr 01 00:00:00 1970
  491 |   1 | 00491              | Thu Apr 02 00:00:00 1970
  493 | 303 | 00493_update3      | Sat Apr 04 00:00:00 1970
  494 |   4 | 00494              | Sun Apr 05 00:00:00 1970
  496 |   6 | 00496              | Tue Apr 07 00:00:00 1970
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970
  498 |   8 | 00498              | Thu Apr 09 00:00:00 1970
  499 | 509 | 00499_update9      | Fri Apr 10 00:00:00 1970
  500 |   0 | 00500              | Thu Jan 01 00:00:00 1970
  501 |   1 | 00501              | Fri Jan 02 00:00:00 1970
  503 | 303 | 00503_update3      | Sun Jan 04 00:00:00 1970
  504 |   4 | 00504              | Mon Jan 05 00:00:00 1970
  506 |   6 | 00506              | Wed Jan 07 00:00:00 1970
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970
  508 |   8 | 00508              | Fri Jan 09 00:00:00 1970
  509 | 509 | 00509_update9      | Sat Jan 10 00:00:00 1970
  510 |   0 | 00510              | Sun Jan 11 00:00:00 1970
  511 |   1 | 00511              | Mon Jan 12 00:00:00 1970
  513 | 303 | 00513_update3      | Wed Jan 14 00:00:00 1970
  514 |   4 | 00514              | Thu Jan 15 00:00:00 1970
  516 |   6 | 00516              | Sat Jan 17 00:00:00 1970
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970
  518 |   8 | 00518              | Mon Jan 19 00:00:00 1970
  519 | 509 | 00519_update9      | Tue Jan 20 00:00:00 1970
  520 |   0 | 00520              | Wed Jan 21 00:00:00 1970
  521 |   1 | 00521              | Thu Jan 22 00:00:00 1970
  523 | 303 | 00523_update3      | Sat Jan 24 00:00:00 1970
  524 |   4 | 00524              | Sun Jan 25 00:00:00 1970
  526 |   6 | 00526              | Tue Jan 27 00:00:00 1970
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970
  528 |   8 | 00528              | Thu Jan 29 00:00:00 1970
  529 | 509 | 00529_update9      | Fri Jan 30 00:00:00 1970
  530 |   0 | 00530              | Sat Jan 31 00:00:00 1970
  531 |   1 | 00531              | Sun Feb 01 00:00:00 1970
  533 | 303 | 00533_update3      | Tue Feb 03 00:00:00 1970
  534 |   4 | 00534              | Wed Feb 04 00:00:00 1970
  536 |   6 | 00536              | Fri Feb 06 00:00:00 1970
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970
  538 |   8 | 00538              | Sun Feb 08 00:00:00 1970
  539 | 509 | 00539_update9      | Mon Feb 09 00:00:00 1970
  540 |   0 | 00540              | Tue Feb 10 00:00:00 1970
  541 |   1 | 00541              | Wed Feb 11 00:00:00 1970
  543 | 303 | 00543_update3      | Fri Feb 13 00:00:00 1970
  544 |   4 | 00544              | Sat Feb 14 00:00:00 1970
  546 |   6 | 00546              | Mon Feb 16 00:00:00 1970
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970
  548 |   8 | 00548              | Wed Feb 18 00:00:00 1970
  549 | 509 | 00549_update9      | Thu Feb 19 00:00:00 1970
  550 |   0 | 00550              | Fri Feb 20 00:00:00 1970
  551 |   1 | 00551              | Sat Feb 21 00:00:00 1970
  553 | 303 | 00553_update3      | Mon Feb 23 00:00:00 1970
  554 |   4 | 00554              | Tue Feb 24 00:00:00 1970
  556 |   6 | 00556              | Thu Feb 26 00:00:00 1970
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970
  558 |   8 | 00558              | Sat Feb 28 00:00:00 1970
  559 | 509 | 00559_update9      | Sun Mar 01 00:00:00 1970
  560 |   0 | 00560              | Mon Mar 02 00:00:00 1970
  561 |   1 | 00561              | Tue Mar 03 00:00:00 1970
  563 | 303 | 00563_update3      | Thu Mar 05 00:00:00 1970
  564 |   4 | 00564              | Fri Mar 06 00:00:00 1970
  566 |   6 | 00566              | Sun Mar 08 00:00:00 1970
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970
  568 |   8 | 00568              | Tue Mar 10 00:00:00 1970
  569 | 509 | 00569_update9      | Wed Mar 11 00:00:00 1970
  570 |   0 | 00570              | Thu Mar 12 00:00:00 1970
  571 |   1 | 00571              | Fri Mar 13 00:00:00 1970
  573 | 303 | 00573_update3      | Sun Mar 15 00:00:00 1970
  574 |   4 | 00574              | Mon Mar 16 00:00:00 1970
  576 |   6 | 00576              | Wed Mar 18 00:00:00 1970
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970
  578 |   8 | 00578              | Fri Mar 20 00:00:00 1970
  579 | 509 | 00579_update9      | Sat Mar 21 00:00:00 1970
  580 |   0 | 00580              | Sun Mar 22 00:00:00 1970
  581 |   1 | 00581              | Mon Mar 23 00:00:00 1970
  583 | 303 | 00583_update3      | Wed Mar 25 00:00:00 1970
  584 |   4 | 00584              | Thu Mar 26 00:00:00 1970
  586 |   6 | 00586              | Sat Mar 28 00:00:00 1970
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970
  588 |   8 | 00588              | Mon Mar 30 00:00:00 1970
  589 | 509 | 00589_update9      | Tue Mar 31 00:00:00 1970
  590 |   0 | 00590              | Wed Apr 01 00:00:00 1970
  591 |   1 | 00591              | Thu Apr 02 00:00:00 1970
  593 | 303 | 00593_update3      | Sat Apr 04 00:00:00 1970
  594 |   4 | 00594              | Sun Apr 05 00:00:00 1970
  596 |   6 | 00596              | Tue Apr 07 00:00:00 1970
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970
  598 |   8 | 00598              | Thu Apr 09 00:00:00 1970
  599 | 509 | 00599_update9      | Fri Apr 10 00:00:00 1970
  600 |   0 | 00600              | Thu Jan 01 00:00:00 1970
  601 |   1 | 00601              | Fri Jan 02 00:00:00 1970
  603 | 303 | 00603_update3      | Sun Jan 04 00:00:00 1970
  604 |   4 | 00604              | Mon Jan 05 00:00:00 1970
  606 |   6 | 00606              | Wed Jan 07 00:00:00 1970
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970
  608 |   8 | 00608              | Fri Jan 09 00:00:00 1970
  609 | 509 | 00609_update9      | Sat Jan 10 00:00:00 1970
  610 |   0 | 00610              | Sun Jan 11 00:00:00 1970
  611 |   1 | 00611              | Mon Jan 12 00:00:00 1970
  613 | 303 | 00613_update3      | Wed Jan 14 00:00:00 1970
  614 |   4 | 00614              | Thu Jan 15 00:00:00 1970
  616 |   6 | 00616              | Sat Jan 17 00:00:00 1970
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970
  618 |   8 | 00618              | Mon Jan 19 00:00:00 1970
  619 | 509 | 00619_update9      | Tue Jan 20 00:00:00 1970
  620 |   0 | 00620              | Wed Jan 21 00:00:00 1970
  621 |   1 | 00621              | Thu Jan 22 00:00:00 1970
  623 | 303 | 00623_update3      | Sat Jan 24 00:00:00 1970
  624 |   4 | 00624              | Sun Jan 25 00:00:00 1970
  626 |   6 | 00626              | Tue Jan 27 00:00:00 1970
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970
  628 |   8 | 00628              | Thu Jan 29 00:00:00 1970
  629 | 509 | 00629_update9      | Fri Jan 30 00:00:00 1970
  630 |   0 | 00630              | Sat Jan 31 00:00:00 1970
  631 |   1 | 00631              | Sun Feb 01 00:00:00 1970
  633 | 303 | 00633_update3      | Tue Feb 03 00:00:00 1970
  634 |   4 | 00634              | Wed Feb 04 00:00:00 1970
  636 |   6 | 00636              | Fri Feb 06 00:00:00 1970
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970
  638 |   8 | 00638              | Sun Feb 08 00:00:00 1970
  639 | 509 | 00639_update9      | Mon Feb 09 00:00:00 1970
  640 |   0 | 00640              | Tue Feb 10 00:00:00 1970
  641 |   1 | 00641              | Wed Feb 11 00:00:00 1970
  643 | 303 | 00643_update3      | Fri Feb 13 00:00:00 1970
  644 |   4 | 00644              | Sat Feb 14 00:00:00 1970
  646 |   6 | 00646              | Mon Feb 16 00:00:00 1970
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970
  648 |   8 | 00648              | Wed Feb 18 00:00:00 1970
  649 | 509 | 00649_update9      | Thu Feb 19 00:00:00 1970
  650 |   0 | 00650              | Fri Feb 20 00:00:00 1970
  651 |   1 | 00651              | Sat Feb 21 00:00:00 1970
  653 | 303 | 00653_update3      | Mon Feb 23 00:00:00 1970
  654 |   4 | 00654              | Tue Feb 24 00:00:00 1970
  656 |   6 | 00656              | Thu Feb 26 00:00:00 1970
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970
  658 |   8 | 00658              | Sat Feb 28 00:00:00 1970
  659 | 509 | 00659_update9      | Sun Mar 01 00:00:00 1970
  660 |   0 | 00660              | Mon Mar 02 00:00:00 1970
  661 |   1 | 00661              | Tue Mar 03 00:00:00 1970
  663 | 303 | 00663_update3      | Thu Mar 05 00:00:00 1970
  664 |   4 | 00664              | Fri Mar 06 00:00:00 1970
  666 |   6 | 00666              | Sun Mar 08 00:00:00 1970
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970
  668 |   8 | 00668              | Tue Mar 10 00:00:00 1970
  669 | 509 | 00669_update9      | Wed Mar 11 00:00:00 1970
  670 |   0 | 00670              | Thu Mar 12 00:00:00 1970
  671 |   1 | 00671              | Fri Mar 13 00:00:00 1970
  673 | 303 | 00673_update3      | Sun Mar 15 00:00:00 1970
  674 |   4 | 00674              | Mon Mar 16 00:00:00 1970
  676 |   6 | 00676              | Wed Mar 18 00:00:00 1970
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970
  678 |   8 | 00678              | Fri Mar 20 00:00:00 1970
  679 | 509 | 00679_update9      | Sat Mar 21 00:00:00 1970
  680 |   0 | 00680              | Sun Mar 22 00:00:00 1970
  681 |   1 | 00681              | Mon Mar 23 00:00:00 1970
  683 | 303 | 00683_update3      | Wed Mar 25 00:00:00 1970
  684 |   4 | 00684              | Thu Mar 26 00:00:00 1970
  686 |   6 | 00686              | Sat Mar 28 00:00:00 1970
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970
  688 |   8 | 00688              | Mon Mar 30 00:00:00 1970
  689 | 509 | 00689_update9      | Tue Mar 31 00:00:00 1970
  690 |   0 | 00690              | Wed Apr 01 00:00:00 1970
  691 |   1 | 00691              | Thu Apr 02 00:00:00 1970
  693 | 303 | 00693_update3      | Sat Apr 04 00:00:00 1970
  694 |   4 | 00694              | Sun Apr 05 00:00:00 1970
  696 |   6 | 00696              | Tue Apr 07 00:00:00 1970
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970
  698 |   8 | 00698              | Thu Apr 09 00:00:00 1970
  699 | 509 | 00699_update9      | Fri Apr 10 00:00:00 1970
  700 |   0 | 00700              | Thu Jan 01 00:00:00 1970
  701 |   1 | 00701              | Fri Jan 02 00:00:00 1970
  703 | 303 | 00703_update3      | Sun Jan 04 00:00:00 1970
  704 |   4 | 00704              | Mon Jan 05 00:00:00 1970
  706 |   6 | 00706              | Wed Jan 07 00:00:00 1970
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970
  708 |   8 | 00708              | Fri Jan 09 00:00:00 1970
  709 | 509 | 00709_update9      | Sat Jan 10 00:00:00 1970
  710 |   0 | 00710              | Sun Jan 11 00:00:00 1970
  711 |   1 | 00711              | Mon Jan 12 00:00:00 1970
  713 | 303 | 00713_update3      | Wed Jan 14 00:00:00 1970
  714 |   4 | 00714              | Thu Jan 15 00:00:00 1970
  716 |   6 | 00716              | Sat Jan 17 00:00:00 1970
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970
  718 |   8 | 00718              | Mon Jan 19 00:00:00 1970
  719 | 509 | 00719_update9      | Tue Jan 20 00:00:00 1970
  720 |   0 | 00720              | Wed Jan 21 00:00:00 1970
  721 |   1 | 00721              | Thu Jan 22 00:00:00 1970
  723 | 303 | 00723_update3      | Sat Jan 24 00:00:00 1970
  724 |   4 | 00724              | Sun Jan 25 00:00:00 1970
  726 |   6 | 00726              | Tue Jan 27 00:00:00 1970
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970
  728 |   8 | 00728              | Thu Jan 29 00:00:00 1970
  729 | 509 | 00729_update9      | Fri Jan 30 00:00:00 1970
  730 |   0 | 00730              | Sat Jan 31 00:00:00 1970
  731 |   1 | 00731              | Sun Feb 01 00:00:00 1970
  733 | 303 | 00733_update3      | Tue Feb 03 00:00:00 1970
  734 |   4 | 00734              | Wed Feb 04 00:00:00 1970
  736 |   6 | 00736              | Fri Feb 06 00:00:00 1970
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970
  738 |   8 | 00738              | Sun Feb 08 00:00:00 1970
  739 | 509 | 00739_update9      | Mon Feb 09 00:00:00 1970
  740 |   0 | 00740              | Tue Feb 10 00:00:00 1970
  741 |   1 | 00741              | Wed Feb 11 00:00:00 1970
  743 | 303 | 00743_update3      | Fri Feb 13 00:00:00 1970
  744 |   4 | 00744              | Sat Feb 14 00:00:00 1970
  746 |   6 | 00746              | Mon Feb 16 00:00:00 1970
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970
  748 |   8 | 00748              | Wed Feb 18 00:00:00 1970
  749 | 509 | 00749_update9      | Thu Feb 19 00:00:00 1970
  750 |   0 | 00750              | Fri Feb 20 00:00:00 1970
  751 |   1 | 00751              | Sat Feb 21 00:00:00 1970
  753 | 303 | 00753_update3      | Mon Feb 23 00:00:00 1970
  754 |   4 | 00754              | Tue Feb 24 00:00:00 1970
  756 |   6 | 00756              | Thu Feb 26 00:00:00 1970
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970
  758 |   8 | 00758              | Sat Feb 28 00:00:00 1970
  759 | 509 | 00759_update9      | Sun Mar 01 00:00:00 1970
  760 |   0 | 00760              | Mon Mar 02 00:00:00 1970
  761 |   1 | 00761              | Tue Mar 03 00:00:00 1970
  763 | 303 | 00763_update3      | Thu Mar 05 00:00:00 1970
  764 |   4 | 00764              | Fri Mar 06 00:00:00 1970
  766 |   6 | 00766              | Sun Mar 08 00:00:00 1970
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970
  768 |   8 | 00768              | Tue Mar 10 00:00:00 1970
  769 | 509 | 00769_update9      | Wed Mar 11 00:00:00 1970
  770 |   0 | 00770              | Thu Mar 12 00:00:00 1970
  771 |   1 | 00771              | Fri Mar 13 00:00:00 1970
  773 | 303 | 00773_update3      | Sun Mar 15 00:00:00 1970
  774 |   4 | 00774              | Mon Mar 16 00:00:00 1970
  776 |   6 | 00776              | Wed Mar 18 00:00:00 1970
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970
  778 |   8 | 00778              | Fri Mar 20 00:00:00 1970
  779 | 509 | 00779_update9      | Sat Mar 21 00:00:00 1970
  780 |   0 | 00780              | Sun Mar 22 00:00:00 1970
  781 |   1 | 00781              | Mon Mar 23 00:00:00 1970
  783 | 303 | 00783_update3      | Wed Mar 25 00:00:00 1970
  784 |   4 | 00784              | Thu Mar 26 00:00:00 1970
  786 |   6 | 00786              | Sat Mar 28 00:00:00 1970
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970
  788 |   8 | 00788              | Mon Mar 30 00:00:00 1970
  789 | 509 | 00789_update9      | Tue Mar 31 00:00:00 1970
  790 |   0 | 00790              | Wed Apr 01 00:00:00 1970
  791 |   1 | 00791              | Thu Apr 02 00:00:00 1970
  793 | 303 | 00793_update3      | Sat Apr 04 00:00:00 1970
  794 |   4 | 00794              | Sun Apr 05 00:00:00 1970
  796 |   6 | 00796              | Tue Apr 07 00:00:00 1970
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970
  798 |   8 | 00798              | Thu Apr 09 00:00:00 1970
  799 | 509 | 00799_update9      | Fri Apr 10 00:00:00 1970
  800 |   0 | 00800              | Thu Jan 01 00:00:00 1970
  801 |   1 | 00801              | Fri Jan 02 00:00:00 1970
  803 | 303 | 00803_update3      | Sun Jan 04 00:00:00 1970
  804 |   4 | 00804              | Mon Jan 05 00:00:00 1970
  806 |   6 | 00806              | Wed Jan 07 00:00:00 1970
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970
  808 |   8 | 00808              | Fri Jan 09 00:00:00 1970
  809 | 509 | 00809_update9      | Sat Jan 10 00:00:00 1970
  810 |   0 | 00810              | Sun Jan 11 00:00:00 1970
  811 |   1 | 00811              | Mon Jan 12 00:00:00 1970
  813 | 303 | 00813_update3      | Wed Jan 14 00:00:00 1970
  814 |   4 | 00814              | Thu Jan 15 00:00:00 1970
  816 |   6 | 00816              | Sat Jan 17 00:00:00 1970
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970
  818 |   8 | 00818              | Mon Jan 19 00:00:00 1970
  819 | 509 | 00819_update9      | Tue Jan 20 00:00:00 1970
  820 |   0 | 00820              | Wed Jan 21 00:00:00 1970
  821 |   1 | 00821              | Thu Jan 22 00:00:00 1970
  823 | 303 | 00823_update3      | Sat Jan 24 00:00:00 1970
  824 |   4 | 00824              | Sun Jan 25 00:00:00 1970
  826 |   6 | 00826              | Tue Jan 27 00:00:00 1970
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970
  828 |   8 | 00828              | Thu Jan 29 00:00:00 1970
  829 | 509 | 00829_update9      | Fri Jan 30 00:00:00 1970
  830 |   0 | 00830              | Sat Jan 31 00:00:00 1970
  831 |   1 | 00831              | Sun Feb 01 00:00:00 1970
  833 | 303 | 00833_update3      | Tue Feb 03 00:00:00 1970
  834 |   4 | 00834              | Wed Feb 04 00:00:00 1970
  836 |   6 | 00836              | Fri Feb 06 00:00:00 1970
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970
  838 |   8 | 00838              | Sun Feb 08 00:00:00 1970
  839 | 509 | 00839_update9      | Mon Feb 09 00:00:00 1970
  840 |   0 | 00840              | Tue Feb 10 00:00:00 1970
  841 |   1 | 00841              | Wed Feb 11 00:00:00 1970
  843 | 303 | 00843_update3      | Fri Feb 13 00:00:00 1970
  844 |   4 | 00844              | Sat Feb 14 00:00:00 1970
  846 |   6 | 00846              | Mon Feb 16 00:00:00 1970
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970
  848 |   8 | 00848              | Wed Feb 18 00:00:00 1970
  849 | 509 | 00849_update9      | Thu Feb 19 00:00:00 1970
  850 |   0 | 00850              | Fri Feb 20 00:00:00 1970
  851 |   1 | 00851              | Sat Feb 21 00:00:00 1970
  853 | 303 | 00853_update3      | Mon Feb 23 00:00:00 1970
  854 |   4 | 00854              | Tue Feb 24 00:00:00 1970
  856 |   6 | 00856              | Thu Feb 26 00:00:00 1970
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970
  858 |   8 | 00858              | Sat Feb 28 00:00:00 1970
  859 | 509 | 00859_update9      | Sun Mar 01 00:00:00 1970
  860 |   0 | 00860              | Mon Mar 02 00:00:00 1970
  861 |   1 | 00861              | Tue Mar 03 00:00:00 1970
  863 | 303 | 00863_update3      | Thu Mar 05 00:00:00 1970
  864 |   4 | 00864              | Fri Mar 06 00:00:00 1970
  866 |   6 | 00866              | Sun Mar 08 00:00:00 1970
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970
  868 |   8 | 00868              | Tue Mar 10 00:00:00 1970
  869 | 509 | 00869_update9      | Wed Mar 11 00:00:00 1970
  870 |   0 | 00870              | Thu Mar 12 00:00:00 1970
  871 |   1 | 00871              | Fri Mar 13 00:00:00 1970
  873 | 303 | 00873_update3      | Sun Mar 15 00:00:00 1970
  874 |   4 | 00874              | Mon Mar 16 00:00:00 1970
  876 |   6 | 00876              | Wed Mar 18 00:00:00 1970
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970
  878 |   8 | 00878              | Fri Mar 20 00:00:00 1970
  879 | 509 | 00879_update9      | Sat Mar 21 00:00:00 1970
  880 |   0 | 00880              | Sun Mar 22 00:00:00 1970
  881 |   1 | 00881              | Mon Mar 23 00:00:00 1970
  883 | 303 | 00883_update3      | Wed Mar 25 00:00:00 1970
  884 |   4 | 00884              | Thu Mar 26 00:00:00 1970
  886 |   6 | 00886              | Sat Mar 28 00:00:00 1970
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970
  888 |   8 | 00888              | Mon Mar 30 00:00:00 1970
  889 | 509 | 00889_update9      | Tue Mar 31 00:00:00 1970
  890 |   0 | 00890              | Wed Apr 01 00:00:00 1970
  891 |   1 | 00891              | Thu Apr 02 00:00:00 1970
  893 | 303 | 00893_update3      | Sat Apr 04 00:00:00 1970
  894 |   4 | 00894              | Sun Apr 05 00:00:00 1970
  896 |   6 | 00896              | Tue Apr 07 00:00:00 1970
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970
  898 |   8 | 00898              | Thu Apr 09 00:00:00 1970
  899 | 509 | 00899_update9      | Fri Apr 10 00:00:00 1970
  900 |   0 | 00900              | Thu Jan 01 00:00:00 1970
  901 |   1 | 00901              | Fri Jan 02 00:00:00 1970
  903 | 303 | 00903_update3      | Sun Jan 04 00:00:00 1970
  904 |   4 | 00904              | Mon Jan 05 00:00:00 1970
  906 |   6 | 00906              | Wed Jan 07 00:00:00 1970
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970
  908 |   8 | 00908              | Fri Jan 09 00:00:00 1970
  909 | 509 | 00909_update9      | Sat Jan 10 00:00:00 1970
  910 |   0 | 00910              | Sun Jan 11 00:00:00 1970
  911 |   1 | 00911              | Mon Jan 12 00:00:00 1970
  913 | 303 | 00913_update3      | Wed Jan 14 00:00:00 1970
  914 |   4 | 00914              | Thu Jan 15 00:00:00 1970
  916 |   6 | 00916              | Sat Jan 17 00:00:00 1970
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970
  918 |   8 | 00918              | Mon Jan 19 00:00:00 1970
  919 | 509 | 00919_update9      | Tue Jan 20 00:00:00 1970
  920 |   0 | 00920              | Wed Jan 21 00:00:00 1970
  921 |   1 | 00921              | Thu Jan 22 00:00:00 1970
  923 | 303 | 00923_update3      | Sat Jan 24 00:00:00 1970
  924 |   4 | 00924              | Sun Jan 25 00:00:00 1970
  926 |   6 | 00926              | Tue Jan 27 00:00:00 1970
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970
  928 |   8 | 00928              | Thu Jan 29 00:00:00 1970
  929 | 509 | 00929_update9      | Fri Jan 30 00:00:00 1970
  930 |   0 | 00930              | Sat Jan 31 00:00:00 1970
  931 |   1 | 00931              | Sun Feb 01 00:00:00 1970
  933 | 303 | 00933_update3      | Tue Feb 03 00:00:00 1970
  934 |   4 | 00934              | Wed Feb 04 00:00:00 1970
  936 |   6 | 00936              | Fri Feb 06 00:00:00 1970
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970
  938 |   8 | 00938              | Sun Feb 08 00:00:00 1970
  939 | 509 | 00939_update9      | Mon Feb 09 00:00:00 1970
  940 |   0 | 00940              | Tue Feb 10 00:00:00 1970
  941 |   1 | 00941              | Wed Feb 11 00:00:00 1970
  943 | 303 | 00943_update3      | Fri Feb 13 00:00:00 1970
  944 |   4 | 00944              | Sat Feb 14 00:00:00 1970
  946 |   6 | 00946              | Mon Feb 16 00:00:00 1970
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970
  948 |   8 | 00948              | Wed Feb 18 00:00:00 1970
  949 | 509 | 00949_update9      | Thu Feb 19 00:00:00 1970
  950 |   0 | 00950              | Fri Feb 20 00:00:00 1970
  951 |   1 | 00951              | Sat Feb 21 00:00:00 1970
  953 | 303 | 00953_update3      | Mon Feb 23 00:00:00 1970
  954 |   4 | 00954              | Tue Feb 24 00:00:00 1970
  956 |   6 | 00956              | Thu Feb 26 00:00:00 1970
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970
  958 |   8 | 00958              | Sat Feb 28 00:00:00 1970
  959 | 509 | 00959_update9      | Sun Mar 01 00:00:00 1970
  960 |   0 | 00960              | Mon Mar 02 00:00:00 1970
  961 |   1 | 00961              | Tue Mar 03 00:00:00 1970
  963 | 303 | 00963_update3      | Thu Mar 05 00:00:00 1970
  964 |   4 | 00964              | Fri Mar 06 00:00:00 1970
  966 |   6 | 00966              | Sun Mar 08 00:00:00 1970
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970
  968 |   8 | 00968              | Tue Mar 10 00:00:00 1970
  969 | 509 | 00969_update9      | Wed Mar 11 00:00:00 1970
  970 |   0 | 00970              | Thu Mar 12 00:00:00 1970
  971 |   1 | 00971              | Fri Mar 13 00:00:00 1970
  973 | 303 | 00973_update3      | Sun Mar 15 00:00:00 1970
  974 |   4 | 00974              | Mon Mar 16 00:00:00 1970
  976 |   6 | 00976              | Wed Mar 18 00:00:00 1970
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970
  978 |   8 | 00978              | Fri Mar 20 00:00:00 1970
  979 | 509 | 00979_update9      | Sat Mar 21 00:00:00 1970
  980 |   0 | 00980              | Sun Mar 22 00:00:00 1970
  981 |   1 | 00981              | Mon Mar 23 00:00:00 1970
  983 | 303 | 00983_update3      | Wed Mar 25 00:00:00 1970
  984 |   4 | 00984              | Thu Mar 26 00:00:00 1970
  986 |   6 | 00986              | Sat Mar 28 00:00:00 1970
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970
  988 |   8 | 00988              | Mon Mar 30 00:00:00 1970
  989 | 509 | 00989_update9      | Tue Mar 31 00:00:00 1970
  990 |   0 | 00990              | Wed Apr 01 00:00:00 1970
  991 |   1 | 00991              | Thu Apr 02 00:00:00 1970
  993 | 303 | 00993_update3      | Sat Apr 04 00:00:00 1970
  994 |   4 | 00994              | Sun Apr 05 00:00:00 1970
  996 |   6 | 00996              | Tue Apr 07 00:00:00 1970
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970
  998 |   8 | 00998              | Thu Apr 09 00:00:00 1970
  999 | 509 | 00999_update9      | Fri Apr 10 00:00:00 1970
 1000 |   0 | 01000              | Thu Jan 01 00:00:00 1970
 1001 | 101 | 0000100001         | 
 1003 | 403 | 0000300003_update3 | 
 1004 | 104 | 0000400004         | 
 1006 | 106 | 0000600006         | 
 1007 | 507 | 0000700007_update7 | 
 1008 | 108 | 0000800008         | 
 1009 | 609 | 0000900009_update9 | 
 1010 | 100 | 0001000010         | 
 1011 | 101 | 0001100011         | 
 1013 | 403 | 0001300013_update3 | 
 1014 | 104 | 0001400014         | 
 1016 | 106 | 0001600016         | 
 1017 | 507 | 0001700017_update7 | 
 1018 | 108 | 0001800018         | 
 1019 | 609 | 0001900019_update9 | 
 1020 | 100 | 0002000020         | 
 1101 | 201 | aaa                | 
 1103 | 503 | ccc_update3        | 
 1104 | 204 | ddd                | 
(819 rows)

--Testcase 440:
EXPLAIN (verbose, costs off)
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1200,999,'foo');
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2_a_child
   Remote SQL: INSERT INTO public."T1"("C_1", c2, c3, c4, c5, c6, c7, c8) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
   ->  Result
         Output: 1200, 999, 'foo'::text, NULL::timestamp without time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::text
(4 rows)

--Testcase 441:
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1200,999,'foo');
--Testcase 1002:
SELECT tableoid::regclass FROM ft2_a_child WHERE c1 = 1200;
  tableoid   
-------------
 ft2_a_child
(1 row)

--Testcase 442:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'bar' WHERE c1 = 1200;             -- can be pushed down
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c3 = ? WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1, c2, 'bar'::text, c4, c5, c6, c7, c8, c1
         Remote SQL: SELECT "C_1", c2, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" = 1200))
(5 rows)

--Testcase 443:
UPDATE ft2_a_child SET c3 = 'bar' WHERE c1 = 1200;
--Testcase 1003:
SELECT tableoid::regclass FROM ft2_a_child WHERE c1 = 1200;
  tableoid   
-------------
 ft2_a_child
(1 row)

--Testcase 444:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child WHERE c1 = 1200;                       -- can be pushed down
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote SQL: DELETE FROM public."T1" WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1
         Remote SQL: SELECT "C_1" FROM public."T1" WHERE (("C_1" = 1200))
(5 rows)

--Testcase 445:
SELECT tableoid::regclass FROM ft2_a_child WHERE c1 = 1200;
  tableoid   
-------------
 ft2_a_child
(1 row)

--Testcase 1004:
DELETE FROM ft2_a_child WHERE c1 = 1200;
-- Test UPDATE/DELETE with RETURNING on a three-table join
--Testcase 446:
INSERT INTO ft2_a_child (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
--Testcase 447:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 1200 AND ft2_a_child.c2 = ft4.c1;       -- can be pushed down
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c3 = ? WHERE "C_1" = ?
   ->  Hash Join
         Output: ft2_a_child.c1, ft2_a_child.c2, 'foo'::text, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8, ft2_a_child.c1, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Hash Cond: (ft2_a_child.c2 = ft4.c1)
         ->  Foreign Scan on public.ft2_a_child
               Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8
               Remote SQL: SELECT "C_1", c2, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" > 1200))
         ->  Hash
               Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
               ->  Hash Join
                     Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
                     Hash Cond: (ft4.c1 = ft5.c1)
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3"
                     ->  Hash
                           Output: ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                                   Remote SQL: SELECT c1, c2, c3 FROM public."T4"
(21 rows)

--Testcase 448:
UPDATE ft2_a_child SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 1200 AND ft2_a_child.c2 = ft4.c1;
--Testcase 1005:
SELECT ft2, ft2.*, ft4, ft4.* FROM ft2, ft4, ft5 WHERE (ft4.c1 = ft5.c1) AND (ft2.c1 > 1200) AND (ft2.c2 = ft4.c1) ORDER BY ft2.c2;
                  ft2                   |  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  |          ft4           | c1 | c2 |   c3   | spdurl  
----------------------------------------+------+----+-----+----+----+----+------------+----+---------+------------------------+----+----+--------+---------
 (1206,6,foo,,,,"ft2       ",,/node1/)  | 1206 |  6 | foo |    |    |    | ft2        |    | /node1/ | (6,7,AAA006,/node1/)   |  6 |  7 | AAA006 | /node1/
 (1212,12,foo,,,,"ft2       ",,/node1/) | 1212 | 12 | foo |    |    |    | ft2        |    | /node1/ | (12,13,AAA012,/node1/) | 12 | 13 | AAA012 | /node1/
 (1218,18,foo,,,,"ft2       ",,/node1/) | 1218 | 18 | foo |    |    |    | ft2        |    | /node1/ | (18,19,AAA018,/node1/) | 18 | 19 | AAA018 | /node1/
 (1224,24,foo,,,,"ft2       ",,/node1/) | 1224 | 24 | foo |    |    |    | ft2        |    | /node1/ | (24,25,AAA024,/node1/) | 24 | 25 | AAA024 | /node1/
 (1230,30,foo,,,,"ft2       ",,/node1/) | 1230 | 30 | foo |    |    |    | ft2        |    | /node1/ | (30,31,AAA030,/node1/) | 30 | 31 | AAA030 | /node1/
 (1236,36,foo,,,,"ft2       ",,/node1/) | 1236 | 36 | foo |    |    |    | ft2        |    | /node1/ | (36,37,AAA036,/node1/) | 36 | 37 | AAA036 | /node1/
 (1242,42,foo,,,,"ft2       ",,/node1/) | 1242 | 42 | foo |    |    |    | ft2        |    | /node1/ | (42,43,AAA042,/node1/) | 42 | 43 | AAA042 | /node1/
 (1248,48,foo,,,,"ft2       ",,/node1/) | 1248 | 48 | foo |    |    |    | ft2        |    | /node1/ | (48,49,AAA048,/node1/) | 48 | 49 | AAA048 | /node1/
 (1254,54,foo,,,,"ft2       ",,/node1/) | 1254 | 54 | foo |    |    |    | ft2        |    | /node1/ | (54,55,AAA054,/node1/) | 54 | 55 | AAA054 | /node1/
 (1260,60,foo,,,,"ft2       ",,/node1/) | 1260 | 60 | foo |    |    |    | ft2        |    | /node1/ | (60,61,AAA060,/node1/) | 60 | 61 | AAA060 | /node1/
 (1266,66,foo,,,,"ft2       ",,/node1/) | 1266 | 66 | foo |    |    |    | ft2        |    | /node1/ | (66,67,AAA066,/node1/) | 66 | 67 | AAA066 | /node1/
 (1272,72,foo,,,,"ft2       ",,/node1/) | 1272 | 72 | foo |    |    |    | ft2        |    | /node1/ | (72,73,AAA072,/node1/) | 72 | 73 | AAA072 | /node1/
 (1278,78,foo,,,,"ft2       ",,/node1/) | 1278 | 78 | foo |    |    |    | ft2        |    | /node1/ | (78,79,AAA078,/node1/) | 78 | 79 | AAA078 | /node1/
 (1284,84,foo,,,,"ft2       ",,/node1/) | 1284 | 84 | foo |    |    |    | ft2        |    | /node1/ | (84,85,AAA084,/node1/) | 84 | 85 | AAA084 | /node1/
 (1290,90,foo,,,,"ft2       ",,/node1/) | 1290 | 90 | foo |    |    |    | ft2        |    | /node1/ | (90,91,AAA090,/node1/) | 90 | 91 | AAA090 | /node1/
 (1296,96,foo,,,,"ft2       ",,/node1/) | 1296 | 96 | foo |    |    |    | ft2        |    | /node1/ | (96,97,AAA096,/node1/) | 96 | 97 | AAA096 | /node1/
(16 rows)

--Testcase 449:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 1200 AND ft2_a_child.c1 % 10 = 0 AND ft2_a_child.c2 = ft4.c1;                          -- can be pushed down
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote SQL: DELETE FROM public."T1" WHERE "C_1" = ?
   ->  Hash Join
         Output: ft2_a_child.c1, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Hash Cond: (ft2_a_child.c2 = ft4.c1)
         ->  Foreign Scan on public.ft2_a_child
               Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8
               Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" > 1200)) AND ((("C_1" % 10) = 0))
         ->  Hash
               Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
               ->  Hash Left Join
                     Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Hash Cond: (ft4.c1 = ft5.c1)
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3"
                     ->  Hash
                           Output: ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                                   Remote SQL: SELECT c1, c2, c3 FROM public."T4"
(21 rows)

--Testcase 450:
DELETE FROM ft2_a_child 
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 1200 AND ft2_a_child.c1 % 10 = 0 AND ft2_a_child.c2 = ft4.c1;
--Testcase 451:
DELETE FROM ft2_a_child WHERE ft2_a_child.c1 > 1200;
-- Test UPDATE with a MULTIEXPR sub-select
-- (maybe someday this'll be remotely executable, but not today)
--Testcase 452:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child target
   Remote SQL: UPDATE public."T1" SET c2 = ?, c7 = ? WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child target
         Output: target.c1, $1, target.c3, target.c4, target.c5, target.c6, $2, target.c8, (SubPlan 1 (returns $1,$2)), target.c1
         Remote SQL: SELECT "C_1", c3, c4, c5, c6, c8 FROM public."T1" WHERE (("C_1" > 1100))
         SubPlan 1 (returns $1,$2)
           ->  Foreign Scan on public.ft2_a src
                 Output: (src.c2 * 10), src.c7
                 Filter: (target.c1 = src.c1)
                   Remote SQL: SELECT "C_1", c2, c7 FROM public."T1"
(10 rows)

--Testcase 453:
UPDATE ft2_a_child AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
--Testcase 454:
UPDATE ft2_a_child AS target SET (c2) = (
    SELECT c2 / 10
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
--Testcase 455:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (DROP extensions);
--Testcase 456:
INSERT INTO ft2_a_child (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
--Testcase 457:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000;            -- can't be pushed down
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c3 = ? WHERE "C_1" = ?
   ->  Foreign Scan on public.ft2_a_child
         Output: c1, c2, 'bar'::text, c4, c5, c6, c7, c8, c1
         Filter: (postgres_fdw_abs(ft2_a_child.c1) > 2000)
         Remote SQL: SELECT "C_1", c2, c4, c5, c6, c7, c8 FROM public."T1"
(6 rows)

--Testcase 458:
UPDATE ft2_a_child SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000;
--Testcase 1006:
SELECT * FROM ft2 WHERE postgres_fdw_abs(c1) > 2000;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  
------+----+-----+----+----+----+------------+----+---------
 2001 |  1 | bar |    |    |    | ft2        |    | /node1/
 2002 |  2 | bar |    |    |    | ft2        |    | /node1/
 2003 |  3 | bar |    |    |    | ft2        |    | /node1/
 2004 |  4 | bar |    |    |    | ft2        |    | /node1/
 2005 |  5 | bar |    |    |    | ft2        |    | /node1/
 2006 |  6 | bar |    |    |    | ft2        |    | /node1/
 2007 |  7 | bar |    |    |    | ft2        |    | /node1/
 2008 |  8 | bar |    |    |    | ft2        |    | /node1/
 2009 |  9 | bar |    |    |    | ft2        |    | /node1/
 2010 |  0 | bar |    |    |    | ft2        |    | /node1/
(10 rows)

--Testcase 459:
EXPLAIN (verbose, costs off)
UPDATE ft2_a_child SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 === ft4.c1;                                                    -- can't be pushed down
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2_a_child
   Remote SQL: UPDATE public."T1" SET c3 = ? WHERE "C_1" = ?
   ->  Nested Loop
         Output: ft2_a_child.c1, ft2_a_child.c2, 'baz'::text, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8, ft2_a_child.c1, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Join Filter: (ft2_a_child.c2 === ft4.c1)
         ->  Foreign Scan on public.ft2_a_child
               Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8
               Remote SQL: SELECT "C_1", c2, c4, c5, c6, c7, c8 FROM public."T1" WHERE (("C_1" > 2000))
         ->  Materialize
               Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
               ->  Hash Join
                     Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Hash Cond: (ft4.c1 = ft5.c1)
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3"
                     ->  Hash
                           Output: ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                                   Remote SQL: SELECT c1, c2, c3 FROM public."T4"
(21 rows)

--Testcase 460:
UPDATE ft2_a_child SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 === ft4.c1;
--Testcase 1007:
SELECT ft2.*, ft4.*, ft5.* FROM ft2, ft4, ft5 
  WHERE (ft4.c1 = ft5.c1) AND (ft2.c1 > 2000) AND (ft2.c2 === ft4.c1);
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | spdurl  | c1 | c2 |   c3   | spdurl  | c1 | c2 |   c3   | spdurl  
------+----+-----+----+----+----+------------+----+---------+----+----+--------+---------+----+----+--------+---------
 2006 |  6 | baz |    |    |    | ft2        |    | /node1/ |  6 |  7 | AAA006 | /node1/ |  6 |  7 | AAA006 | /node1/
(1 row)

--Testcase 461:
EXPLAIN (verbose, costs off)
DELETE FROM ft2_a_child
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 = ft4.c1;       -- can't be pushed down
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2_a_child
   Remote SQL: DELETE FROM public."T1" WHERE "C_1" = ?
   ->  Hash Join
         Output: ft2_a_child.c1, ft4.ctid, ft5.ctid, ((ft4.*)::ft4), ft4.tableoid, ((ft5.*)::ft5), ft5.tableoid
         Hash Cond: (ft2_a_child.c2 = ft4.c1)
         ->  Foreign Scan on public.ft2_a_child
               Output: ft2_a_child.c1, ft2_a_child.c2, ft2_a_child.c3, ft2_a_child.c4, ft2_a_child.c5, ft2_a_child.c6, ft2_a_child.c7, ft2_a_child.c8
               Remote SQL: SELECT "C_1", c2 FROM public."T1" WHERE (("C_1" > 2000))
         ->  Hash
               Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
               ->  Nested Loop
                     Output: ft4.ctid, ft4.c1, ((ft4.*)::ft4), ft4.tableoid, ft5.ctid, ((ft5.*)::ft5), ft5.tableoid
                     Join Filter: (ft4.c1 === ft5.c1)
                     ->  Foreign Scan on public.ft4_a ft4
                           Output: ft4.ctid, ft4.c1, ft4.*, ft4.tableoid
                             Remote SQL: SELECT c1, c2, c3 FROM public."T3"
                     ->  Materialize
                           Output: ft5.ctid, ft5.c1, ((ft5.*)::ft5), ft5.tableoid
                           ->  Foreign Scan on public.ft5_a ft5
                                 Output: ft5.ctid, ft5.c1, ft5.*, ft5.tableoid
                                   Remote SQL: SELECT c1, c2, c3 FROM public."T4"
(21 rows)

--Testcase 462:
DELETE FROM ft2_a_child
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2_a_child.c1 > 2000 AND ft2_a_child.c2 = ft4.c1;
--Testcase 463:
DELETE FROM ft2_a_child WHERE ft2_a_child.c1 > 2000;
--Testcase 464:
-- ALTER SERVER :DB_SERVERNAME OPTIONS (ADD extensions :DB_EXTENSIONNAME);
-- Test that trigger on remote table works as expected
--Testcase 465:
CREATE OR REPLACE FUNCTION F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
--Testcase 466:
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON ft1_a_child FOR EACH ROW EXECUTE PROCEDURE F_BRTRIG();
--Testcase 467:
CREATE TRIGGER t2_br_insert BEFORE INSERT OR UPDATE
    ON ft2_a_child FOR EACH ROW EXECUTE PROCEDURE F_BRTRIG();
--Testcase 468:
INSERT INTO ft2_a_child (c1,c2,c3) VALUES (1208, 818, 'fff');
--Testcase 469:
INSERT INTO ft2_a_child (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;');
--Testcase 470:
UPDATE ft2_a_child SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200;
--Testcase 1008:
SELECT * FROM ft2 WHERE c1 % 10 = 8 AND c1 < 1200 ORDER BY c1;
  c1  | c2  |           c3           |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
------+-----+------------------------+--------------------------+--------------------------+----+------------+-----+---------
    8 | 608 | 00008_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
   18 | 608 | 00018_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
   28 | 608 | 00028_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
   38 | 608 | 00038_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
   48 | 608 | 00048_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
   58 | 608 | 00058_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
   68 | 608 | 00068_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
   78 | 608 | 00078_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
   88 | 608 | 00088_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
   98 | 608 | 00098_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  108 | 608 | 00108_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  118 | 608 | 00118_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  128 | 608 | 00128_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  138 | 608 | 00138_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  148 | 608 | 00148_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  158 | 608 | 00158_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  168 | 608 | 00168_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  178 | 608 | 00178_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  188 | 608 | 00188_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  198 | 608 | 00198_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  208 | 608 | 00208_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  218 | 608 | 00218_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  228 | 608 | 00228_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  238 | 608 | 00238_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  248 | 608 | 00248_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  258 | 608 | 00258_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  268 | 608 | 00268_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  278 | 608 | 00278_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  288 | 608 | 00288_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  298 | 608 | 00298_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  308 | 608 | 00308_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  318 | 608 | 00318_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  328 | 608 | 00328_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  338 | 608 | 00338_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  348 | 608 | 00348_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  358 | 608 | 00358_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  368 | 608 | 00368_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  378 | 608 | 00378_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  388 | 608 | 00388_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  398 | 608 | 00398_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  408 | 608 | 00408_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  418 | 608 | 00418_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  428 | 608 | 00428_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  438 | 608 | 00438_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  448 | 608 | 00448_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  458 | 608 | 00458_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  468 | 608 | 00468_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  478 | 608 | 00478_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  488 | 608 | 00488_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  498 | 608 | 00498_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  508 | 608 | 00508_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  518 | 608 | 00518_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  528 | 608 | 00528_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  538 | 608 | 00538_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  548 | 608 | 00548_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  558 | 608 | 00558_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  568 | 608 | 00568_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  578 | 608 | 00578_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  588 | 608 | 00588_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  598 | 608 | 00598_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  608 | 608 | 00608_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  618 | 608 | 00618_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  628 | 608 | 00628_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  638 | 608 | 00638_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  648 | 608 | 00648_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  658 | 608 | 00658_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  668 | 608 | 00668_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  678 | 608 | 00678_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  688 | 608 | 00688_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  698 | 608 | 00698_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  708 | 608 | 00708_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  718 | 608 | 00718_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  728 | 608 | 00728_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  738 | 608 | 00738_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  748 | 608 | 00748_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  758 | 608 | 00758_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  768 | 608 | 00768_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  778 | 608 | 00778_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  788 | 608 | 00788_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  798 | 608 | 00798_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  808 | 608 | 00808_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  818 | 608 | 00818_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  828 | 608 | 00828_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  838 | 608 | 00838_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  848 | 608 | 00848_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  858 | 608 | 00858_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  868 | 608 | 00868_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  878 | 608 | 00878_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  888 | 608 | 00888_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  898 | 608 | 00898_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  908 | 608 | 00908_trig_update      | Fri Jan 09 00:00:00 1970 | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /node1/
  918 | 608 | 00918_trig_update      | Mon Jan 19 00:00:00 1970 | Mon Jan 19 00:00:00 1970 | 8  | 8          | foo | /node1/
  928 | 608 | 00928_trig_update      | Thu Jan 29 00:00:00 1970 | Thu Jan 29 00:00:00 1970 | 8  | 8          | foo | /node1/
  938 | 608 | 00938_trig_update      | Sun Feb 08 00:00:00 1970 | Sun Feb 08 00:00:00 1970 | 8  | 8          | foo | /node1/
  948 | 608 | 00948_trig_update      | Wed Feb 18 00:00:00 1970 | Wed Feb 18 00:00:00 1970 | 8  | 8          | foo | /node1/
  958 | 608 | 00958_trig_update      | Sat Feb 28 00:00:00 1970 | Sat Feb 28 00:00:00 1970 | 8  | 8          | foo | /node1/
  968 | 608 | 00968_trig_update      | Tue Mar 10 00:00:00 1970 | Tue Mar 10 00:00:00 1970 | 8  | 8          | foo | /node1/
  978 | 608 | 00978_trig_update      | Fri Mar 20 00:00:00 1970 | Fri Mar 20 00:00:00 1970 | 8  | 8          | foo | /node1/
  988 | 608 | 00988_trig_update      | Mon Mar 30 00:00:00 1970 | Mon Mar 30 00:00:00 1970 | 8  | 8          | foo | /node1/
  998 | 608 | 00998_trig_update      | Thu Apr 09 00:00:00 1970 | Thu Apr 09 00:00:00 1970 | 8  | 8          | foo | /node1/
 1008 | 708 | 0000800008_trig_update |                          |                          |    | ft2        |     | /node1/
 1018 | 708 | 0001800018_trig_update |                          |                          |    | ft2        |     | /node1/
(102 rows)

-- Test errors thrown on remote side during update
--Testcase 471:
-- Does not support CHECK
ALTER TABLE ft1_a_child ADD CONSTRAINT c2positive CHECK (c2 >= 0);
--Testcase 472:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12);  -- duplicate key
psql:sql/13.15/ported_odbc_fdw.sql:1809: ERROR:  Executing ODBC query
ERROR: duplicate key value violates unique constraint "t1_pkey"
DETAIL: Key ("C_1")=(11) already exists.;
Error while executing the query
--Testcase 473:
-- Does not support ON CONFLICT DO NOTHING
--INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
--Testcase 474:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
psql:sql/13.15/ported_odbc_fdw.sql:1814: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 475:
INSERT INTO ft1_a_child(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
psql:sql/13.15/ported_odbc_fdw.sql:1816: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--Testcase 476:
--INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
--Testcase 477:
--UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
-- Test savepoint/rollback behavior
--Testcase 478:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   4 |   100
   6 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

--Testcase 479:
select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   4 |   100
   6 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- begin;
--Testcase 480:
update ft2_a_child set c2 = 42 where c2 = 0;
--Testcase 481:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   4 |   100
   6 |   100
  42 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- savepoint s1;
--Testcase 482:
update ft2_a_child set c2 = 44 where c2 = 4;
--Testcase 483:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- release savepoint s1;
--Testcase 484:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- savepoint s2;
--Testcase 485:
update ft2_a_child set c2 = 46 where c2 = 6;
--Testcase 486:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- rollback to savepoint s2;
--Testcase 1010:
update ft2_a_child set c2 = 6 where c2 = 46; -- rollback testcase 485
--Testcase 487:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- release savepoint s2;
--Testcase 488:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- savepoint s3;
--Testcase 489:
-- update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
-- rollback to savepoint s3;
--Testcase 490:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- release savepoint s3;
--Testcase 491:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- none of the above is committed yet remotely
--Testcase 492:
select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- commit;
--Testcase 493:
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

--Testcase 494:
select c2, count(*) from "S 1"."T1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   6 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- VACUUM ANALYZE "S 1"."T1";
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
--Testcase 495:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   ->  Sort
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
         Sort Key: ft1.c6 DESC NULLS LAST, ft1.c1
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(8 rows)

--Testcase 496:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
  c1  | c2  |         c3         |            c4            |            c5            |  c6  |     c7     | c8  | spdurl  
------+-----+--------------------+--------------------------+--------------------------+------+------------+-----+---------
  960 |  42 | 00960_trig_update  | Mon Mar 02 00:00:00 1970 | Mon Mar 02 00:00:00 1970 | 0    | 0          | foo | /node1/
  970 |  42 | 00970_trig_update  | Thu Mar 12 00:00:00 1970 | Thu Mar 12 00:00:00 1970 | 0    | 0          | foo | /node1/
  980 |  42 | 00980_trig_update  | Sun Mar 22 00:00:00 1970 | Sun Mar 22 00:00:00 1970 | 0    | 0          | foo | /node1/
  990 |  42 | 00990_trig_update  | Wed Apr 01 00:00:00 1970 | Wed Apr 01 00:00:00 1970 | 0    | 0          | foo | /node1/
 1000 |  42 | 01000_trig_update  | Thu Jan 01 00:00:00 1970 | Thu Jan 01 00:00:00 1970 | 0    | 0          | foo | /node1/
 1218 | 818 | ggg_trig_update    |                          |                          | (--; | ft2        |     | /node1/
 1001 | 101 | 0000100001         |                          |                          |      | ft2        |     | /node1/
 1003 | 403 | 0000300003_update3 |                          |                          |      | ft2        |     | /node1/
 1004 | 104 | 0000400004         |                          |                          |      | ft2        |     | /node1/
 1006 | 106 | 0000600006         |                          |                          |      | ft2        |     | /node1/
(10 rows)

-- ORDER BY DESC NULLS FIRST options
--Testcase 497:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   ->  Sort
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
         Sort Key: ft1.c6 DESC, ft1.c1
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(8 rows)

--Testcase 498:
SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |       c3        |            c4            |            c5            | c6 |     c7     | c8  | spdurl  
------+-----+-----------------+--------------------------+--------------------------+----+------------+-----+---------
 1020 | 100 | 0002000020      |                          |                          |    | ft2        |     | /node1/
 1101 | 201 | aaa             |                          |                          |    | ft2        |     | /node1/
 1103 | 503 | ccc_update3     |                          |                          |    | ft2        |     | /node1/
 1104 | 204 | ddd             |                          |                          |    | ft2        |     | /node1/
 1208 | 818 | fff_trig_update |                          |                          |    | ft2        |     | /node1/
    9 | 509 | 00009_update9   | Sat Jan 10 00:00:00 1970 | Sat Jan 10 00:00:00 1970 | 9  | ft2        | foo | /node1/
   19 | 509 | 00019_update9   | Tue Jan 20 00:00:00 1970 | Tue Jan 20 00:00:00 1970 | 9  | ft2        | foo | /node1/
   29 | 509 | 00029_update9   | Fri Jan 30 00:00:00 1970 | Fri Jan 30 00:00:00 1970 | 9  | ft2        | foo | /node1/
   39 | 509 | 00039_update9   | Mon Feb 09 00:00:00 1970 | Mon Feb 09 00:00:00 1970 | 9  | ft2        | foo | /node1/
   49 | 509 | 00049_update9   | Thu Feb 19 00:00:00 1970 | Thu Feb 19 00:00:00 1970 | 9  | ft2        | foo | /node1/
(10 rows)

-- ORDER BY ASC NULLS FIRST options
--Testcase 499:
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
   ->  Sort
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
         Sort Key: ft1.c6 NULLS FIRST, ft1.c1
         ->  Foreign Scan on public.ft1_a ft1
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.spdurl
                 Remote SQL: SELECT "C_1", c2, c3, c4, c5, c6, c7, c8 FROM public."T1"
(8 rows)

--Testcase 500:
SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |        c3         |            c4            |            c5            |  c6  |     c7     | c8  | spdurl  
------+-----+-------------------+--------------------------+--------------------------+------+------------+-----+---------
 1020 | 100 | 0002000020        |                          |                          |      | ft2        |     | /node1/
 1101 | 201 | aaa               |                          |                          |      | ft2        |     | /node1/
 1103 | 503 | ccc_update3       |                          |                          |      | ft2        |     | /node1/
 1104 | 204 | ddd               |                          |                          |      | ft2        |     | /node1/
 1208 | 818 | fff_trig_update   |                          |                          |      | ft2        |     | /node1/
 1218 | 818 | ggg_trig_update   |                          |                          | (--; | ft2        |     | /node1/
   10 |  42 | 00010_trig_update | Sun Jan 11 00:00:00 1970 | Sun Jan 11 00:00:00 1970 | 0    | 0          | foo | /node1/
   20 |  42 | 00020_trig_update | Wed Jan 21 00:00:00 1970 | Wed Jan 21 00:00:00 1970 | 0    | 0          | foo | /node1/
   30 |  42 | 00030_trig_update | Sat Jan 31 00:00:00 1970 | Sat Jan 31 00:00:00 1970 | 0    | 0          | foo | /node1/
   40 |  42 | 00040_trig_update | Tue Feb 10 00:00:00 1970 | Tue Feb 10 00:00:00 1970 | 0    | 0          | foo | /node1/
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
--Testcase 501:
ALTER TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
--Testcase 1056:
SET constraint_exclusion = 'off';
--Testcase 502:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: (PARTIAL count(*))
           Remote SQL: SELECT count(*) FROM public."T1" WHERE ((c2 < 0))
(5 rows)

--Testcase 503:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 504:
SET constraint_exclusion = 'on';
--Testcase 505:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 506:
SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

--Testcase 507:
RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
--Testcase 508:
--INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
--Testcase 509:
--UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
--Testcase 510:
ALTER TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
--Testcase 511:
ALTER TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
--Testcase 1057:
SET constraint_exclusion = 'off';
--Testcase 512:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: (PARTIAL count(*))
           Remote SQL: SELECT count(*) FROM public."T1" WHERE ((c2 >= 0))
(5 rows)

--Testcase 513:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
   821
(1 row)

--Testcase 514:
SET constraint_exclusion = 'on';
--Testcase 515:
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

--Testcase 516:
SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

--Testcase 517:
RESET constraint_exclusion;
-- local check constraint is not actually enforced
--Testcase 518:
INSERT INTO ft1_a_child(c1, c2) VALUES(1111, 2);
--Testcase 519:
UPDATE ft1_a_child SET c2 = c2 + 1 WHERE c1 = 1;
--Testcase 520:
ALTER TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
--Testcase 1011:
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
--Testcase 521:
CREATE FOREIGN TABLE foreign_tbl_a_child (a int OPTIONS (key 'true'), b int)
  SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'base_tbl');
--Testcase 1012:
CREATE TABLE foreign_tbl (a int, b int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1013:
CREATE FOREIGN TABLE foreign_tbl_a PARTITION OF foreign_tbl FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 1014:
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON foreign_tbl_a_child FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
--Testcase 522:
CREATE VIEW rw_view AS SELECT a,b FROM foreign_tbl_a_child
  WHERE a < b WITH CHECK OPTION;
--Testcase 523:
\d+ rw_view
                           View "public.rw_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 a      | integer |           |          |         | plain   | 
 b      | integer |           |          |         | plain   | 
View definition:
 SELECT foreign_tbl_a_child.a,
    foreign_tbl_a_child.b
   FROM foreign_tbl_a_child
  WHERE foreign_tbl_a_child.a < foreign_tbl_a_child.b;
Options: check_option=cascaded

--Testcase 524:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
                          QUERY PLAN                           
---------------------------------------------------------------
 Insert on public.foreign_tbl_a_child
   Remote SQL: INSERT INTO public.base_tbl(a, b) VALUES (?, ?)
   ->  Result
         Output: 0, 5
(4 rows)

-- Bug: data is inserted to table even FDW reports failed
-- Data is shown at testcase 528
--Testcase 525:
INSERT INTO rw_view VALUES (0, 5); -- should fail
psql:sql/13.15/ported_odbc_fdw.sql:1974: ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
--Testcase 526:
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
                          QUERY PLAN                           
---------------------------------------------------------------
 Insert on public.foreign_tbl_a_child
   Remote SQL: INSERT INTO public.base_tbl(a, b) VALUES (?, ?)
   ->  Result
         Output: 0, 15
(4 rows)

--Testcase 527:
INSERT INTO rw_view VALUES (0, 15); -- ok
--Testcase 528:
SELECT * FROM foreign_tbl;
 a  | b  | spdurl  
----+----+---------
 20 |  5 | /node1/
 20 | 15 | /node1/
(2 rows)

--Testcase 529:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Update on public.foreign_tbl_a_child
   Remote SQL: UPDATE public.base_tbl SET a = ?, b = ? WHERE a = ?
   ->  Foreign Scan on public.foreign_tbl_a_child
         Output: foreign_tbl_a_child.a, (foreign_tbl_a_child.b + 5), foreign_tbl_a_child.a, foreign_tbl_a_child.*
         Remote SQL: SELECT a, b FROM public.base_tbl WHERE ((a < b))
(5 rows)

--Testcase 530:
UPDATE rw_view SET b = b + 5; -- should fail
--Testcase 531:
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Update on public.foreign_tbl_a_child
   Remote SQL: UPDATE public.base_tbl SET a = ?, b = ? WHERE a = ?
   ->  Foreign Scan on public.foreign_tbl_a_child
         Output: foreign_tbl_a_child.a, (foreign_tbl_a_child.b + 15), foreign_tbl_a_child.a, foreign_tbl_a_child.*
         Remote SQL: SELECT a, b FROM public.base_tbl WHERE ((a < b))
(5 rows)

--Testcase 532:
UPDATE rw_view SET b = b + 15; -- ok
--Testcase 533:
SELECT * FROM foreign_tbl;
 a  | b  | spdurl  
----+----+---------
 20 |  5 | /node1/
 20 | 15 | /node1/
(2 rows)

--Testcase 534:
DROP FOREIGN TABLE foreign_tbl_a_child CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:1997: NOTICE:  drop cascades to view rw_view
-- DROP TRIGGER row_before_insupd_trigger ON base_tbl;
-- DROP TABLE base_tbl;
-- PGspider_Ext support only LIST partition rule 
-- -- Does not support patition table (regarding tuple routing)
-- -- test WCO for partitions
-- --Testcase 535:
-- CREATE FOREIGN TABLE foreign_tbl (a int, b int, id int OPTIONS (key 'true'))
--   SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'child_tbl');
-- --Testcase 536:
-- CREATE TABLE parent_tbl (a int, b int, id int) PARTITION BY RANGE(a);
-- --Testcase 537:
-- ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
-- --Testcase 538:
-- CREATE VIEW rw_view AS SELECT * FROM parent_tbl
--   WHERE a < b WITH CHECK OPTION;
-- --Testcase 539:
-- \d+ rw_view
-- --Testcase 540:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 5);
-- --Testcase 541:
-- INSERT INTO rw_view VALUES (0, 5); -- should fail
-- --Testcase 542:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- INSERT INTO rw_view VALUES (0, 15);
-- --Testcase 543:
-- INSERT INTO rw_view VALUES (0, 15); -- ok
-- --Testcase 544:
-- SELECT * FROM foreign_tbl;
-- --Testcase 545:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE rw_view SET b = b + 5;
-- --Testcase 546:
-- UPDATE rw_view SET b = b + 5; -- should fail
-- --Testcase 547:
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE rw_view SET b = b + 15;
-- --Testcase 548:
-- UPDATE rw_view SET b = b + 15; -- ok
-- --Testcase 549:
-- SELECT * FROM foreign_tbl;
-- --Testcase 550:
-- DROP FOREIGN TABLE foreign_tbl CASCADE;
-- -- DROP TRIGGER row_before_insupd_trigger ON child_tbl;
-- --Testcase 551:
-- DROP TABLE parent_tbl CASCADE;
--Testcase 1015:
DROP FUNCTION row_before_insupd_trigfunc;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
--Testcase 552:
create foreign table loc1_a_child (f1 serial OPTIONS (key 'true'), f2 text)
  server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc1');
--Testcase 1016:
create table loc1 (f1 serial, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1017:
create foreign table loc1_a PARTITION OF loc1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 1018:
create foreign table rem1_a_child (f1 serial OPTIONS (key 'true'), f2 text)
  server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc1');
--Testcase 1019:
create table rem1 (f1 serial, f2 text, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1020:
create foreign table rem1_a PARTITION OF rem1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 553:
select pg_catalog.setval('rem1_a_child_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

--Testcase 554:
insert into loc1_a_child(f2) values('hi');
--Testcase 555:
insert into rem1_a_child(f2) values('hi remote');
--Testcase 556:
insert into loc1_a_child(f2) values('bye');
--Testcase 557:
insert into rem1_a_child(f2) values('bye remote');
--Testcase 558:
select f1, f2 from loc1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

--Testcase 1021:
select f1, f2 from rem1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
--Testcase 559:
create foreign table grem1_a_child (
  a int OPTIONS (key 'true'),
  b int generated always as (a * 2) stored)
  server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'gloc1');
--Testcase 1022:
create table grem1 (
  a int,
  b int generated always as (a * 2) stored,
  spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1023:
create foreign table grem1_a PARTITION OF grem1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 560:
insert into grem1_a_child (a) values (1), (2);
--Testcase 561:
update grem1_a_child set a = 22 where a = 2;
--Testcase 562:
select * from grem1;
 a  | b  | spdurl  
----+----+---------
  1 |  2 | /node1/
 22 | 44 | /node1/
(2 rows)

-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
--Testcase 563:
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
--Testcase 564:
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 565:
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 566:
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
--Testcase 567:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 568:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 569:
delete from rem1_a_child;
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (1,hi)
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (10,"hi remote")
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (2,bye)
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (11,"bye remote")
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (1,hi)
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (10,"hi remote")
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (2,bye)
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  OLD: (11,"bye remote")
psql:sql/13.15/ported_odbc_fdw.sql:2183: NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = AFTER, level = STATEMENT
--Testcase 570:
insert into rem1_a_child values(1,'insert');
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  NEW: (1,insert)
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  NEW: (1,insert)
psql:sql/13.15/ported_odbc_fdw.sql:2185: NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
--Testcase 571:
update rem1_a_child set f2  = 'update' where f1 = 1;
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  OLD: (1,insert),NEW: (1,update)
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  OLD: (1,insert),NEW: (1,update)
psql:sql/13.15/ported_odbc_fdw.sql:2187: NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
--Testcase 572:
update rem1_a_child set f2 = f2 || f2;
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
psql:sql/13.15/ported_odbc_fdw.sql:2189: NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
-- cleanup
--Testcase 573:
DROP TRIGGER trig_row_before ON rem1_a_child;
--Testcase 574:
DROP TRIGGER trig_row_after ON rem1_a_child;
--Testcase 575:
DROP TRIGGER trig_stmt_before ON rem1_a_child;
--Testcase 576:
DROP TRIGGER trig_stmt_after ON rem1_a_child;
--Testcase 577:
DELETE from rem1_a_child;
-- Test multiple AFTER ROW triggers on a foreign table
--Testcase 578:
CREATE TRIGGER trig_row_after1
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 579:
CREATE TRIGGER trig_row_after2
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 580:
insert into rem1_a_child values(1,'insert');
psql:sql/13.15/ported_odbc_fdw.sql:2217: NOTICE:  trig_row_after1(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2217: NOTICE:  NEW: (1,insert)
psql:sql/13.15/ported_odbc_fdw.sql:2217: NOTICE:  trig_row_after2(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2217: NOTICE:  NEW: (1,insert)
--Testcase 581:
update rem1_a_child set f2  = 'update' where f1 = 1;
psql:sql/13.15/ported_odbc_fdw.sql:2219: NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2219: NOTICE:  OLD: (1,insert),NEW: (1,update)
psql:sql/13.15/ported_odbc_fdw.sql:2219: NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2219: NOTICE:  OLD: (1,insert),NEW: (1,update)
--Testcase 582:
update rem1_a_child set f2 = f2 || f2;
psql:sql/13.15/ported_odbc_fdw.sql:2221: NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2221: NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
psql:sql/13.15/ported_odbc_fdw.sql:2221: NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2221: NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
--Testcase 583:
delete from rem1_a_child;
psql:sql/13.15/ported_odbc_fdw.sql:2223: NOTICE:  trig_row_after1(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2223: NOTICE:  OLD: (1,updateupdate)
psql:sql/13.15/ported_odbc_fdw.sql:2223: NOTICE:  trig_row_after2(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2223: NOTICE:  OLD: (1,updateupdate)
-- cleanup
--Testcase 584:
DROP TRIGGER trig_row_after1 ON rem1_a_child;
--Testcase 585:
DROP TRIGGER trig_row_after2 ON rem1_a_child;
-- Test WHEN conditions
--Testcase 586:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 587:
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
--Testcase 588:
INSERT INTO rem1_a_child values(1, 'insert');
--Testcase 589:
UPDATE rem1_a_child set f2 = 'test';
-- Insert or update matching: triggers are fired
--Testcase 590:
INSERT INTO rem1_a_child values(2, 'update');
psql:sql/13.15/ported_odbc_fdw.sql:2255: NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2255: NOTICE:  NEW: (2,update)
psql:sql/13.15/ported_odbc_fdw.sql:2255: NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2255: NOTICE:  NEW: (2,update)
--Testcase 591:
UPDATE rem1_a_child set f2 = 'update update' where f1 = '2';
psql:sql/13.15/ported_odbc_fdw.sql:2257: NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2257: NOTICE:  OLD: (2,update),NEW: (2,"update update")
psql:sql/13.15/ported_odbc_fdw.sql:2257: NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2257: NOTICE:  OLD: (2,update),NEW: (2,"update update")
--Testcase 592:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_a_child
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 593:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_a_child
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
--Testcase 594:
DELETE FROM rem1_a_child;
psql:sql/13.15/ported_odbc_fdw.sql:2275: NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2275: NOTICE:  OLD: (2,"update update")
psql:sql/13.15/ported_odbc_fdw.sql:2275: NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2275: NOTICE:  OLD: (2,"update update")
-- cleanup
--Testcase 595:
DROP TRIGGER trig_row_before_insupd ON rem1_a_child;
--Testcase 596:
DROP TRIGGER trig_row_after_insupd ON rem1_a_child;
--Testcase 597:
DROP TRIGGER trig_row_before_delete ON rem1_a_child;
--Testcase 598:
DROP TRIGGER trig_row_after_delete ON rem1_a_child;
-- Test various RETURN statements in BEFORE triggers.
--Testcase 599:
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
--Testcase 600:
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
--Testcase 601:
INSERT INTO rem1_a_child values(1, 'insert');
--Testcase 602:
SELECT f1, f2 from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
(1 row)

--Testcase 603:
INSERT INTO rem1_a_child values(2, 'insert');
--Testcase 604:
SELECT f1, f2 from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
  2 | insert triggered !
(2 rows)

--Testcase 605:
UPDATE rem1_a_child set f2 = '';
--Testcase 606:
SELECT f1, f2 from loc1;
 f1 |      f2      
----+--------------
  1 |  triggered !
  2 |  triggered !
(2 rows)

--Testcase 607:
UPDATE rem1_a_child set f2 = 'skidoo';
--Testcase 608:
SELECT f1, f2 from loc1;
 f1 |         f2         
----+--------------------
  1 | skidoo triggered !
  2 | skidoo triggered !
(2 rows)

--Testcase 609:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f1 = 10;          -- all columns should be transmitted
                            QUERY PLAN                            
------------------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f1 = ?, f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: 10, f2, f1, rem1_a_child.*
         Remote SQL: SELECT f1, f2 FROM public.loc1
(5 rows)

--Testcase 610:
UPDATE rem1_a_child set f1 = 10;
--Testcase 611:
SELECT f1, f2 from loc1;
 f1 |               f2               
----+--------------------------------
 10 | skidoo triggered ! triggered !
 10 | skidoo triggered ! triggered !
(2 rows)

--Testcase 612:
DELETE FROM rem1_a_child;
psql:sql/13.15/ported_odbc_fdw.sql:2330: ERROR:  Executing ODBC query
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
--Testcase 613:
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 614:
INSERT INTO rem1_a_child values(1, 'insert');
--Testcase 615:
SELECT f1, f2 from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
(1 row)

--Testcase 616:
INSERT INTO rem1_a_child values(2, 'insert');
--Testcase 617:
SELECT f1, f2 from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

--Testcase 618:
UPDATE rem1_a_child set f2 = '';
--Testcase 619:
SELECT f1, f2 from loc1;
 f1 |            f2            
----+--------------------------
  1 |  triggered ! triggered !
  2 |  triggered ! triggered !
(2 rows)

--Testcase 620:
UPDATE rem1_a_child set f2 = 'skidoo';
--Testcase 621:
SELECT f1, f2 from loc1;
 f1 |               f2               
----+--------------------------------
  1 | skidoo triggered ! triggered !
  2 | skidoo triggered ! triggered !
(2 rows)

--Testcase 622:
DROP TRIGGER trig_row_before_insupd ON rem1_a_child;
--Testcase 623:
DROP TRIGGER trig_row_before_insupd2 ON rem1_a_child;
--Testcase 624:
DELETE from rem1_a_child;
--Testcase 625:
INSERT INTO rem1_a_child VALUES (1, 'test');
-- Test with a trigger returning NULL
--Testcase 626:
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
--Testcase 627:
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
--Testcase 628:
INSERT INTO rem1_a_child VALUES (2, 'test2');
--Testcase 629:
SELECT f1, f2 from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

--Testcase 630:
UPDATE rem1_a_child SET f2 = 'test2';
--Testcase 631:
SELECT f1, f2 from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

--Testcase 632:
DELETE from rem1_a_child;
--Testcase 633:
SELECT f1, f2 from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

--Testcase 634:
DROP TRIGGER trig_null ON rem1_a_child;
--Testcase 635:
DELETE from rem1_a_child;
-- Test a combination of local and remote triggers
--Testcase 636:
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 637:
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 638:
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1_a_child
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
--Testcase 639:
INSERT INTO rem1_a_child(f2) VALUES ('test');
psql:sql/13.15/ported_odbc_fdw.sql:2420: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2420: NOTICE:  NEW: (12,test)
psql:sql/13.15/ported_odbc_fdw.sql:2420: NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2420: NOTICE:  NEW: (12,test)
--Testcase 640:
UPDATE rem1_a_child SET f2 = 'testo';
psql:sql/13.15/ported_odbc_fdw.sql:2422: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2422: NOTICE:  OLD: (12,test),NEW: (12,testo)
psql:sql/13.15/ported_odbc_fdw.sql:2422: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2422: NOTICE:  OLD: (12,test),NEW: (12,testo)
-- Test returning a system attribute
--Testcase 641:
INSERT INTO rem1_a_child(f2) VALUES ('test');
psql:sql/13.15/ported_odbc_fdw.sql:2426: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2426: NOTICE:  NEW: (13,test)
psql:sql/13.15/ported_odbc_fdw.sql:2426: NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2426: NOTICE:  NEW: (13,test)
-- cleanup
--Testcase 642:
DROP TRIGGER trig_row_before ON rem1_a_child;
--Testcase 643:
DROP TRIGGER trig_row_after ON rem1_a_child;
--Testcase 644:
DROP TRIGGER trig_local_before ON loc1_a_child;
-- Test direct foreign table modification functionality
-- Test with statement-level triggers
--Testcase 645:
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 646:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 647:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 648:
DROP TRIGGER trig_stmt_before ON rem1_a_child;
--Testcase 649:
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1_a_child
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
--Testcase 650:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 651:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 652:
DROP TRIGGER trig_stmt_after ON rem1_a_child;
-- Test with row-level ON INSERT triggers
--Testcase 653:
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 654:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 655:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 656:
DROP TRIGGER trig_row_before_insert ON rem1_a_child;
--Testcase 657:
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 658:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 659:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 660:
DROP TRIGGER trig_row_after_insert ON rem1_a_child;
-- Test with row-level ON UPDATE triggers
--Testcase 661:
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 662:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can't be pushed down
                            QUERY PLAN                            
------------------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f1 = ?, f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1, rem1_a_child.*
         Remote SQL: SELECT f1, f2 FROM public.loc1
(5 rows)

--Testcase 663:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 664:
DROP TRIGGER trig_row_before_update ON rem1_a_child;
--Testcase 665:
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 666:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can't be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1, rem1_a_child.*
         Remote SQL: SELECT f1, f2 FROM public.loc1
(5 rows)

--Testcase 667:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 668:
DROP TRIGGER trig_row_after_update ON rem1_a_child;
-- Test with row-level ON DELETE triggers
--Testcase 669:
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 670:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 671:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can't be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, rem1_a_child.*
         Remote SQL: SELECT f1, f2 FROM public.loc1
(5 rows)

--Testcase 672:
DROP TRIGGER trig_row_before_delete ON rem1_a_child;
--Testcase 673:
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 674:
EXPLAIN (verbose, costs off)
UPDATE rem1_a_child set f2 = '';          -- can be pushed down
                        QUERY PLAN                        
----------------------------------------------------------
 Update on public.rem1_a_child
   Remote SQL: UPDATE public.loc1 SET f2 = ? WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, ''::text, f1
         Remote SQL: SELECT f1 FROM public.loc1
(5 rows)

--Testcase 675:
EXPLAIN (verbose, costs off)
DELETE FROM rem1_a_child;                 -- can't be pushed down
                     QUERY PLAN                     
----------------------------------------------------
 Delete on public.rem1_a_child
   Remote SQL: DELETE FROM public.loc1 WHERE f1 = ?
   ->  Foreign Scan on public.rem1_a_child
         Output: f1, rem1_a_child.*
         Remote SQL: SELECT f1, f2 FROM public.loc1
(5 rows)

--Testcase 676:
DROP TRIGGER trig_row_after_delete ON rem1_a_child;
-- ===================================================================
-- test inheritance features
-- ===================================================================
--Testcase 677:
CREATE TABLE a (aa TEXT);
--Testcase 678:
ALTER TABLE a SET (autovacuum_enabled = 'false');
--Testcase 679:
CREATE FOREIGN TABLE b_a_child (bb TEXT, id serial OPTIONS (key 'true')) INHERITS (a)
  SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'loct');
--Testcase 1024:
CREATE TABLE b (aa TEXT, bb TEXT, id serial, spdurl text)
   PARTITION BY LIST (spdurl);
--Testcase 1025:
CREATE FOREIGN TABLE b_a PARTITION OF b FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 680:
INSERT INTO a(aa) VALUES('aaa');
--Testcase 681:
INSERT INTO a(aa) VALUES('aaaa');
--Testcase 682:
INSERT INTO a(aa) VALUES('aaaaa');
--Testcase 683:
INSERT INTO b_a_child(aa) VALUES('bbb');
--Testcase 684:
INSERT INTO b_a_child(aa) VALUES('bbbb');
--Testcase 685:
INSERT INTO b_a_child(aa) VALUES('bbbbb');
--Testcase 686:
SELECT tableoid::regclass, * FROM a;
 tableoid  |  aa   
-----------+-------
 a         | aaa
 a         | aaaa
 a         | aaaaa
 b_a_child | bbb
 b_a_child | bbbb
 b_a_child | bbbbb
(6 rows)

--Testcase 687:
SELECT tableoid::regclass, aa, bb FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b_a      | bbb   | 
 b_a      | bbbb  | 
 b_a      | bbbbb | 
(3 rows)

--Testcase 688:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

--Testcase 689:
UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
--Testcase 690:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | aaa
 a         | zzzzzz
 a         | zzzzzz
 b_a_child | bbb
 b_a_child | bbbb
 b_a_child | bbbbb
(6 rows)

--Testcase 691:
SELECT tableoid::regclass, aa, bb FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b_a      | bbb   | 
 b_a      | bbbb  | 
 b_a      | bbbbb | 
(3 rows)

--Testcase 692:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 693:
UPDATE b_a_child SET aa = 'new';
--Testcase 694:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | aaa
 a         | zzzzzz
 a         | zzzzzz
 b_a_child | new
 b_a_child | new
 b_a_child | new
(6 rows)

--Testcase 695:
SELECT tableoid::regclass, aa, bb FROM b;
 tableoid | aa  | bb 
----------+-----+----
 b_a      | new | 
 b_a      | new | 
 b_a      | new | 
(3 rows)

--Testcase 696:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

--Testcase 697:
UPDATE a SET aa = 'newtoo';
--Testcase 698:
SELECT tableoid::regclass, * FROM a;
 tableoid  |   aa   
-----------+--------
 a         | newtoo
 a         | newtoo
 a         | newtoo
 b_a_child | newtoo
 b_a_child | newtoo
 b_a_child | newtoo
(6 rows)

--Testcase 699:
SELECT tableoid::regclass, aa, bb FROM b;
 tableoid |   aa   | bb 
----------+--------+----
 b_a      | newtoo | 
 b_a      | newtoo | 
 b_a      | newtoo | 
(3 rows)

--Testcase 700:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

--Testcase 701:
DELETE FROM a;
--Testcase 702:
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 703:
SELECT tableoid::regclass, aa, bb FROM b;
 tableoid | aa | bb 
----------+----+----
(0 rows)

--Testcase 704:
SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

--Testcase 705:
DROP TABLE a CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:2627: NOTICE:  drop cascades to foreign table b_a_child
-- DROP TABLE loct;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--Testcase 706:
create table foo (f1 int, f2 int);
--Testcase 707:
create foreign table foo2_a_child (f3 int OPTIONS (key 'true')) inherits (foo)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1');
--Testcase 1026:
create table foo2 (f1 int, f2 int, f3 int, spdurl text)
   PARTITION BY LIST (spdurl);
--Testcase 1027:
CREATE FOREIGN TABLE foo2_a PARTITION OF foo2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 708:
create table bar (f1 int, f2 int);
--Testcase 709:
create foreign table bar2_a_child (f3 int OPTIONS (key 'true')) inherits (bar)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2');
--Testcase 1028:
create table bar2 (f3 int, spdurl text)
  PARTITION BY LIST (spdurl);
--Testcase 1029:
CREATE FOREIGN TABLE bar2_a PARTITION OF bar2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 710:
alter table foo set (autovacuum_enabled = 'false');
--Testcase 711:
alter table bar set (autovacuum_enabled = 'false');
--Testcase 712:
insert into foo values(1,1);
--Testcase 713:
insert into foo values(3,3);
--Testcase 714:
insert into foo2_a_child values(2,2,2);
--Testcase 715:
insert into foo2_a_child values(4,4,4);
--Testcase 716:
insert into bar values(1,11);
--Testcase 717:
insert into bar values(2,22);
--Testcase 718:
insert into bar values(6,66);
--Testcase 719:
insert into bar2_a_child values(3,33,33);
--Testcase 720:
insert into bar2_a_child values(4,44,44);
--Testcase 721:
insert into bar2_a_child values(7,77,77);
--Testcase 722:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for update;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Semi Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2_a_child bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3 FROM public.loct2
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  Append
                     ->  Seq Scan on public.foo foo_1
                           Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                     ->  Foreign Scan on public.foo2_a_child foo_2
                           Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                           Remote SQL: SELECT f1, f2, f3 FROM public.loct1
(19 rows)

--Testcase 723:
select * from bar where f1 in (select f1 from foo) for update;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

--Testcase 724:
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for share;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Semi Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2_a_child bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3 FROM public.loct2
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  Append
                     ->  Seq Scan on public.foo foo_1
                           Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                     ->  Foreign Scan on public.foo2_a_child foo_2
                           Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                           Remote SQL: SELECT f1, f2, f3 FROM public.loct1
(19 rows)

--Testcase 725:
select * from bar where f1 in (select f1 from foo) for share;
 f1 | f2 
----+----
  1 | 11
  2 | 22
  3 | 33
  4 | 44
(4 rows)

-- Check UPDATE with inherited target and an inherited source table
--Testcase 726:
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar
   Foreign Update on public.bar2_a_child bar_1
     Remote SQL: UPDATE public.loct2 SET f2 = ? WHERE f3 = ?
   ->  Hash Semi Join
         Output: bar.f1, (bar.f2 + 100), bar.ctid, foo.ctid, foo.*, foo.tableoid
         Hash Cond: (bar.f1 = foo.f1)
         ->  Seq Scan on public.bar
               Output: bar.f1, bar.f2, bar.ctid
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  Append
                     ->  Seq Scan on public.foo foo_1
                           Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                     ->  Foreign Scan on public.foo2_a_child foo_2
                           Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                           Remote SQL: SELECT f1, f2, f3 FROM public.loct1
   ->  Hash Semi Join
         Output: bar_1.f1, (bar_1.f2 + 100), bar_1.f3, bar_1.f3, foo.ctid, foo.*, foo.tableoid
         Hash Cond: (bar_1.f1 = foo.f1)
         ->  Foreign Scan on public.bar2_a_child bar_1
               Output: bar_1.f1, bar_1.f2, bar_1.f3
               Remote SQL: SELECT f1, f2, f3 FROM public.loct2
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  Append
                     ->  Seq Scan on public.foo foo_1
                           Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                     ->  Foreign Scan on public.foo2_a_child foo_2
                           Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                           Remote SQL: SELECT f1, f2, f3 FROM public.loct1
(31 rows)

--Testcase 727:
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--Testcase 728:
select tableoid::regclass, * from bar order by 1,2;
   tableoid   | f1 | f2  
--------------+----+-----
 bar          |  1 | 111
 bar          |  2 | 122
 bar          |  6 |  66
 bar2_a_child |  3 | 133
 bar2_a_child |  4 | 144
 bar2_a_child |  7 |  77
(6 rows)

-- Check UPDATE with inherited target and an appendrel subquery
--Testcase 729:
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar
   Foreign Update on public.bar2_a_child bar_1
     Remote SQL: UPDATE public.loct2 SET f2 = ? WHERE f3 = ?
   ->  Hash Join
         Output: bar.f1, (bar.f2 + 100), bar.ctid, (ROW(foo.f1))
         Hash Cond: (foo.f1 = bar.f1)
         ->  Append
               ->  Seq Scan on public.foo
                     Output: ROW(foo.f1), foo.f1
               ->  Foreign Scan on public.foo2_a_child foo_1
                     Output: ROW(foo_1.f1), foo_1.f1
                     Remote SQL: SELECT f1 FROM public.loct1
               ->  Seq Scan on public.foo foo_2
                     Output: ROW((foo_2.f1 + 3)), (foo_2.f1 + 3)
               ->  Foreign Scan on public.foo2_a_child foo_3
                     Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                     Remote SQL: SELECT f1 FROM public.loct1
         ->  Hash
               Output: bar.f1, bar.f2, bar.ctid
               ->  Seq Scan on public.bar
                     Output: bar.f1, bar.f2, bar.ctid
   ->  Hash Join
         Output: bar_1.f1, (bar_1.f2 + 100), bar_1.f3, bar_1.f3, (ROW(foo.f1))
         Hash Cond: (foo.f1 = bar_1.f1)
         ->  Append
               ->  Seq Scan on public.foo
                     Output: ROW(foo.f1), foo.f1
               ->  Foreign Scan on public.foo2_a_child foo_1
                     Output: ROW(foo_1.f1), foo_1.f1
                     Remote SQL: SELECT f1 FROM public.loct1
               ->  Seq Scan on public.foo foo_2
                     Output: ROW((foo_2.f1 + 3)), (foo_2.f1 + 3)
               ->  Foreign Scan on public.foo2_a_child foo_3
                     Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                     Remote SQL: SELECT f1 FROM public.loct1
         ->  Hash
               Output: bar_1.f1, bar_1.f2, bar_1.f3
               ->  Foreign Scan on public.bar2_a_child bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.f3
                     Remote SQL: SELECT f1, f2, f3 FROM public.loct2
(41 rows)

--Testcase 730:
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
--Testcase 731:
select tableoid::regclass, * from bar order by 1,2;
   tableoid   | f1 | f2  
--------------+----+-----
 bar          |  1 | 211
 bar          |  2 | 222
 bar          |  6 | 166
 bar2_a_child |  3 | 233
 bar2_a_child |  4 | 244
 bar2_a_child |  7 | 177
(6 rows)

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
-- truncate table loct1;
--Testcase 1030:
delete from foo2_a_child;
truncate table only foo;
\set num_rows_foo 2000
--Testcase 732:
insert into foo2_a_child select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--Testcase 733:
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
--Testcase 734:
SET enable_hashjoin to false;
--Testcase 735:
SET enable_nestloop to false;
--Testcase 736:
--alter foreign table foo2 options (use_remote_estimate 'true'); -- does not support this option
--Testcase 737:
--create index i_foo2_f1 on foo2(f1);
--Testcase 738:
create index i_foo_f1 on foo(f1);
analyze foo;
-- analyze foo2;
-- inner join; expressions in the clauses appear in the equivalence class list
--Testcase 739:
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo.f1 = foo2.f1)
               ->  Merge Append
                     Sort Key: foo.f1
                     ->  Index Scan using i_foo_f1 on public.foo foo_1
                           Output: foo_1.f1, foo_1.f2
                     ->  Sort
                           Output: foo_2.f1, foo_2.f2
                           Sort Key: foo_2.f1
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2_a foo2
                           Output: foo2.f1
                             Remote SQL: SELECT f1 FROM public.loct1
(24 rows)

--Testcase 740:
select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 20 | 20
 22 | 22
 24 | 24
 26 | 26
 28 | 28
 30 | 30
 32 | 32
 34 | 34
 36 | 36
 38 | 38
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
--Testcase 741:
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Left Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo.f1 = foo2.f1)
               ->  Merge Append
                     Sort Key: foo.f1
                     ->  Index Scan using i_foo_f1 on public.foo foo_1
                           Output: foo_1.f1, foo_1.f2
                     ->  Sort
                           Output: foo_2.f1, foo_2.f2
                           Sort Key: foo_2.f1
                           ->  Foreign Scan on public.foo2_a_child foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2_a foo2
                           Output: foo2.f1
                             Remote SQL: SELECT f1 FROM public.loct1
(24 rows)

--Testcase 742:
select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 10 | 10
 11 |   
 12 | 12
 13 |   
 14 | 14
 15 |   
 16 | 16
 17 |   
 18 | 18
 19 |   
(10 rows)

--Testcase 743:
RESET enable_hashjoin;
--Testcase 744:
RESET enable_nestloop;
-- Test that WHERE CURRENT OF is not supported
-- begin;
-- declare c cursor for select * from bar where f1 = 7;
-- fetch from c;
-- update bar set f2 = null where current of c;
-- rollback;
--Testcase 745:
explain (verbose, costs off)
delete from foo where f1 < 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Delete on public.foo
   Delete on public.foo
   Foreign Delete on public.foo2_a_child foo_1
     Remote SQL: DELETE FROM public.loct1 WHERE f3 = ?
   ->  Index Scan using i_foo_f1 on public.foo
         Output: foo.ctid
         Index Cond: (foo.f1 < 5)
   ->  Foreign Scan on public.foo2_a_child foo_1
         Output: foo_1.f3
         Remote SQL: SELECT f3 FROM public.loct1 WHERE ((f1 < 5))
(10 rows)

--Testcase 746:
delete from foo where f1 < 5;
--Testcase 747:
explain (verbose, costs off)
update bar set f2 = f2 + 100;
                           QUERY PLAN                           
----------------------------------------------------------------
 Update on public.bar
   Update on public.bar
   Foreign Update on public.bar2_a_child bar_1
     Remote SQL: UPDATE public.loct2 SET f2 = ? WHERE f3 = ?
   ->  Seq Scan on public.bar
         Output: bar.f1, (bar.f2 + 100), bar.ctid
   ->  Foreign Scan on public.bar2_a_child bar_1
         Output: bar_1.f1, (bar_1.f2 + 100), bar_1.f3, bar_1.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct2
(9 rows)

--Testcase 748:
update bar set f2 = f2 + 100;
-- Test that UPDATE/DELETE with inherited target works with row-level triggers
--Testcase 749:
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 750:
CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2_a_child
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
--Testcase 751:
explain (verbose, costs off)
update bar set f2 = f2 + 100;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar
   Foreign Update on public.bar2_a_child bar_1
     Remote SQL: UPDATE public.loct2 SET f1 = ?, f2 = ?, f3 = ? WHERE f3 = ?
   ->  Seq Scan on public.bar
         Output: bar.f1, (bar.f2 + 100), bar.ctid
   ->  Foreign Scan on public.bar2_a_child bar_1
         Output: bar_1.f1, (bar_1.f2 + 100), bar_1.f3, bar_1.f3, bar_1.*
         Remote SQL: SELECT f1, f2, f3 FROM public.loct2
(9 rows)

--Testcase 752:
update bar set f2 = f2 + 100;
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (3,333,33),NEW: (3,433,33)
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (4,344,44),NEW: (4,444,44)
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (7,277,77),NEW: (7,377,77)
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (3,333,33),NEW: (3,433,33)
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (4,344,44),NEW: (4,444,44)
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2794: NOTICE:  OLD: (7,277,77),NEW: (7,377,77)
--Testcase 753:
explain (verbose, costs off)
delete from bar where f2 < 400;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Delete on public.bar
   Delete on public.bar
   Foreign Delete on public.bar2_a_child bar_1
     Remote SQL: DELETE FROM public.loct2 WHERE f3 = ?
   ->  Seq Scan on public.bar
         Output: bar.ctid
         Filter: (bar.f2 < 400)
   ->  Foreign Scan on public.bar2_a_child bar_1
         Output: bar_1.f3, bar_1.*
         Remote SQL: SELECT f1, f2, f3 FROM public.loct2 WHERE ((f2 < 400))
(10 rows)

--Testcase 754:
delete from bar where f2 < 400;
psql:sql/13.15/ported_odbc_fdw.sql:2800: NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2800: NOTICE:  OLD: (7,377,77)
psql:sql/13.15/ported_odbc_fdw.sql:2800: NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON bar2_a_child
psql:sql/13.15/ported_odbc_fdw.sql:2800: NOTICE:  OLD: (7,377,77)
-- cleanup
--Testcase 755:
drop table foo cascade;
psql:sql/13.15/ported_odbc_fdw.sql:2804: NOTICE:  drop cascades to foreign table foo2_a_child
--Testcase 756:
drop table bar cascade;
psql:sql/13.15/ported_odbc_fdw.sql:2806: NOTICE:  drop cascades to foreign table bar2_a_child
-- drop table loct1;
-- drop table loct2;
-- Test pushing down UPDATE/DELETE joins to the remote server
--Testcase 757:
create table parent (a int, b text);
--Testcase 758:
create foreign table loct1_2 (a int, b text)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_2');
--Testcase 759:
create foreign table loct2_2 (a int, b text)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_2');
--Testcase 760:
create foreign table remt1_a_child (a int OPTIONS (key 'true'), b text)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_2');
--Testcase 1031:
create table remt1 (a int, b text, spdurl text)
  PARTITION BY LIST (spdurl);
--Testcase 1032:
CREATE FOREIGN TABLE remt1_a PARTITION OF remt1 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 761:
create foreign table remt2_a_child (a int, b text)
  server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_2');
--Testcase 1033:
create table remt2 (a int, b text, spdurl text)
  PARTITION BY LIST (spdurl);
--Testcase 1034:
CREATE FOREIGN TABLE remt2_a PARTITION OF remt2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 762:
alter foreign table remt1_a_child inherit parent;
--Testcase 763:
insert into remt1_a_child values (1, 'foo');
--Testcase 764:
insert into remt1_a_child values (2, 'bar');
--Testcase 765:
insert into remt1_a_child values (1, 'foo');
--Testcase 766:
insert into remt1_a_child values (2, 'bar');
--analyze remt1;
--analyze remt2;
--Testcase 767:
explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Update on public.parent
   Update on public.parent
   Foreign Update on public.remt1_a_child parent_1
     Remote SQL: UPDATE public.loct1_2 SET b = ? WHERE a = ?
   ->  Nested Loop
         Output: parent.a, (parent.b || remt2.b), parent.ctid, remt2.ctid, ((remt2.*)::remt2), remt2.tableoid
         Join Filter: (parent.a = remt2.a)
         ->  Seq Scan on public.parent
               Output: parent.a, parent.b, parent.ctid
         ->  Foreign Scan on public.remt2_a remt2
               Output: remt2.b, remt2.ctid, remt2.a, remt2.*, remt2.tableoid
                 Remote SQL: SELECT a, b FROM public.loct2_2
   ->  Hash Join
         Output: parent_1.a, (parent_1.b || remt2.b), parent_1.a, remt2.ctid, ((remt2.*)::remt2), remt2.tableoid
         Hash Cond: (parent_1.a = remt2.a)
         ->  Foreign Scan on public.remt1_a_child parent_1
               Output: parent_1.a, parent_1.b
               Remote SQL: SELECT a, b FROM public.loct1_2
         ->  Hash
               Output: remt2.b, remt2.ctid, remt2.a, ((remt2.*)::remt2), remt2.tableoid
               ->  Foreign Scan on public.remt2_a remt2
                     Output: remt2.b, remt2.ctid, remt2.a, remt2.*, remt2.tableoid
                       Remote SQL: SELECT a, b FROM public.loct2_2
(23 rows)

--Testcase 768:
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a;
--Testcase 769:
explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Delete on public.parent
   Delete on public.parent
   Foreign Delete on public.remt1_a_child parent_1
     Remote SQL: DELETE FROM public.loct1_2 WHERE a = ?
   ->  Nested Loop
         Output: parent.ctid, remt2.ctid, ((remt2.*)::remt2), remt2.tableoid
         Join Filter: (parent.a = remt2.a)
         ->  Seq Scan on public.parent
               Output: parent.ctid, parent.a
         ->  Foreign Scan on public.remt2_a remt2
               Output: remt2.ctid, remt2.a, remt2.*, remt2.tableoid
                 Remote SQL: SELECT a, b FROM public.loct2_2
   ->  Hash Join
         Output: parent_1.a, remt2.ctid, ((remt2.*)::remt2), remt2.tableoid
         Hash Cond: (parent_1.a = remt2.a)
         ->  Foreign Scan on public.remt1_a_child parent_1
               Output: parent_1.a, parent_1.b
               Remote SQL: SELECT a FROM public.loct1_2
         ->  Hash
               Output: remt2.ctid, remt2.a, ((remt2.*)::remt2), remt2.tableoid
               ->  Foreign Scan on public.remt2_a remt2
                     Output: remt2.ctid, remt2.a, remt2.*, remt2.tableoid
                       Remote SQL: SELECT a, b FROM public.loct2_2
(23 rows)

--Testcase 770:
delete from parent using remt2 where parent.a = remt2.a;
-- cleanup
--Testcase 771:
drop foreign table remt1_a_child;
--Testcase 1035:
drop table remt1;
--Testcase 772:
drop foreign table remt2_a_child;
--Testcase 1036:
drop table remt2;
--Testcase 773:
drop table parent;
-- PGSpider Extension does not support INSERT/UPDATE/DELETE directly on
-- parent table, so we skip these test cases.
-- -- Does not support tuple routing/COPY
-- -- ===================================================================
-- -- test tuple routing for foreign-table partitions
-- -- ===================================================================
-- -- Test insert tuple routing
-- --Testcase 774:
-- create table itrtest (a int, b text, id int) partition by list (a);
-- --Testcase 775:
-- create foreign table loct1_3 (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_3');
-- --Testcase 776:
-- create foreign table remp1 (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_3');
-- --Testcase 777:
-- create foreign table loct2_3 (b text, a int check (a in (2))) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_3');
-- --Testcase 778:
-- create foreign table remp2 (b text, a int check (a in (2)), id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_3');
-- --Testcase 779:
-- alter table itrtest attach partition remp1 for values in (1);
-- --Testcase 780:
-- alter table itrtest attach partition remp2 for values in (2);
-- --Testcase 781:
-- insert into itrtest(a, b) values (1, 'foo');
-- --Testcase 782:
-- insert into itrtest values (1, 'bar');
-- --Testcase 783:
-- insert into itrtest values (2, 'baz');
-- --Testcase 784:
-- insert into itrtest values (2, 'qux');
-- --Testcase 785:
-- insert into itrtest values (1, 'test1'), (2, 'test2');
-- --Testcase 786:
-- select tableoid::regclass, a, b FROM itrtest;
-- --Testcase 787:
-- select tableoid::regclass, a, b FROM remp1;
-- --Testcase 788:
-- select tableoid::regclass, a, b FROM remp2;
-- --Testcase 789:
-- delete from itrtest;
-- --Testcase 790:
-- create unique index loct1_idx on loct1_3 (a);
-- -- DO NOTHING without an inference specification is supported
-- --Testcase 791:
-- insert into itrtest values (1, 'foo') on conflict do nothing;
-- --Testcase 792:
-- insert into itrtest values (1, 'foo') on conflict do nothing;
-- -- But other cases are not supported
-- --Testcase 793:
-- insert into itrtest values (1, 'bar') on conflict (a) do nothing;
-- --Testcase 794:
-- insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;
-- --Testcase 795:
-- select tableoid::regclass, * FROM itrtest;
-- --Testcase 796:
-- delete from itrtest;
-- --Testcase 797:
-- drop index loct1_idx;
-- -- -- Test that remote triggers work with insert tuple routing
-- --Testcase 798:
-- create function br_insert_trigfunc() returns trigger as $$
-- begin
-- 	new.b := new.b || ' triggered !';
-- 	return new;
-- end
-- $$ language plpgsql;
-- --Testcase 799:
-- create trigger loct1_br_insert_trigger before insert on loct1_3
-- 	for each row execute procedure br_insert_trigfunc();
-- --Testcase 800:
-- create trigger loct2_br_insert_trigger before insert on loct2_3
-- 	for each row execute procedure br_insert_trigfunc();
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 801:
-- insert into itrtest values (1, 'foo');
-- --Testcase 802:
-- insert into itrtest values (2, 'qux');
-- --Testcase 803:
-- insert into itrtest values (1, 'test1'), (2, 'test2');
-- --Testcase 804:
-- with result as (insert into itrtest values (1, 'test1'), (2, 'test2')) select * from result;
-- --Testcase 805:
-- drop trigger loct1_br_insert_trigger on loct1_3;
-- --Testcase 806:
-- drop trigger loct2_br_insert_trigger on loct2_3;
-- --Testcase 807:
-- drop table itrtest;
-- -- drop table loct1;
-- -- drop table loct2;
-- -- Test update tuple routing
-- --Testcase 808:
-- create table utrtest (a int, b text, id int) partition by list (a);
-- --Testcase 809:
-- create foreign table loct_2 (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct_2');
-- --Testcase 810:
-- create foreign table remp (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct_2');
-- --Testcase 811:
-- create table locp (a int check (a in (2)), b text, id int);
-- --Testcase 812:
-- alter table utrtest attach partition remp for values in (1);
-- --Testcase 813:
-- alter table utrtest attach partition locp for values in (2);
-- --Testcase 814:
-- insert into utrtest values (1, 'foo');
-- --Testcase 815:
-- insert into utrtest values (2, 'qux');
-- --Testcase 816:
-- select tableoid::regclass, * FROM utrtest;
-- --Testcase 817:
-- select tableoid::regclass, * FROM remp;
-- --Testcase 818:
-- select tableoid::regclass, * FROM locp;
-- -- It's not allowed to move a row from a partition that is foreign to another
-- --Testcase 819:
-- update utrtest set a = 2 where b = 'foo';
-- -- But the reverse is allowed
-- --Testcase 820:
-- update utrtest set a = 1 where b = 'qux';
-- --Testcase 821:
-- select tableoid::regclass, * FROM utrtest;
-- --Testcase 822:
-- select tableoid::regclass, * FROM remp;
-- --Testcase 823:
-- select tableoid::regclass, * FROM locp;
-- -- The executor should not let unexercised FDWs shut down
-- --Testcase 824:
-- update utrtest set a = 1 where b = 'foo';
-- -- Test that remote triggers work with update tuple routing
-- --Testcase 825:
-- create trigger loct_br_insert_trigger before insert on loct_2
-- 	for each row execute procedure br_insert_trigfunc();
-- --Testcase 826:
-- delete from utrtest;
-- --Testcase 827:
-- insert into utrtest values (2, 'qux');
-- -- Check case where the foreign partition is a subplan target rel
-- --Testcase 828:
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 1 or a = 2;
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 829:
-- update utrtest set a = 1 where a = 1 or a = 2;
-- --Testcase 830:
-- delete from utrtest;
-- --Testcase 831:
-- insert into utrtest values (2, 'qux');
-- -- Check case where the foreign partition isn't a subplan target rel
-- --Testcase 832:
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 2;
-- -- The new values are concatenated with ' triggered !'
-- --Testcase 833:
-- update utrtest set a = 1 where a = 2;
-- --Testcase 834:
-- drop trigger loct_br_insert_trigger on loct_2;
-- -- We can move rows to a foreign partition that has been updated already,
-- -- but can't move rows to a foreign partition that hasn't been updated yet
-- --Testcase 835:
-- delete from utrtest;
-- --Testcase 836:
-- insert into utrtest values (1, 'foo');
-- --Testcase 837:
-- insert into utrtest values (2, 'qux');
-- -- Test the former case:
-- -- with a direct modification plan
-- --Testcase 838:
-- explain (verbose, costs off)
-- update utrtest set a = 1;
-- --Testcase 839:
-- update utrtest set a = 1;
-- --Testcase 840:
-- delete from utrtest;
-- --Testcase 841:
-- insert into utrtest values (1, 'foo');
-- --Testcase 842:
-- insert into utrtest values (2, 'qux');
-- -- with a non-direct modification plan
-- --Testcase 843:
-- explain (verbose, costs off)
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x;
-- --Testcase 844:
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x;
-- -- Change the definition of utrtest so that the foreign partition get updated
-- -- after the local partition
-- --Testcase 845:
-- delete from utrtest;
-- --Testcase 846:
-- alter table utrtest detach partition remp;
-- --Testcase 847:
-- drop foreign table remp;
-- --Testcase 848:
-- alter foreign table loct_2 drop constraint loct_2_a_check;
-- --Testcase 849:
-- alter foreign table loct_2 add check (a in (3));
-- --Testcase 850:
-- create foreign table remp (a int check (a in (3)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct_2');
-- --Testcase 851:
-- alter table utrtest attach partition remp for values in (3);
-- --Testcase 852:
-- insert into utrtest values (2, 'qux');
-- --Testcase 853:
-- insert into utrtest values (3, 'xyzzy');
-- -- Test the latter case:
-- -- with a direct modification plan
-- --Testcase 854:
-- explain (verbose, costs off)
-- update utrtest set a = 3;
-- --Testcase 855:
-- update utrtest set a = 3; -- ERROR
-- -- with a non-direct modification plan
-- --Testcase 856:
-- explain (verbose, costs off)
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x;
-- --Testcase 857:
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x; -- ERROR
-- --Testcase 858:
-- drop table utrtest;
-- -- drop table loct;
-- -- Test copy tuple routing
-- --Testcase 859:
-- create table ctrtest (a int, b text, id int) partition by list (a);
-- --Testcase 860:
-- create foreign table loct1_4 (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_4');
-- --Testcase 861:
-- create foreign table remp1 (a int check (a in (1)), b text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct1_4');
-- --Testcase 862:
-- create foreign table loct2_4 (b text, a int check (a in (2)), id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_4');
-- --Testcase 863:
-- create foreign table remp2 (b text, a int check (a in (2)), id int OPTIONS (key 'true')) server :DB_SERVERNAME options (schema :DB_SCHEMA_PORT_TEST, table 'loct2_4');
-- --Testcase 864:
-- alter table ctrtest attach partition remp1 for values in (1);
-- --Testcase 865:
-- alter table ctrtest attach partition remp2 for values in (2);
-- copy ctrtest from stdin;
-- 1	foo	1
-- 2	qux	2
-- \.
-- --Testcase 866:
-- select tableoid::regclass, * FROM ctrtest;
-- --Testcase 867:
-- select tableoid::regclass, * FROM remp1;
-- --Testcase 868:
-- select tableoid::regclass, * FROM remp2;
-- -- Copying into foreign partitions directly should work as well
-- copy remp1 from stdin;
-- 1	bar	1
-- \.
-- --Testcase 869:
-- select tableoid::regclass, * FROM remp1;
-- --Testcase 870:
-- drop table ctrtest;
-- -- drop table loct1;
-- -- drop table loct2;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
--Testcase 871:
create foreign table loc2_a_child (f1 int, f2 text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc2');
--Testcase 1037:
create table loc2 (f1 int, f2 text, id int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1038:
CREATE FOREIGN TABLE loc2_a PARTITION OF loc2 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 872:
create foreign table rem2_a_child (f1 int, f2 text, id int OPTIONS (key 'true')) server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc2');
--Testcase 1039:
create table rem2 (f1 int, f2 text, id int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1040:
CREATE FOREIGN TABLE rem2_a PARTITION OF rem2 FOR VALUES IN ('/node1/') SERVER spdsrv;
-- Test basic functionality
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3191: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 873:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 874:
delete from rem2_a_child;
-- Test check constraints
--Testcase 875:
alter foreign table loc2_a_child add constraint loc2_f1positive check (f1 >= 0);
--Testcase 876:
alter foreign table rem2_a_child add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3208: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
copy rem2_a_child from stdin; -- ERROR
psql:sql/13.15/ported_odbc_fdw.sql:3211: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 877:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 878:
alter foreign table rem2_a_child drop constraint rem2_f1positive;
--Testcase 879:
alter foreign table loc2_a_child drop constraint loc2_f1positive;
--Testcase 880:
delete from rem2_a_child;
-- Test local triggers
--Testcase 881:
create trigger trig_stmt_before before insert on rem2_a_child
	for each statement execute procedure trigger_func();
--Testcase 882:
create trigger trig_stmt_after after insert on rem2_a_child
	for each statement execute procedure trigger_func();
--Testcase 883:
create trigger trig_row_before before insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 884:
create trigger trig_row_after after insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3240: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 885:
select * from rem2_a_child;
 f1 | f2 | id 
----+----+----
(0 rows)

--Testcase 886:
drop trigger trig_row_before on rem2_a_child;
--Testcase 887:
drop trigger trig_row_after on rem2_a_child;
--Testcase 888:
drop trigger trig_stmt_before on rem2_a_child;
--Testcase 889:
drop trigger trig_stmt_after on rem2_a_child;
--Testcase 890:
delete from rem2_a_child;
--Testcase 891:
create trigger trig_row_before_insert before insert on rem2_a_child
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3264: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 892:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 893:
drop trigger trig_row_before_insert on rem2_a_child;
--Testcase 894:
delete from rem2_a_child;
--Testcase 895:
create trigger trig_null before insert on rem2_a_child
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3282: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 896:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 897:
drop trigger trig_null on rem2_a_child;
--Testcase 898:
delete from rem2_a_child;
-- Test remote triggers
--Testcase 899:
create trigger trig_row_before_insert before insert on loc2_a_child
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3301: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 900:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 901:
drop trigger trig_row_before_insert on loc2_a_child;
--Testcase 902:
delete from rem2;
psql:sql/13.15/ported_odbc_fdw.sql:3309: ERROR:  cannot delete from foreign table "rem2_a"
--Testcase 903:
create trigger trig_null before insert on loc2_a_child
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3319: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 904:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 905:
drop trigger trig_null on loc2_a_child;
--Testcase 906:
delete from rem2_a_child;
-- Test a combination of local and remote triggers
--Testcase 907:
create trigger rem2_trig_row_before before insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 908:
create trigger rem2_trig_row_after after insert on rem2_a_child
	for each row execute procedure trigger_data(23,'skidoo');
--Testcase 909:
create trigger loc2_trig_row_before_insert before insert on loc2_a_child
	for each row execute procedure trig_row_before_insupdate();
copy rem2_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3343: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
--Testcase 910:
select * from rem2;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 911:
drop trigger rem2_trig_row_before on rem2_a_child;
--Testcase 912:
drop trigger rem2_trig_row_after on rem2_a_child;
--Testcase 913:
drop trigger loc2_trig_row_before_insert on loc2_a_child;
--Testcase 914:
delete from rem2_a_child;
-- test COPY FROM with foreign table created in the same transaction
-- begin;
--Testcase 915:
create foreign table loc3_a_child (f1 int, f2 text, id int OPTIONS (key 'true'))
	server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc3');
--Testcase 1041:
create table loc3 (f1 int, f2 text, id int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1042:
CREATE FOREIGN TABLE loc3_a PARTITION OF loc3 FOR VALUES IN ('/node1/') SERVER spdsrv;
--Testcase 916:
create foreign table rem3_a_child (f1 int, f2 text, id int OPTIONS (key 'true'))
	server :DB_SERVERNAME options(schema :DB_SCHEMA_PORT_TEST, table 'loc3');
--Testcase 1043:
create table rem3 (f1 int, f2 text, id int, spdurl text) PARTITION BY LIST (spdurl);
--Testcase 1044:
CREATE FOREIGN TABLE rem3_a PARTITION OF rem3 FOR VALUES IN ('/node1/') SERVER spdsrv;
copy rem3_a_child from stdin;
psql:sql/13.15/ported_odbc_fdw.sql:3378: ERROR:  COPY and foreign partition routing not supported in odbc_fdw
-- commit;
--Testcase 917:
select * from rem3;
 f1 | f2 | id | spdurl 
----+----+----+--------
(0 rows)

--Testcase 918:
drop foreign table rem3_a_child;
-- drop table loc3;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
--Testcase 1045:
CREATE SERVER mysql_svr FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
  OPTIONS (odbc_DRIVER :DB_DRIVERNAME,
          odbc_SERVER :DB_SERVER,
          odbc_PORT :DB_PORT,
          odbc_DATABASE 'import_source');
--Testcase 1046:
CREATE USER MAPPING FOR public SERVER mysql_svr OPTIONS(odbc_UID :DB_USER, odbc_PWD :DB_PASS);
--Testcase 921:
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER mysql_svr INTO import_dest1; --fail for postgres
psql:sql/13.15/ported_odbc_fdw.sql:3399: ERROR:  Connecting to driver
IMPORT FOREIGN SCHEMA import_source FROM SERVER :DB_SERVERNAME INTO import_dest1; --fail for mysql
--Testcase 922:
\det+ import_dest1.*
                                     List of foreign tables
    Schema    | Table |     Server      |               FDW options               | Description 
--------------+-------+-----------------+-----------------------------------------+-------------
 import_dest1 | t1    | postgres_server | ("table" 't1', schema 'import_source')  | 
 import_dest1 | t2    | postgres_server | ("table" 't2', schema 'import_source')  | 
 import_dest1 | t3    | postgres_server | ("table" 't3', schema 'import_source')  | 
 import_dest1 | t5    | postgres_server | ("table" 't5', schema 'import_source')  | 
 import_dest1 | x_4   | postgres_server | ("table" 'x_4', schema 'import_source') | 
(5 rows)

--Testcase 923:
\d import_dest1.*
                        Foreign table "import_dest1.t1"
 Column |         Type          | Collation | Nullable | Default | FDW options 
--------+-----------------------+-----------+----------+---------+-------------
 c1     | integer               |           |          |         | 
 c2     | character varying(10) |           |          |         | 
Server: postgres_server
FDW options: ("table" 't1', schema 'import_source')

                        Foreign table "import_dest1.t2"
 Column |         Type          | Collation | Nullable | Default | FDW options 
--------+-----------------------+-----------+----------+---------+-------------
 c1     | integer               |           |          |         | 
 c2     | character varying(10) |           |          |         | 
 c3     | text                  |           |          |         | 
Server: postgres_server
FDW options: ("table" 't2', schema 'import_source')

                           Foreign table "import_dest1.t3"
 Column |            Type             | Collation | Nullable | Default | FDW options 
--------+-----------------------------+-----------+----------+---------+-------------
 c1     | timestamp without time zone |           |          |         | 
 c2     | character varying(10)       |           |          |         | 
Server: postgres_server
FDW options: ("table" 't3', schema 'import_source')

                        Foreign table "import_dest1.t5"
 Column |          Type          | Collation | Nullable | Default | FDW options 
--------+------------------------+-----------+----------+---------+-------------
 c1     | integer                |           |          |         | 
 c2     | text                   |           |          |         | 
 Col    | character varying(255) |           |          |         | 
Server: postgres_server
FDW options: ("table" 't5', schema 'import_source')

                       Foreign table "import_dest1.x_4"
 Column |         Type          | Collation | Nullable | Default | FDW options 
--------+-----------------------+-----------+----------+---------+-------------
 c1     | real                  |           |          |         | 
 c_2    | text                  |           |          |         | 
 c3     | character varying(42) |           |          |         | 
Server: postgres_server
FDW options: ("table" 'x_4', schema 'import_source')

/*
-- Does not support options
-- Options
--Testcase 924:
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER :DB_SERVERNAME INTO import_dest2
  OPTIONS (import_default 'true');
--Testcase 925:
\det+ import_dest2.*
--Testcase 926:
\d import_dest2.*
--Testcase 927:
CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER :DB_SERVERNAME INTO import_dest3
  OPTIONS (import_collate 'false', import_not_null 'false');
--Testcase 928:
\det+ import_dest3.*
--Testcase 929:
\d import_dest3.*

-- Check LIMIT TO and EXCEPT
--Testcase 930:
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch)
  FROM SERVER :DB_SERVERNAME INTO import_dest4;
--Testcase 931:
\det+ import_dest4.*
IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch)
  FROM SERVER :DB_SERVERNAME INTO import_dest4;
--Testcase 932:
\det+ import_dest4.*

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER :DB_SERVERNAME INTO import_dest4;
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER :DB_SERVERNAME INTO import_dest4;
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER :DB_SERVERNAME INTO notthere;
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;

-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
--Testcase 919:
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
--Testcase 933:
CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");

--Testcase 934:
CREATE SCHEMA import_dest5;
-- BEGIN;
--Testcase 935:
DROP TYPE "Colors" CASCADE;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER :DB_SERVERNAME INTO import_dest5;  -- ERROR
-- ROLLBACK;
*/
/*
-- Does not support fetch_size option
-- BEGIN;
--Testcase 936:
CREATE SERVER fetch101 FOREIGN DATA WRAPPER :DB_EXTENSIONNAME OPTIONS( fetch_size '101' );

--Testcase 937:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];

--Testcase 938:
ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );

--Testcase 939:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];

--Testcase 940:
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];

--Testcase 941:
CREATE FOREIGN TABLE table30000 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );

--Testcase 942:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];

--Testcase 943:
ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');

--Testcase 944:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];

--Testcase 945:
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=60000'];

-- ROLLBACK;
*/
/*
-- Does not support partition table
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
--Testcase 946:
SET enable_partitionwise_join=on;

--Testcase 947:
CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
--Testcase 948:
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'fprt1_p1', use_remote_estimate 'true');
--Testcase 949:
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'fprt1_p2');
-- ANALYZE fprt1;
-- ANALYZE fprt1_p1;
-- ANALYZE fprt1_p2;

--Testcase 950:
CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
--Testcase 951:
CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int)
	SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'fprt2_p1', use_remote_estimate 'true');
--Testcase 952:
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
--Testcase 953:
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'fprt2_p2', use_remote_estimate 'true');

-- inner join three tables
--Testcase 954:
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
--Testcase 955:
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;

-- left outer join + nullable clause
--Testcase 956:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
--Testcase 957:
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;

-- with whole-row reference; partitionwise join does not apply
--Testcase 958:
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
--Testcase 959:
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;

-- join with lateral reference
--Testcase 960:
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
--Testcase 961:
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;

-- with PHVs, partitionwise join selected but no join pushdown
--Testcase 962:
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
--Testcase 963:
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;

-- test FOR UPDATE; partitionwise join does not apply
--Testcase 964:
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
--Testcase 965:
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;

--Testcase 966:
RESET enable_partitionwise_join;


-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================

--Testcase 967:
CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);

-- Create foreign partitions
--Testcase 968:
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'pagg_tab_p1');
--Testcase 969:
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'pagg_tab_p2');;
--Testcase 970:
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA_PORT_TEST, table 'pagg_tab_p3');;


-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
--Testcase 971:
SET enable_partitionwise_aggregate TO false;
--Testcase 972:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- Plan with partitionwise aggregates is enabled
--Testcase 973:
SET enable_partitionwise_aggregate TO true;
--Testcase 974:
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
--Testcase 975:
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
--Testcase 976:
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
--Testcase 977:
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;

-- When GROUP BY clause does not match with PARTITION KEY.
--Testcase 978:
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
*/
-- Does not support rights
-- ===================================================================
-- access rights and superuser
-- ===================================================================
-- -- Non-superuser cannot create a FDW without a password in the connstr
-- CREATE ROLE regress_nosuper NOSUPERUSER;
-- GRANT USAGE ON FOREIGN DATA WRAPPER :DB_EXTENSIONNAME TO regress_nosuper;
-- SET ROLE regress_nosuper;
-- SHOW is_superuser;
-- -- This will be OK, we can create the FDW
-- DO $d$
--     BEGIN
--         EXECUTE $$CREATE SERVER loopback_nopw FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
--             OPTIONS (dbname '$$||current_database()||$$',
--                      port '$$||current_setting('port')||$$'
--             )$$;
--     END;
-- $d$;
-- -- But creation of user mappings for non-superusers should fail
-- CREATE USER MAPPING FOR public SERVER loopback_nopw;
-- CREATE USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;
-- CREATE FOREIGN TABLE ft1_nopw (
-- 	c1 int NOT NULL,
-- 	c2 int NOT NULL,
-- 	c3 text,
-- 	c4 timestamptz,
-- 	c5 timestamp,
-- 	c6 varchar(10),
-- 	c7 char(10) default 'ft1',
-- 	c8 user_enum
-- ) SERVER loopback_nopw OPTIONS (schema_name 'public', table 'ft1');
-- SELECT * FROM ft1_nopw LIMIT 1;
-- -- If we add a password to the connstr it'll fail, because we don't allow passwords
-- -- in connstrs only in user mappings.
-- DO $d$
--     BEGIN
--         EXECUTE $$ALTER SERVER loopback_nopw OPTIONS (ADD password 'dummypw')$$;
--     END;
-- $d$;
-- -- If we add a password for our user mapping instead, we should get a different
-- -- error because the password wasn't actually *used* when we run with trust auth.
-- --
-- -- This won't work with installcheck, but neither will most of the FDW checks.
-- ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');
-- SELECT * FROM ft1_nopw LIMIT 1;
-- -- Unpriv user cannot make the mapping passwordless
-- ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password_required 'false');
-- SELECT * FROM ft1_nopw LIMIT 1;
-- RESET ROLE;
-- -- But the superuser can
-- ALTER USER MAPPING FOR regress_nosuper SERVER loopback_nopw OPTIONS (ADD password_required 'false');
-- SET ROLE regress_nosuper;
-- -- Should finally work now
-- SELECT * FROM ft1_nopw LIMIT 1;
-- -- unpriv user also cannot set sslcert / sslkey on the user mapping
-- -- first set password_required so we see the right error messages
-- ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (SET password_required 'true');
-- ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslcert 'foo.crt');
-- ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslkey 'foo.key');
-- -- We're done with the role named after a specific user and need to check the
-- -- changes to the public mapping.
-- DROP USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;
-- -- This will fail again as it'll resolve the user mapping for public, which
-- -- lacks password_required=false
-- SELECT * FROM ft1_nopw LIMIT 1;
-- RESET ROLE;
-- -- The user mapping for public is passwordless and lacks the password_required=false
-- -- mapping option, but will work because the current user is a superuser.
-- SELECT * FROM ft1_nopw LIMIT 1;
-- -- cleanup
-- DROP USER MAPPING FOR public SERVER loopback_nopw;
-- DROP OWNED BY regress_nosuper;
-- DROP ROLE regress_nosuper;
-- -- Clean-up
-- RESET enable_partitionwise_aggregate;
-- -- Two-phase transactions are not supported.
-- BEGIN;
-- SELECT count(*) FROM ft1;
-- -- error here
-- PREPARE TRANSACTION 'fdw_tpc';
-- ROLLBACK;
--Testcase 1047:
DROP TABLE ft1;
--Testcase 1048:
DROP TABLE ft2;
--Testcase 1049:
DROP TABLE ft3;
--Testcase 1050:
DROP TABLE ft4;
--Testcase 1051:
DROP TABLE ft5;
--Testcase 1052:
DROP TABLE ft6;
--Testcase 1053:
DROP TABLE foreign_tbl;
--Testcase 1054:
DROP TABLE loc1;
--Testcase 1055:
DROP TABLE loc2;
--Testcase 1056:
DROP TABLE loc3;
--Testcase 1057:
DROP TABLE rem1;
--Testcase 1058:
DROP TABLE rem2;
--Testcase 1059:
DROP TABLE rem3;
--Testcase 1060:
DROP TABLE grem1;
--Testcase 1061:
DROP TABLE b;
--Testcase 1062:
DROP TABLE foo2;
--Testcase 1063:
DROP TABLE bar2;
--Testcase 1064:
DROP FUNCTION trigger_func;
--Testcase 1065:
DROP FUNCTION trig_row_before_insupdate;
--Testcase 1066:
DROP FUNCTION trig_null;
--Testcase 1067:
DROP SCHEMA "S 1" CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:3788: NOTICE:  drop cascades to 36 other objects
DETAIL:  drop cascades to foreign table "S 1"."T1"
drop cascades to foreign table "S 1"."T2"
drop cascades to foreign table "S 1"."T3"
drop cascades to foreign table "S 1"."T4"
drop cascades to foreign table "S 1".base_tbl
drop cascades to foreign table "S 1".child_tbl
drop cascades to foreign table "S 1".fprt1
drop cascades to foreign table "S 1".fprt1_p1
drop cascades to foreign table "S 1".fprt1_p2
drop cascades to foreign table "S 1".fprt2
drop cascades to foreign table "S 1".fprt2_p1
drop cascades to foreign table "S 1".fprt2_p2
drop cascades to foreign table "S 1".gloc1
drop cascades to foreign table "S 1".loc1
drop cascades to foreign table "S 1".loc2
drop cascades to foreign table "S 1".loc3
drop cascades to foreign table "S 1".loct
drop cascades to foreign table "S 1".loct1
drop cascades to foreign table "S 1".loct1_2
drop cascades to foreign table "S 1".loct1_3
drop cascades to foreign table "S 1".loct1_4
drop cascades to foreign table "S 1".loct1_rescan
drop cascades to foreign table "S 1".loct2
drop cascades to foreign table "S 1".loct2_2
drop cascades to foreign table "S 1".loct2_3
drop cascades to foreign table "S 1".loct2_4
drop cascades to foreign table "S 1".loct2_rescan
drop cascades to foreign table "S 1".loct3
drop cascades to foreign table "S 1".loct4
drop cascades to foreign table "S 1".loct_2
drop cascades to foreign table "S 1".loct_empty
drop cascades to foreign table "S 1".pagg_tab
drop cascades to foreign table "S 1".pagg_tab_p1
drop cascades to foreign table "S 1".pagg_tab_p2
drop cascades to foreign table "S 1".pagg_tab_p3
drop cascades to foreign table "S 1".parent
--Testcase 1068:
DROP SCHEMA import_dest1 CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:3790: NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to foreign table import_dest1.t1
drop cascades to foreign table import_dest1.t2
drop cascades to foreign table import_dest1.t3
drop cascades to foreign table import_dest1.t5
drop cascades to foreign table import_dest1.x_4
--Testcase 1069:
DROP TYPE user_enum;
--Testcase 1070:
DROP USER MAPPING FOR PUBLIC SERVER :DB_SERVERNAME;
--Testcase 1071:
DROP USER MAPPING FOR PUBLIC SERVER :DB_SERVERNAME2;
--Testcase 1077:
DROP USER MAPPING FOR CURRENT_USER SERVER spdsrv;
--Testcase 1072:
DROP SERVER :DB_SERVERNAME CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:3800: NOTICE:  drop cascades to 13 other objects
DETAIL:  drop cascades to foreign table ft1_a_child
drop cascades to foreign table ft2_a_child
drop cascades to foreign table ft4_a_child
drop cascades to foreign table ft5_a_child
drop cascades to foreign table ft3_a_child
drop cascades to foreign table loc1_a_child
drop cascades to foreign table rem1_a_child
drop cascades to foreign table grem1_a_child
drop cascades to foreign table loct1_2
drop cascades to foreign table loct2_2
drop cascades to foreign table loc2_a_child
drop cascades to foreign table rem2_a_child
drop cascades to foreign table loc3_a_child
--Testcase 1073:
DROP SERVER :DB_SERVERNAME2 CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:3802: NOTICE:  drop cascades to foreign table ft6_a_child
--Testcase 1074:
DROP SERVER spdsrv CASCADE;
--Testcase 1075:
DROP EXTENSION pgspider_ext CASCADE;
--Testcase 1076:
DROP EXTENSION :DB_EXTENSIONNAME CASCADE;
psql:sql/13.15/ported_odbc_fdw.sql:3808: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to server mysql_svr
drop cascades to user mapping for public on server mysql_svr
DROP FUNCTION trigger_data CASCADE;
