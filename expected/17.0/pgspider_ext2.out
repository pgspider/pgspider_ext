-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION postgres_fdw;
-- Create 4 data sources
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER node1 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER node2 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER node3 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER node4 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
CREATE USER MAPPING FOR CURRENT_USER SERVER node1;
CREATE USER MAPPING FOR CURRENT_USER SERVER node2;
CREATE USER MAPPING FOR CURRENT_USER SERVER node3;
CREATE USER MAPPING FOR CURRENT_USER SERVER node4;
CREATE EXTENSION pgspider_ext;
CREATE SERVER spdsrv FOREIGN DATA WRAPPER pgspider_ext;
CREATE USER MAPPING FOR CURRENT_USER SERVER spdsrv;
SET enable_partitionwise_aggregate TO on;
-- *******************************************************************
-- Test data 1
-- *******************************************************************
-- ===================================================================
-- Create objects used through FDW loopback server
-- ===================================================================
CREATE TABLE test1_node1_src(i integer, t text);
CREATE TABLE test1_node2_src(i integer, t text);
CREATE TABLE test1_node3_src(i integer, t text);
CREATE TABLE test1_node4_src(i integer, t text);
-- ===================================================================
-- Insert test data
-- ===================================================================
-- node1
INSERT INTO test1_node1_src VALUES(1, 'a');
-- node2
INSERT INTO test1_node2_src VALUES(1111, 'b');
-- node3
INSERT INTO test1_node3_src VALUES(1, 'a');
INSERT INTO test1_node3_src VALUES(22222, 'a');
-- node4
INSERT INTO test1_node4_src VALUES(1, 'a');
INSERT INTO test1_node4_src VALUES(777, 'a');
INSERT INTO test1_node4_src VALUES(777, 'b');
INSERT INTO test1_node4_src VALUES(777, 'c');
INSERT INTO test1_node4_src VALUES(777, 'd');
-- ===================================================================
-- Create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE test1_node1(i integer, t text) SERVER node1 OPTIONS(table_name 'test1_node1_src');
CREATE FOREIGN TABLE test1_node2(i integer, t text) SERVER node2 OPTIONS(table_name 'test1_node2_src');
CREATE FOREIGN TABLE test1_node3(i integer, t text) SERVER node3 OPTIONS(table_name 'test1_node3_src');
CREATE FOREIGN TABLE test1_node4(i integer, t text) SERVER node4 OPTIONS(table_name 'test1_node4_src');
-- ===================================================================
-- Create a partition parent table
-- ===================================================================
CREATE TABLE test1(i integer, t text, __spd_url text) PARTITION BY LIST (__spd_url);
-- ===================================================================
-- Add nodes and select tables
-- ===================================================================
CREATE FOREIGN TABLE test1_node1_part PARTITION OF test1 FOR VALUES IN ('/node1/') SERVER spdsrv OPTIONS(child_name 'test1_node1');
SELECT * FROM test1 ORDER BY i, __spd_url;
 i | t | __spd_url 
---+---+-----------
 1 | a | /node1/
(1 row)

CREATE FOREIGN TABLE test1_node2_part PARTITION OF test1 FOR VALUES IN ('/node2/') SERVER spdsrv OPTIONS(child_name 'test1_node2');
SELECT * FROM test1 ORDER BY i, __spd_url;
  i   | t | __spd_url 
------+---+-----------
    1 | a | /node1/
 1111 | b | /node2/
(2 rows)

CREATE FOREIGN TABLE test1_node3_part PARTITION OF test1 FOR VALUES IN ('/node3/') SERVER spdsrv OPTIONS(child_name 'test1_node3');
SELECT * FROM test1 ORDER BY i, __spd_url;
   i   | t | __spd_url 
-------+---+-----------
     1 | a | /node1/
     1 | a | /node3/
  1111 | b | /node2/
 22222 | a | /node3/
(4 rows)

CREATE FOREIGN TABLE test1_node4_part PARTITION OF test1 FOR VALUES IN ('/node4/') SERVER spdsrv OPTIONS(child_name 'test1_node4');
SELECT * FROM test1 ORDER BY i, __spd_url;
   i   | t | __spd_url 
-------+---+-----------
     1 | a | /node1/
     1 | a | /node3/
     1 | a | /node4/
   777 | c | /node4/
   777 | d | /node4/
   777 | b | /node4/
   777 | a | /node4/
  1111 | b | /node2/
 22222 | a | /node3/
(9 rows)

-- ===================================================================
-- Execute queries
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM test1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Gather
   Output: test1.i, test1.t, test1.__spd_url
   Workers Planned: 2
   ->  Parallel Append
         ->  Foreign Scan on public.test1_node1_part test1_1
               Output: test1_1.i, test1_1.t, test1_1.__spd_url
                 Remote SQL: SELECT i, t FROM public.test1_node1_src
         ->  Foreign Scan on public.test1_node2_part test1_2
               Output: test1_2.i, test1_2.t, test1_2.__spd_url
                 Remote SQL: SELECT i, t FROM public.test1_node2_src
         ->  Foreign Scan on public.test1_node3_part test1_3
               Output: test1_3.i, test1_3.t, test1_3.__spd_url
                 Remote SQL: SELECT i, t FROM public.test1_node3_src
         ->  Foreign Scan on public.test1_node4_part test1_4
               Output: test1_4.i, test1_4.t, test1_4.__spd_url
                 Remote SQL: SELECT i, t FROM public.test1_node4_src
(16 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT sum(i), count(i) FROM test1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Finalize Aggregate
   Output: sum(test1.i), count(test1.i)
   ->  Append
         ->  Foreign Scan
               Output: (PARTIAL sum(test1.i)), (PARTIAL count(test1.i))
                 Relations: Aggregate on (public.test1_node1 test1)
                 Remote SQL: SELECT sum(i), count(i) FROM public.test1_node1_src
         ->  Foreign Scan
               Output: (PARTIAL sum(test1_1.i)), (PARTIAL count(test1_1.i))
                 Relations: Aggregate on (public.test1_node2 test1_1)
                 Remote SQL: SELECT sum(i), count(i) FROM public.test1_node2_src
         ->  Foreign Scan
               Output: (PARTIAL sum(test1_2.i)), (PARTIAL count(test1_2.i))
                 Relations: Aggregate on (public.test1_node3 test1_2)
                 Remote SQL: SELECT sum(i), count(i) FROM public.test1_node3_src
         ->  Foreign Scan
               Output: (PARTIAL sum(test1_3.i)), (PARTIAL count(test1_3.i))
                 Relations: Aggregate on (public.test1_node4 test1_3)
                 Remote SQL: SELECT sum(i), count(i) FROM public.test1_node4_src
(19 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT stddev(i) FROM test1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Finalize Aggregate
   Output: stddev(test1.i)
   ->  Gather
         Output: (PARTIAL stddev(test1.i))
         Workers Planned: 2
         ->  Parallel Append
               ->  Partial Aggregate
                     Output: PARTIAL stddev(test1.i)
                     ->  Foreign Scan on public.test1_node1_part test1
                           Output: test1.i
                             Remote SQL: SELECT i FROM public.test1_node1_src
               ->  Partial Aggregate
                     Output: PARTIAL stddev(test1_1.i)
                     ->  Foreign Scan on public.test1_node2_part test1_1
                           Output: test1_1.i
                             Remote SQL: SELECT i FROM public.test1_node2_src
               ->  Partial Aggregate
                     Output: PARTIAL stddev(test1_2.i)
                     ->  Foreign Scan on public.test1_node3_part test1_2
                           Output: test1_2.i
                             Remote SQL: SELECT i FROM public.test1_node3_src
               ->  Partial Aggregate
                     Output: PARTIAL stddev(test1_3.i)
                     ->  Foreign Scan on public.test1_node4_part test1_3
                           Output: test1_3.i
                             Remote SQL: SELECT i FROM public.test1_node4_src
(26 rows)

SELECT * FROM test1;
   i   | t | __spd_url 
-------+---+-----------
     1 | a | /node4/
   777 | a | /node4/
   777 | b | /node4/
   777 | c | /node4/
   777 | d | /node4/
     1 | a | /node3/
 22222 | a | /node3/
  1111 | b | /node2/
     1 | a | /node1/
(9 rows)

SELECT i FROM test1;
   i   
-------
     1
   777
   777
   777
   777
     1
 22222
  1111
     1
(9 rows)

SELECT i + 1 FROM test1;
 ?column? 
----------
        2
      778
      778
      778
      778
        2
    22223
     1112
        2
(9 rows)

SELECT t FROM test1;
 t 
---
 a
 a
 b
 c
 d
 a
 a
 b
 a
(9 rows)

SELECT * FROM test1 WHERE i = 1;
 i | t | __spd_url 
---+---+-----------
 1 | a | /node1/
 1 | a | /node3/
 1 | a | /node4/
(3 rows)

SELECT * FROM test1 WHERE __spd_url LIKE '/node1/' and i = 1 and t = 'a';
 i | t | __spd_url 
---+---+-----------
 1 | a | /node1/
(1 row)

SELECT * FROM test1 WHERE i = 1 ORDER BY i,__spd_url;
 i | t | __spd_url 
---+---+-----------
 1 | a | /node1/
 1 | a | /node3/
 1 | a | /node4/
(3 rows)

SELECT * FROM test1 UNION ALL SELECT * FROM test1 ORDER BY i,__spd_url;
   i   | t | __spd_url 
-------+---+-----------
     1 | a | /node1/
     1 | a | /node1/
     1 | a | /node3/
     1 | a | /node3/
     1 | a | /node4/
     1 | a | /node4/
   777 | d | /node4/
   777 | b | /node4/
   777 | c | /node4/
   777 | d | /node4/
   777 | b | /node4/
   777 | c | /node4/
   777 | a | /node4/
   777 | a | /node4/
  1111 | b | /node2/
  1111 | b | /node2/
 22222 | a | /node3/
 22222 | a | /node3/
(18 rows)

SELECT __spd_url FROM test1 ORDER BY __spd_url;
 __spd_url 
-----------
 /node1/
 /node2/
 /node3/
 /node3/
 /node4/
 /node4/
 /node4/
 /node4/
 /node4/
(9 rows)

SELECT i, __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i;
   i   | __spd_url 
-------+-----------
     1 | /node1/
     1 | /node3/
     1 | /node4/
   777 | /node4/
  1111 | /node2/
 22222 | /node3/
(6 rows)

SELECT t, __spd_url FROM test1 GROUP BY __spd_url, t ORDER BY t;
 t | __spd_url 
---+-----------
 a | /node3/
 a | /node1/
 a | /node4/
 b | /node2/
 b | /node4/
 c | /node4/
 d | /node4/
(7 rows)

SELECT __spd_url, i FROM test1 GROUP BY i, __spd_url ORDER BY i;
 __spd_url |   i   
-----------+-------
 /node1/   |     1
 /node3/   |     1
 /node4/   |     1
 /node4/   |   777
 /node2/   |  1111
 /node3/   | 22222
(6 rows)

-- Aggregate function
SELECT sum(i) FROM test1;
  sum  
-------
 26444
(1 row)

SELECT avg(i) FROM test1;
          avg          
-----------------------
 2938.2222222222222222
(1 row)

SELECT stddev(i) FROM test1;
      stddev       
-------------------
 7243.688421270233
(1 row)

SELECT sum(i), t FROM test1 GROUP BY t;
  sum  | t 
-------+---
   777 | d
   777 | c
  1888 | b
 23002 | a
(4 rows)

SELECT sum(i), t, count(i) FROM test1 GROUP BY t;
  sum  | t | count 
-------+---+-------
   777 | d |     1
   777 | c |     1
  1888 | b |     2
 23002 | a |     5
(4 rows)

SELECT sum(i), i FROM test1 GROUP BY i ORDER BY i;
  sum  |   i   
-------+-------
     3 |     1
  3108 |   777
  1111 |  1111
 22222 | 22222
(4 rows)

SELECT sum(i), count(i), i FROM test1 GROUP BY i ORDER BY i;
  sum  | count |   i   
-------+-------+-------
     3 |     3 |     1
  3108 |     4 |   777
  1111 |     1 |  1111
 22222 |     1 | 22222
(4 rows)

SELECT t, sum(i), t FROM test1 GROUP BY i, t ORDER BY i;
 t |  sum  | t 
---+-------+---
 a |     3 | a
 a |   777 | a
 b |   777 | b
 c |   777 | c
 d |   777 | d
 b |  1111 | b
 a | 22222 | a
(7 rows)

SELECT sum(i) AS aa, count(i) FROM test1 GROUP BY i;
  aa   | count 
-------+-------
  1111 |     1
     3 |     3
  3108 |     4
 22222 |     1
(4 rows)

SELECT sum(i) AS aa, count(i), i/2, sum(i)/2 FROM test1 GROUP BY i;
  aa   | count | ?column? | ?column? 
-------+-------+----------+----------
  1111 |     1 |      555 |      555
     3 |     3 |        0 |        1
  3108 |     4 |      388 |     1554
 22222 |     1 |    11111 |    11111
(4 rows)

SELECT sum(i) AS aa, count(i) FROM test1 GROUP BY i ORDER BY aa;
  aa   | count 
-------+-------
     3 |     3
  1111 |     1
  3108 |     4
 22222 |     1
(4 rows)

SELECT sum(i), count(i) FROM test1 GROUP BY i ORDER BY 1;
  sum  | count 
-------+-------
     3 |     3
  1111 |     1
  3108 |     4
 22222 |     1
(4 rows)

SELECT i, sum(i) FROM test1 GROUP BY i ORDER BY 1;
   i   |  sum  
-------+-------
     1 |     3
   777 |  3108
  1111 |  1111
 22222 | 22222
(4 rows)

-- Aggregate function with partition key
SELECT sum(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i;
  sum  | __spd_url 
-------+-----------
     1 | /node1/
     1 | /node3/
     1 | /node4/
  3108 | /node4/
  1111 | /node2/
 22222 | /node3/
(6 rows)

SELECT __spd_url, sum(i) FROM test1 GROUP BY i, __spd_url ORDER BY i;
 __spd_url |  sum  
-----------+-------
 /node1/   |     1
 /node3/   |     1
 /node4/   |     1
 /node4/   |  3108
 /node2/   |  1111
 /node3/   | 22222
(6 rows)

SELECT __spd_url, sum(i), __spd_url FROM test1 GROUP BY i, __spd_url ORDER BY i;
 __spd_url |  sum  | __spd_url 
-----------+-------+-----------
 /node1/   |     1 | /node1/
 /node3/   |     1 | /node3/
 /node4/   |     1 | /node4/
 /node4/   |  3108 | /node4/
 /node2/   |  1111 | /node2/
 /node3/   | 22222 | /node3/
(6 rows)

SELECT __spd_url, count(i), sum(i), __spd_url FROM test1 GROUP BY __spd_url, i ORDER BY i;
 __spd_url | count |  sum  | __spd_url 
-----------+-------+-------+-----------
 /node1/   |     1 |     1 | /node1/
 /node3/   |     1 |     1 | /node3/
 /node4/   |     1 |     1 | /node4/
 /node4/   |     4 |  3108 | /node4/
 /node2/   |     1 |  1111 | /node2/
 /node3/   |     1 | 22222 | /node3/
(6 rows)

-- Prepared statement
PREPARE stmt AS SELECT sum(i),count(i),i FROM test1 GROUP BY i ORDER BY i;
EXECUTE stmt;
  sum  | count |   i   
-------+-------+-------
     3 |     3 |     1
  3108 |     4 |   777
  1111 |     1 |  1111
 22222 |     1 | 22222
(4 rows)

DO $$
BEGIN
   FOR counter IN 1..50 LOOP
   EXECUTE 'EXECUTE stmt;';
   END LOOP;
END; $$;
DEALLOCATE stmt;
SELECT * FROM (SELECT sum(i) FROM test1) A,(SELECT count(i) FROM test1) B;
  sum  | count 
-------+-------
 26444 |     9
(1 row)

-- ===================================================================
-- Clean up
-- ===================================================================
DROP FOREIGN TABLE test1_node1_part;
DROP FOREIGN TABLE test1_node2_part;
DROP FOREIGN TABLE test1_node3_part;
DROP FOREIGN TABLE test1_node4_part;
DROP TABLE test1;
DROP FOREIGN TABLE test1_node1;
DROP FOREIGN TABLE test1_node2;
DROP FOREIGN TABLE test1_node3;
DROP FOREIGN TABLE test1_node4;
DROP TABLE test1_node1_src;
DROP TABLE test1_node2_src;
DROP TABLE test1_node3_src;
DROP TABLE test1_node4_src;
DROP USER MAPPING FOR CURRENT_USER SERVER spdsrv;
DROP USER MAPPING FOR CURRENT_USER SERVER node1;
DROP USER MAPPING FOR CURRENT_USER SERVER node2;
DROP USER MAPPING FOR CURRENT_USER SERVER node3;
DROP USER MAPPING FOR CURRENT_USER SERVER node4;
DROP SERVER spdsrv;
DROP SERVER node1;
DROP SERVER node2;
DROP SERVER node3;
DROP SERVER node4;
DROP EXTENSION pgspider_ext;
DROP EXTENSION postgres_fdw;
-- End
